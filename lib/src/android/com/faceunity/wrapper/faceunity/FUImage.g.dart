// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:nama_fluttify/src/ios/ios.export.g.dart';
import 'package:nama_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class com_faceunity_wrapper_faceunity_FUImage extends java_lang_Object  {
  //region constants
  
  //endregion

  //region creators
  static Future<com_faceunity_wrapper_faceunity_FUImage> create__() async {
    final int refId = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('ObjectFactory::createcom_faceunity_wrapper_faceunity_FUImage__');
    final object = com_faceunity_wrapper_faceunity_FUImage()..refId = refId..tag = 'nama_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<List<com_faceunity_wrapper_faceunity_FUImage>> create_batch__(int length) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('ObjectFactory::create_batchcom_faceunity_wrapper_faceunity_FUImage__', {'length': length});
  
    final List<com_faceunity_wrapper_faceunity_FUImage> typedResult = resultBatch.map((result) => com_faceunity_wrapper_faceunity_FUImage()..refId = result..tag = 'nama_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region getters
  Future<int> get_tex() async {
    final result = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod("com.faceunity.wrapper.faceunity.FUImage::get_tex", {'refId': refId});
  
    return result;
  }
  
  Future<Uint8List> get_nv21_data() async {
    final result = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod("com.faceunity.wrapper.faceunity.FUImage::get_nv21_data", {'refId': refId});
  
    return result;
  }
  
  //endregion

  //region setters
  Future<void> set_tex(int tex) async {
    await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('com.faceunity.wrapper.faceunity.FUImage::set_tex', {'refId': refId, "tex": tex});
  
  
  }
  
  Future<void> set_nv21_data(Uint8List nv21_data) async {
    await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('com.faceunity.wrapper.faceunity.FUImage::set_nv21_data', {'refId': refId, "nv21_data": nv21_data});
  
  
  }
  
  //endregion

  //region methods
  
  //endregion
}

extension com_faceunity_wrapper_faceunity_FUImage_Batch on List<com_faceunity_wrapper_faceunity_FUImage> {
  //region getters
  Future<List<int>> get_tex_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod("com.faceunity.wrapper.faceunity.FUImage::get_tex_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<Uint8List>> get_nv21_data_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod("com.faceunity.wrapper.faceunity.FUImage::get_nv21_data_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  //endregion

  //region setters
  Future<void> set_tex_batch(List<int> tex) async {
    await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('com.faceunity.wrapper.faceunity.FUImage::set_tex_batch', [for (int i = 0; i < this.length; i++) {'refId': this[i].refId, "tex": tex[i]}]);
  
  
  }
  
  Future<void> set_nv21_data_batch(List<Uint8List> nv21_data) async {
    await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('com.faceunity.wrapper.faceunity.FUImage::set_nv21_data_batch', [for (int i = 0; i < this.length; i++) {'refId': this[i].refId, "nv21_data": nv21_data[i]}]);
  
  
  }
  
  //endregion

  //region methods
  
  //endregion
}