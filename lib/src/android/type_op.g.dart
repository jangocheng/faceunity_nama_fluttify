// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:io';

import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';
import 'package:nama_fluttify/src/android/android.export.g.dart';
import 'package:nama_fluttify/src/ios/ios.export.g.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import
extension TypeOpNamaFluttifyAndroid on Ref {
  Future<bool> iscom_spap_nama_R_string() async {
    final result = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('RefClass::isKindOfcom_spap_nama_R_string', {'refId': refId});
    return result;
  }
  
  Future<bool> iscom_spap_nama_R_drawable() async {
    final result = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('RefClass::isKindOfcom_spap_nama_R_drawable', {'refId': refId});
    return result;
  }
  
  Future<bool> iscom_spap_nama_R() async {
    final result = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('RefClass::isKindOfcom_spap_nama_R', {'refId': refId});
    return result;
  }
  
  Future<bool> iscom_spap_nama_R_attr() async {
    final result = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('RefClass::isKindOfcom_spap_nama_R_attr', {'refId': refId});
    return result;
  }
  
  Future<bool> iscom_spap_nama_BuildConfig() async {
    final result = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('RefClass::isKindOfcom_spap_nama_BuildConfig', {'refId': refId});
    return result;
  }
  
  Future<bool> iscom_faceunity_wrapper_faceunity() async {
    final result = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('RefClass::isKindOfcom_faceunity_wrapper_faceunity', {'refId': refId});
    return result;
  }
  
  Future<bool> iscom_faceunity_wrapper_faceunity_RotatedImage() async {
    final result = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('RefClass::isKindOfcom_faceunity_wrapper_faceunity_RotatedImage', {'refId': refId});
    return result;
  }
  
  Future<bool> iscom_faceunity_wrapper_faceunity_FUImage() async {
    final result = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('RefClass::isKindOfcom_faceunity_wrapper_faceunity_FUImage', {'refId': refId});
    return result;
  }
  
  Future<bool> iscom_faceunity_wrapper_faceunity_AvatarInfo() async {
    final result = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('RefClass::isKindOfcom_faceunity_wrapper_faceunity_AvatarInfo', {'refId': refId});
    return result;
  }
  
  Future<bool> iscom_faceunity_wrapper_faceunity_SplitViewInfo() async {
    final result = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('RefClass::isKindOfcom_faceunity_wrapper_faceunity_SplitViewInfo', {'refId': refId});
    return result;
  }
  
  Future<bool> iscom_faceunity_BuildConfig() async {
    final result = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('RefClass::isKindOfcom_faceunity_BuildConfig', {'refId': refId});
    return result;
  }
  

  Future<com_spap_nama_R_string> ascom_spap_nama_R_string() async {
    final result = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('RefClass::ascom_spap_nama_R_string', {'refId': refId});
    return com_spap_nama_R_string()..refId = result;
  }
  
  Future<com_spap_nama_R_drawable> ascom_spap_nama_R_drawable() async {
    final result = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('RefClass::ascom_spap_nama_R_drawable', {'refId': refId});
    return com_spap_nama_R_drawable()..refId = result;
  }
  
  Future<com_spap_nama_R> ascom_spap_nama_R() async {
    final result = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('RefClass::ascom_spap_nama_R', {'refId': refId});
    return com_spap_nama_R()..refId = result;
  }
  
  Future<com_spap_nama_R_attr> ascom_spap_nama_R_attr() async {
    final result = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('RefClass::ascom_spap_nama_R_attr', {'refId': refId});
    return com_spap_nama_R_attr()..refId = result;
  }
  
  Future<com_spap_nama_BuildConfig> ascom_spap_nama_BuildConfig() async {
    final result = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('RefClass::ascom_spap_nama_BuildConfig', {'refId': refId});
    return com_spap_nama_BuildConfig()..refId = result;
  }
  
  Future<com_faceunity_wrapper_faceunity> ascom_faceunity_wrapper_faceunity() async {
    final result = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('RefClass::ascom_faceunity_wrapper_faceunity', {'refId': refId});
    return com_faceunity_wrapper_faceunity()..refId = result;
  }
  
  Future<com_faceunity_wrapper_faceunity_RotatedImage> ascom_faceunity_wrapper_faceunity_RotatedImage() async {
    final result = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('RefClass::ascom_faceunity_wrapper_faceunity_RotatedImage', {'refId': refId});
    return com_faceunity_wrapper_faceunity_RotatedImage()..refId = result;
  }
  
  Future<com_faceunity_wrapper_faceunity_FUImage> ascom_faceunity_wrapper_faceunity_FUImage() async {
    final result = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('RefClass::ascom_faceunity_wrapper_faceunity_FUImage', {'refId': refId});
    return com_faceunity_wrapper_faceunity_FUImage()..refId = result;
  }
  
  Future<com_faceunity_wrapper_faceunity_AvatarInfo> ascom_faceunity_wrapper_faceunity_AvatarInfo() async {
    final result = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('RefClass::ascom_faceunity_wrapper_faceunity_AvatarInfo', {'refId': refId});
    return com_faceunity_wrapper_faceunity_AvatarInfo()..refId = result;
  }
  
  Future<com_faceunity_wrapper_faceunity_SplitViewInfo> ascom_faceunity_wrapper_faceunity_SplitViewInfo() async {
    final result = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('RefClass::ascom_faceunity_wrapper_faceunity_SplitViewInfo', {'refId': refId});
    return com_faceunity_wrapper_faceunity_SplitViewInfo()..refId = result;
  }
  
  Future<com_faceunity_BuildConfig> ascom_faceunity_BuildConfig() async {
    final result = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('RefClass::ascom_faceunity_BuildConfig', {'refId': refId});
    return com_faceunity_BuildConfig()..refId = result;
  }
  
}