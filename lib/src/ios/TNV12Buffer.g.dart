// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:nama_fluttify/src/ios/ios.export.g.dart';
import 'package:nama_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class TNV12Buffer extends NSObject  {
  //region constants
  
  //endregion

  //region creators
  static Future<TNV12Buffer> create__() async {
    final int refId = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('ObjectFactory::createTNV12Buffer');
    final object = TNV12Buffer()..refId = refId..tag = 'nama_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<List<TNV12Buffer>> create_batch__(int length) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('ObjectFactory::create_batchTNV12Buffer', {'length': length});
  
    final List<TNV12Buffer> typedResult = resultBatch.map((result) => TNV12Buffer()..refId = result..tag = 'nama_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region getters
  Future<NSValue> get_p_Y() async {
    final result = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod("TNV12Buffer::get_p_Y", {'refId': refId});
    kNativeObjectPool.add(result);
    return result;
  }
  
  Future<NSValue> get_p_CbCr() async {
    final result = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod("TNV12Buffer::get_p_CbCr", {'refId': refId});
    kNativeObjectPool.add(result);
    return result;
  }
  
  Future<int> get_stride_Y() async {
    final result = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod("TNV12Buffer::get_stride_Y", {'refId': refId});
  
    return result;
  }
  
  Future<int> get_stride_CbCr() async {
    final result = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod("TNV12Buffer::get_stride_CbCr", {'refId': refId});
  
    return result;
  }
  
  //endregion

  //region setters
  Future<void> set_p_Y(NSValue p_Y) async {
    await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('TNV12Buffer::set_p_Y', {'refId': refId, "p_Y": p_Y.refId});
  
  
  }
  
  Future<void> set_p_CbCr(NSValue p_CbCr) async {
    await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('TNV12Buffer::set_p_CbCr', {'refId': refId, "p_CbCr": p_CbCr.refId});
  
  
  }
  
  Future<void> set_stride_Y(int stride_Y) async {
    await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('TNV12Buffer::set_stride_Y', {'refId': refId, "stride_Y": stride_Y});
  
  
  }
  
  Future<void> set_stride_CbCr(int stride_CbCr) async {
    await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('TNV12Buffer::set_stride_CbCr', {'refId': refId, "stride_CbCr": stride_CbCr});
  
  
  }
  
  //endregion

  //region methods
  
  //endregion
}

extension TNV12Buffer_Batch on List<TNV12Buffer> {
  //region getters
  Future<List<NSValue>> get_p_Y_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod("TNV12Buffer::get_p_Y_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).cast<NSValue>().map((result) => result).toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  Future<List<NSValue>> get_p_CbCr_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod("TNV12Buffer::get_p_CbCr_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).cast<NSValue>().map((result) => result).toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  Future<List<int>> get_stride_Y_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod("TNV12Buffer::get_stride_Y_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).cast<int>().map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<int>> get_stride_CbCr_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod("TNV12Buffer::get_stride_CbCr_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).cast<int>().map((result) => result).toList();
  
    return typedResult;
  }
  
  //endregion

  //region setters
  Future<void> set_p_Y_batch(List<NSValue> p_Y) async {
    await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('TNV12Buffer::set_p_Y_batch', [for (int i = 0; i < this.length; i++) {'refId': this[i].refId, "p_Y": p_Y[i].refId}]);
  
  
  }
  
  Future<void> set_p_CbCr_batch(List<NSValue> p_CbCr) async {
    await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('TNV12Buffer::set_p_CbCr_batch', [for (int i = 0; i < this.length; i++) {'refId': this[i].refId, "p_CbCr": p_CbCr[i].refId}]);
  
  
  }
  
  Future<void> set_stride_Y_batch(List<int> stride_Y) async {
    await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('TNV12Buffer::set_stride_Y_batch', [for (int i = 0; i < this.length; i++) {'refId': this[i].refId, "stride_Y": stride_Y[i]}]);
  
  
  }
  
  Future<void> set_stride_CbCr_batch(List<int> stride_CbCr) async {
    await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('TNV12Buffer::set_stride_CbCr_batch', [for (int i = 0; i < this.length; i++) {'refId': this[i].refId, "stride_CbCr": stride_CbCr[i]}]);
  
  
  }
  
  //endregion

  //region methods
  
  //endregion
}