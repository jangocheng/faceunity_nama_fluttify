// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:nama_fluttify/src/ios/ios.export.g.dart';
import 'package:nama_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

Future<void> fu3DBodyTrackerDestroy(NSValue/* void* */ model_ptr) async {
  // print log
  if (fluttifyLogEnabled) {
    print('fluttify-dart: fu3DBodyTrackerDestroy::fu3DBodyTrackerDestroy([])');
  }

  // invoke native method
  final result = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('fu3DBodyTrackerDestroy::fu3DBodyTrackerDestroy', {"model_ptr": model_ptr.refId});
  

  // handle native call
  

  // convert native result to dart side object
  if (result == null) {
    return null;
  } else {
    
    return result;
  }
}

Future<int> fu3DBodyTrackerRun(NSValue/* void* */ model_ptr, int human_handle, NSValue/* void* */ img, int w, int h, int fu_image_format, int rotation_mode) async {
  // print log
  if (fluttifyLogEnabled) {
    print('fluttify-dart: fu3DBodyTrackerRun::fu3DBodyTrackerRun([\'human_handle\':$human_handle, \'w\':$w, \'h\':$h, \'fu_image_format\':$fu_image_format, \'rotation_mode\':$rotation_mode])');
  }

  // invoke native method
  final result = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('fu3DBodyTrackerRun::fu3DBodyTrackerRun', {"model_ptr": model_ptr.refId, "human_handle": human_handle, "img": img.refId, "w": w, "h": h, "fu_image_format": fu_image_format, "rotation_mode": rotation_mode});
  

  // handle native call
  

  // convert native result to dart side object
  if (result == null) {
    return null;
  } else {
    
    return result;
  }
}

Future<int> fuFaceCaptureDestory(NSValue/* void* */ model_ptr) async {
  // print log
  if (fluttifyLogEnabled) {
    print('fluttify-dart: fuFaceCaptureDestory::fuFaceCaptureDestory([])');
  }

  // invoke native method
  final result = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('fuFaceCaptureDestory::fuFaceCaptureDestory', {"model_ptr": model_ptr.refId});
  

  // handle native call
  

  // convert native result to dart side object
  if (result == null) {
    return null;
  } else {
    
    return result;
  }
}

Future<int> fuFaceCaptureSetScene(NSValue/* void* */ model_ptr, int scene_type) async {
  // print log
  if (fluttifyLogEnabled) {
    print('fluttify-dart: fuFaceCaptureSetScene::fuFaceCaptureSetScene([\'scene_type\':$scene_type])');
  }

  // invoke native method
  final result = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('fuFaceCaptureSetScene::fuFaceCaptureSetScene', {"model_ptr": model_ptr.refId, "scene_type": scene_type});
  

  // handle native call
  

  // convert native result to dart side object
  if (result == null) {
    return null;
  } else {
    
    return result;
  }
}

Future<int> fuFaceCaptureSetBBOX(NSValue/* void* */ model_ptr, int cx, int cy, int sx, int sy) async {
  // print log
  if (fluttifyLogEnabled) {
    print('fluttify-dart: fuFaceCaptureSetBBOX::fuFaceCaptureSetBBOX([\'cx\':$cx, \'cy\':$cy, \'sx\':$sx, \'sy\':$sy])');
  }

  // invoke native method
  final result = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('fuFaceCaptureSetBBOX::fuFaceCaptureSetBBOX', {"model_ptr": model_ptr.refId, "cx": cx, "cy": cy, "sx": sx, "sy": sy});
  

  // handle native call
  

  // convert native result to dart side object
  if (result == null) {
    return null;
  } else {
    
    return result;
  }
}

Future<int> fuFaceCaptureReset(NSValue/* void* */ model_ptr) async {
  // print log
  if (fluttifyLogEnabled) {
    print('fluttify-dart: fuFaceCaptureReset::fuFaceCaptureReset([])');
  }

  // invoke native method
  final result = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('fuFaceCaptureReset::fuFaceCaptureReset', {"model_ptr": model_ptr.refId});
  

  // handle native call
  

  // convert native result to dart side object
  if (result == null) {
    return null;
  } else {
    
    return result;
  }
}

Future<int> fuFaceCaptureProcessFrame(NSValue/* void* */ manager_ptr_addr, NSValue/* void* */ image_data, int image_w, int image_h, int fu_image_format, int rotate_mode) async {
  // print log
  if (fluttifyLogEnabled) {
    print('fluttify-dart: fuFaceCaptureProcessFrame::fuFaceCaptureProcessFrame([\'image_w\':$image_w, \'image_h\':$image_h, \'fu_image_format\':$fu_image_format, \'rotate_mode\':$rotate_mode])');
  }

  // invoke native method
  final result = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('fuFaceCaptureProcessFrame::fuFaceCaptureProcessFrame', {"manager_ptr_addr": manager_ptr_addr.refId, "image_data": image_data.refId, "image_w": image_w, "image_h": image_h, "fu_image_format": fu_image_format, "rotate_mode": rotate_mode});
  

  // handle native call
  

  // convert native result to dart side object
  if (result == null) {
    return null;
  } else {
    
    return result;
  }
}

Future<int> fuFaceCaptureGetResultIsFace(NSValue/* void* */ manager_ptr_addr, int face_n) async {
  // print log
  if (fluttifyLogEnabled) {
    print('fluttify-dart: fuFaceCaptureGetResultIsFace::fuFaceCaptureGetResultIsFace([\'face_n\':$face_n])');
  }

  // invoke native method
  final result = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('fuFaceCaptureGetResultIsFace::fuFaceCaptureGetResultIsFace', {"manager_ptr_addr": manager_ptr_addr.refId, "face_n": face_n});
  

  // handle native call
  

  // convert native result to dart side object
  if (result == null) {
    return null;
  } else {
    
    return result;
  }
}

Future<int> fuFaceCaptureGetResultFaceID(NSValue/* void* */ manager_ptr_addr, int face_n) async {
  // print log
  if (fluttifyLogEnabled) {
    print('fluttify-dart: fuFaceCaptureGetResultFaceID::fuFaceCaptureGetResultFaceID([\'face_n\':$face_n])');
  }

  // invoke native method
  final result = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('fuFaceCaptureGetResultFaceID::fuFaceCaptureGetResultFaceID', {"manager_ptr_addr": manager_ptr_addr.refId, "face_n": face_n});
  

  // handle native call
  

  // convert native result to dart side object
  if (result == null) {
    return null;
  } else {
    
    return result;
  }
}

Future<double> fuFaceCaptureGetResultFocalLength(NSValue/* void* */ manager_ptr_addr) async {
  // print log
  if (fluttifyLogEnabled) {
    print('fluttify-dart: fuFaceCaptureGetResultFocalLength::fuFaceCaptureGetResultFocalLength([])');
  }

  // invoke native method
  final result = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('fuFaceCaptureGetResultFocalLength::fuFaceCaptureGetResultFocalLength', {"manager_ptr_addr": manager_ptr_addr.refId});
  

  // handle native call
  

  // convert native result to dart side object
  if (result == null) {
    return null;
  } else {
    
    return result;
  }
}

Future<int> fuFaceCaptureGetResultFaceNum(NSValue/* void* */ manager_ptr_addr) async {
  // print log
  if (fluttifyLogEnabled) {
    print('fluttify-dart: fuFaceCaptureGetResultFaceNum::fuFaceCaptureGetResultFaceNum([])');
  }

  // invoke native method
  final result = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('fuFaceCaptureGetResultFaceNum::fuFaceCaptureGetResultFaceNum', {"manager_ptr_addr": manager_ptr_addr.refId});
  

  // handle native call
  

  // convert native result to dart side object
  if (result == null) {
    return null;
  } else {
    
    return result;
  }
}

Future<double> fuFaceCaptureGetResultTongueScore(NSValue/* void* */ manager_ptr_addr, int face_n) async {
  // print log
  if (fluttifyLogEnabled) {
    print('fluttify-dart: fuFaceCaptureGetResultTongueScore::fuFaceCaptureGetResultTongueScore([\'face_n\':$face_n])');
  }

  // invoke native method
  final result = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('fuFaceCaptureGetResultTongueScore::fuFaceCaptureGetResultTongueScore', {"manager_ptr_addr": manager_ptr_addr.refId, "face_n": face_n});
  

  // handle native call
  

  // convert native result to dart side object
  if (result == null) {
    return null;
  } else {
    
    return result;
  }
}

Future<double> fuFaceCaptureGetResultFaceScore(NSValue/* void* */ manager_ptr_addr, int face_n) async {
  // print log
  if (fluttifyLogEnabled) {
    print('fluttify-dart: fuFaceCaptureGetResultFaceScore::fuFaceCaptureGetResultFaceScore([\'face_n\':$face_n])');
  }

  // invoke native method
  final result = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('fuFaceCaptureGetResultFaceScore::fuFaceCaptureGetResultFaceScore', {"manager_ptr_addr": manager_ptr_addr.refId, "face_n": face_n});
  

  // handle native call
  

  // convert native result to dart side object
  if (result == null) {
    return null;
  } else {
    
    return result;
  }
}

Future<int> fuFaceCaptureGetResultTongueClass(NSValue/* void* */ manager_ptr_addr, int face_n) async {
  // print log
  if (fluttifyLogEnabled) {
    print('fluttify-dart: fuFaceCaptureGetResultTongueClass::fuFaceCaptureGetResultTongueClass([\'face_n\':$face_n])');
  }

  // invoke native method
  final result = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('fuFaceCaptureGetResultTongueClass::fuFaceCaptureGetResultTongueClass', {"manager_ptr_addr": manager_ptr_addr.refId, "face_n": face_n});
  

  // handle native call
  

  // convert native result to dart side object
  if (result == null) {
    return null;
  } else {
    
    return result;
  }
}
