// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:faceunity_nama_fluttify/src/ios/ios.export.g.dart';
import 'package:faceunity_nama_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class TIOSDualInput extends NSObject  {
  //region constants
  
  //endregion

  //region creators
  static Future<TIOSDualInput> create__() async {
    final int refId = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('ObjectFactory::createTIOSDualInput');
    final object = TIOSDualInput()..refId = refId..tag = 'faceunity_nama_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<List<TIOSDualInput>> create_batch__(int length) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('ObjectFactory::create_batchTIOSDualInput', {'length': length});
  
    final List<TIOSDualInput> typedResult = resultBatch.map((result) => TIOSDualInput()..refId = result..tag = 'faceunity_nama_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region getters
  Future<NSValue/* void* */> get_p_BGRA() async {
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod("TIOSDualInput::get_p_BGRA", {'refId': refId});
    kNativeObjectPool.add(NSValue/* void* */()..refId = result..tag = 'faceunity_nama_fluttify');
    return NSValue/* void* */()..refId = result..tag = 'faceunity_nama_fluttify';
  }
  
  Future<NSValue/* void* */> get_p_Y() async {
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod("TIOSDualInput::get_p_Y", {'refId': refId});
    kNativeObjectPool.add(NSValue/* void* */()..refId = result..tag = 'faceunity_nama_fluttify');
    return NSValue/* void* */()..refId = result..tag = 'faceunity_nama_fluttify';
  }
  
  Future<NSValue/* void* */> get_p_CbCr() async {
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod("TIOSDualInput::get_p_CbCr", {'refId': refId});
    kNativeObjectPool.add(NSValue/* void* */()..refId = result..tag = 'faceunity_nama_fluttify');
    return NSValue/* void* */()..refId = result..tag = 'faceunity_nama_fluttify';
  }
  
  Future<int> get_stride_BGRA() async {
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod("TIOSDualInput::get_stride_BGRA", {'refId': refId});
  
    return result;
  }
  
  Future<int> get_stride_Y() async {
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod("TIOSDualInput::get_stride_Y", {'refId': refId});
  
    return result;
  }
  
  Future<int> get_stride_CbCr() async {
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod("TIOSDualInput::get_stride_CbCr", {'refId': refId});
  
    return result;
  }
  
  Future<int> get_tex_handle() async {
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod("TIOSDualInput::get_tex_handle", {'refId': refId});
  
    return result;
  }
  
  Future<int> get_format() async {
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod("TIOSDualInput::get_format", {'refId': refId});
  
    return result;
  }
  
  //endregion

  //region setters
  Future<void> set_p_BGRA(NSValue/* void* */ p_BGRA) async {
    await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('TIOSDualInput::set_p_BGRA', {'refId': refId, "p_BGRA": p_BGRA.refId});
  
  
  }
  
  Future<void> set_p_Y(NSValue/* void* */ p_Y) async {
    await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('TIOSDualInput::set_p_Y', {'refId': refId, "p_Y": p_Y.refId});
  
  
  }
  
  Future<void> set_p_CbCr(NSValue/* void* */ p_CbCr) async {
    await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('TIOSDualInput::set_p_CbCr', {'refId': refId, "p_CbCr": p_CbCr.refId});
  
  
  }
  
  Future<void> set_stride_BGRA(int stride_BGRA) async {
    await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('TIOSDualInput::set_stride_BGRA', {'refId': refId, "stride_BGRA": stride_BGRA});
  
  
  }
  
  Future<void> set_stride_Y(int stride_Y) async {
    await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('TIOSDualInput::set_stride_Y', {'refId': refId, "stride_Y": stride_Y});
  
  
  }
  
  Future<void> set_stride_CbCr(int stride_CbCr) async {
    await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('TIOSDualInput::set_stride_CbCr', {'refId': refId, "stride_CbCr": stride_CbCr});
  
  
  }
  
  Future<void> set_tex_handle(int tex_handle) async {
    await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('TIOSDualInput::set_tex_handle', {'refId': refId, "tex_handle": tex_handle});
  
  
  }
  
  Future<void> set_format(int format) async {
    await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('TIOSDualInput::set_format', {'refId': refId, "format": format});
  
  
  }
  
  //endregion

  //region methods
  
  //endregion
}

extension TIOSDualInput_Batch on List<TIOSDualInput> {
  //region getters
  Future<List<NSValue/* void* */>> get_p_BGRA_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod("TIOSDualInput::get_p_BGRA_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => NSValue/* void* */()..refId = result..tag = 'faceunity_nama_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  Future<List<NSValue/* void* */>> get_p_Y_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod("TIOSDualInput::get_p_Y_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => NSValue/* void* */()..refId = result..tag = 'faceunity_nama_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  Future<List<NSValue/* void* */>> get_p_CbCr_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod("TIOSDualInput::get_p_CbCr_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => NSValue/* void* */()..refId = result..tag = 'faceunity_nama_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  Future<List<int>> get_stride_BGRA_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod("TIOSDualInput::get_stride_BGRA_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<int>> get_stride_Y_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod("TIOSDualInput::get_stride_Y_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<int>> get_stride_CbCr_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod("TIOSDualInput::get_stride_CbCr_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<int>> get_tex_handle_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod("TIOSDualInput::get_tex_handle_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<int>> get_format_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod("TIOSDualInput::get_format_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  //endregion

  //region setters
  Future<void> set_p_BGRA_batch(List<NSValue/* void* */> p_BGRA) async {
    await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('TIOSDualInput::set_p_BGRA_batch', [for (int i = 0; i < this.length; i++) {'refId': this[i].refId, "p_BGRA": p_BGRA[i].refId}]);
  
  
  }
  
  Future<void> set_p_Y_batch(List<NSValue/* void* */> p_Y) async {
    await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('TIOSDualInput::set_p_Y_batch', [for (int i = 0; i < this.length; i++) {'refId': this[i].refId, "p_Y": p_Y[i].refId}]);
  
  
  }
  
  Future<void> set_p_CbCr_batch(List<NSValue/* void* */> p_CbCr) async {
    await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('TIOSDualInput::set_p_CbCr_batch', [for (int i = 0; i < this.length; i++) {'refId': this[i].refId, "p_CbCr": p_CbCr[i].refId}]);
  
  
  }
  
  Future<void> set_stride_BGRA_batch(List<int> stride_BGRA) async {
    await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('TIOSDualInput::set_stride_BGRA_batch', [for (int i = 0; i < this.length; i++) {'refId': this[i].refId, "stride_BGRA": stride_BGRA[i]}]);
  
  
  }
  
  Future<void> set_stride_Y_batch(List<int> stride_Y) async {
    await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('TIOSDualInput::set_stride_Y_batch', [for (int i = 0; i < this.length; i++) {'refId': this[i].refId, "stride_Y": stride_Y[i]}]);
  
  
  }
  
  Future<void> set_stride_CbCr_batch(List<int> stride_CbCr) async {
    await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('TIOSDualInput::set_stride_CbCr_batch', [for (int i = 0; i < this.length; i++) {'refId': this[i].refId, "stride_CbCr": stride_CbCr[i]}]);
  
  
  }
  
  Future<void> set_tex_handle_batch(List<int> tex_handle) async {
    await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('TIOSDualInput::set_tex_handle_batch', [for (int i = 0; i < this.length; i++) {'refId': this[i].refId, "tex_handle": tex_handle[i]}]);
  
  
  }
  
  Future<void> set_format_batch(List<int> format) async {
    await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('TIOSDualInput::set_format_batch', [for (int i = 0; i < this.length; i++) {'refId': this[i].refId, "format": format[i]}]);
  
  
  }
  
  //endregion

  //region methods
  
  //endregion
}