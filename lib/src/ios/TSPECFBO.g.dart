// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:faceunity_nama_fluttify/src/ios/ios.export.g.dart';
import 'package:faceunity_nama_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class TSPECFBO extends NSObject  {
  //region constants
  
  //endregion

  //region creators
  static Future<TSPECFBO> create__() async {
    final int refId = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('ObjectFactory::createTSPECFBO');
    final object = TSPECFBO()..refId = refId..tag = 'faceunity_nama_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<List<TSPECFBO>> create_batch__(int length) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('ObjectFactory::create_batchTSPECFBO', {'length': length});
  
    final List<TSPECFBO> typedResult = resultBatch.map((result) => TSPECFBO()..refId = result..tag = 'faceunity_nama_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region getters
  Future<int> get_fbo() async {
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod("TSPECFBO::get_fbo", {'refId': refId});
  
    return result;
  }
  
  Future<int> get_tex() async {
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod("TSPECFBO::get_tex", {'refId': refId});
  
    return result;
  }
  
  //endregion

  //region setters
  Future<void> set_fbo(int fbo) async {
    await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('TSPECFBO::set_fbo', {'refId': refId, "fbo": fbo});
  
  
  }
  
  Future<void> set_tex(int tex) async {
    await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('TSPECFBO::set_tex', {'refId': refId, "tex": tex});
  
  
  }
  
  //endregion

  //region methods
  
  //endregion
}

extension TSPECFBO_Batch on List<TSPECFBO> {
  //region getters
  Future<List<int>> get_fbo_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod("TSPECFBO::get_fbo_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<int>> get_tex_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod("TSPECFBO::get_tex_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  //endregion

  //region setters
  Future<void> set_fbo_batch(List<int> fbo) async {
    await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('TSPECFBO::set_fbo_batch', [for (int i = 0; i < this.length; i++) {'refId': this[i].refId, "fbo": fbo[i]}]);
  
  
  }
  
  Future<void> set_tex_batch(List<int> tex) async {
    await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('TSPECFBO::set_tex_batch', [for (int i = 0; i < this.length; i++) {'refId': this[i].refId, "tex": tex[i]}]);
  
  
  }
  
  //endregion

  //region methods
  
  //endregion
}