// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:nama_fluttify/src/ios/ios.export.g.dart';
import 'package:nama_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class FURenderer extends NSObject  {
  //region constants
  
  //endregion

  //region creators
  static Future<FURenderer> create__() async {
    final int refId = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('ObjectFactory::createFURenderer');
    final object = FURenderer()..refId = refId..tag = 'nama_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<List<FURenderer>> create_batch__(int length) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('ObjectFactory::create_batchFURenderer', {'length': length});
  
    final List<FURenderer> typedResult = resultBatch.map((result) => FURenderer()..refId = result..tag = 'nama_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  static Future<FURenderer> shareRenderer() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::shareRenderer([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('FURenderer::shareRenderer', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
      kNativeObjectPool.add(FURenderer()..refId = result..tag = 'nama_fluttify');
      return FURenderer()..refId = result..tag = 'nama_fluttify';
    }
  }
  
  Future<void> setBackCurrentContext() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer@$refId::setBackCurrentContext([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('FURenderer::setBackCurrentContext', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setUpCurrentContext() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer@$refId::setUpCurrentContext([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('FURenderer::setUpCurrentContext', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setInputCameraMatrixFlip_yrotate_mode(int flip_x, int flip_y, int rotate_mode) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer@$refId::setInputCameraMatrix([\'flip_x\':$flip_x, \'flip_y\':$flip_y, \'rotate_mode\':$rotate_mode])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('FURenderer::setInputCameraMatrixFlip_yrotate_mode', {"flip_x": flip_x, "flip_y": flip_y, "rotate_mode": rotate_mode, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setOutputResolutionH(int w, int h) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer@$refId::setOutputResolution([\'w\':$w, \'h\':$h])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('FURenderer::setOutputResolutionH', {"w": w, "h": h, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<void> onCameraChange() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::onCameraChange([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('FURenderer::onCameraChange', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<void> OnDeviceLost() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::OnDeviceLost([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('FURenderer::OnDeviceLost', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<int> itemWithContentsOfFile(String path) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::itemWithContentsOfFile([\'path\':$path])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('FURenderer::itemWithContentsOfFile', {"path": path});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<void> destroyItem(int item) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::destroyItem([\'item\':$item])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('FURenderer::destroyItem', {"item": item});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<void> destroyAllItems() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::destroyAllItems([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('FURenderer::destroyAllItems', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<int> releaseAIModel(FUAITYPE type) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::releaseAIModel([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('FURenderer::releaseAIModel', {"type": type.index});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<int> isAIModelLoaded(FUAITYPE type) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::isAIModelLoaded([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('FURenderer::isAIModelLoaded', {"type": type.index});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<int> itemSetParamWithNamevalue(int item, String name, NSObject value) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::itemSetParam([\'item\':$item, \'name\':$name])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('FURenderer::itemSetParamWithNamevalue', {"item": item, "name": name, "value": value.refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<double> getDoubleParamFromItemWithName(int item, String name) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::getDoubleParamFromItem([\'item\':$item, \'name\':$name])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('FURenderer::getDoubleParamFromItemWithName', {"item": item, "name": name});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> getStringParamFromItemWithName(int item, String name) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::getStringParamFromItem([\'item\':$item, \'name\':$name])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('FURenderer::getStringParamFromItemWithName', {"item": item, "name": name});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<int> isTracking() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::isTracking([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('FURenderer::isTracking', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<int> setMaxFaces(int maxFaces) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::setMaxFaces([\'maxFaces\':$maxFaces])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('FURenderer::setMaxFaces', {"maxFaces": maxFaces});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<int> getFaceIdentifier(int faceId) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::getFaceIdentifier([\'faceId\':$faceId])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('FURenderer::getFaceIdentifier', {"faceId": faceId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<int> unbindAllItems(int item) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::unbindAllItems([\'item\':$item])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('FURenderer::unbindAllItems', {"item": item});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> getVersion() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::getVersion([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('FURenderer::getVersion', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<void> setExpressionCalibration(int expressionCalibration) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::setExpressionCalibration([\'expressionCalibration\':$expressionCalibration])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('FURenderer::setExpressionCalibration', {"expressionCalibration": expressionCalibration});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<void> setFocalLengthScale(double scale) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::setFocalLengthScale([\'scale\':$scale])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('FURenderer::setFocalLengthScale', {"scale": scale});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<void> setDefaultRotationMode(int mode) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::setDefaultRotationMode([\'mode\':$mode])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('FURenderer::setDefaultRotationMode', {"mode": mode});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<void> setDeviceOrientation(int orientation) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::setDeviceOrientation([\'orientation\':$orientation])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('FURenderer::setDeviceOrientation', {"orientation": orientation});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<int> getCurrentRotationMode() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::getCurrentRotationMode([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('FURenderer::getCurrentRotationMode', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<int> setMultiSamples(int samples) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::setMultiSamples([\'samples\':$samples])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('FURenderer::setMultiSamples', {"samples": samples});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<void> setAsyncTrackFaceEnable(int enable) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::setAsyncTrackFaceEnable([\'enable\':$enable])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('FURenderer::setAsyncTrackFaceEnable', {"enable": enable});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<void> setTongueTrackingEnable(int enable) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::setTongueTrackingEnable([\'enable\':$enable])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('FURenderer::setTongueTrackingEnable', {"enable": enable});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<void> namaLibDestroy() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::namaLibDestroy([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('FURenderer::namaLibDestroy', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  //endregion
}

extension FURenderer_Batch on List<FURenderer> {
  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  Future<List<FURenderer>> shareRenderer_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('FURenderer::shareRenderer_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => FURenderer()..refId = result..tag = 'nama_fluttify').toList();
      kNativeObjectPool.addAll(typedResult);
      return typedResult;
    }
  }
  
  Future<void> setBackCurrentContext_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('FURenderer::setBackCurrentContext_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setUpCurrentContext_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('FURenderer::setUpCurrentContext_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setInputCameraMatrixFlip_yrotate_mode_batch(List<int> flip_x, List<int> flip_y, List<int> rotate_mode) async {
    if (flip_x.length != flip_y.length || flip_y.length != rotate_mode.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('FURenderer::setInputCameraMatrixFlip_yrotate_mode_batch', [for (int i = 0; i < this.length; i++) {"flip_x": flip_x[i], "flip_y": flip_y[i], "rotate_mode": rotate_mode[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setOutputResolutionH_batch(List<int> w, List<int> h) async {
    if (w.length != h.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('FURenderer::setOutputResolutionH_batch', [for (int i = 0; i < this.length; i++) {"w": w[i], "h": h[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> onCameraChange_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('FURenderer::onCameraChange_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> OnDeviceLost_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('FURenderer::OnDeviceLost_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<List<int>> itemWithContentsOfFile_batch(List<String> path) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('FURenderer::itemWithContentsOfFile_batch', [for (int i = 0; i < this.length; i++) {"path": path[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> destroyItem_batch(List<int> item) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('FURenderer::destroyItem_batch', [for (int i = 0; i < this.length; i++) {"item": item[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> destroyAllItems_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('FURenderer::destroyAllItems_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<List<int>> releaseAIModel_batch(List<FUAITYPE> type) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('FURenderer::releaseAIModel_batch', [for (int i = 0; i < this.length; i++) {"type": type[i].index, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<List<int>> isAIModelLoaded_batch(List<FUAITYPE> type) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('FURenderer::isAIModelLoaded_batch', [for (int i = 0; i < this.length; i++) {"type": type[i].index, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<List<int>> itemSetParamWithNamevalue_batch(List<int> item, List<String> name, List<NSObject> value) async {
    if (item.length != name.length || name.length != value.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('FURenderer::itemSetParamWithNamevalue_batch', [for (int i = 0; i < this.length; i++) {"item": item[i], "name": name[i], "value": value[i].refId, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<List<double>> getDoubleParamFromItemWithName_batch(List<int> item, List<String> name) async {
    if (item.length != name.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('FURenderer::getDoubleParamFromItemWithName_batch', [for (int i = 0; i < this.length; i++) {"item": item[i], "name": name[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<List<String>> getStringParamFromItemWithName_batch(List<int> item, List<String> name) async {
    if (item.length != name.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('FURenderer::getStringParamFromItemWithName_batch', [for (int i = 0; i < this.length; i++) {"item": item[i], "name": name[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<List<int>> isTracking_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('FURenderer::isTracking_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<List<int>> setMaxFaces_batch(List<int> maxFaces) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('FURenderer::setMaxFaces_batch', [for (int i = 0; i < this.length; i++) {"maxFaces": maxFaces[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<List<int>> getFaceIdentifier_batch(List<int> faceId) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('FURenderer::getFaceIdentifier_batch', [for (int i = 0; i < this.length; i++) {"faceId": faceId[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<List<int>> unbindAllItems_batch(List<int> item) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('FURenderer::unbindAllItems_batch', [for (int i = 0; i < this.length; i++) {"item": item[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<List<String>> getVersion_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('FURenderer::getVersion_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setExpressionCalibration_batch(List<int> expressionCalibration) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('FURenderer::setExpressionCalibration_batch', [for (int i = 0; i < this.length; i++) {"expressionCalibration": expressionCalibration[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setFocalLengthScale_batch(List<double> scale) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('FURenderer::setFocalLengthScale_batch', [for (int i = 0; i < this.length; i++) {"scale": scale[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setDefaultRotationMode_batch(List<int> mode) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('FURenderer::setDefaultRotationMode_batch', [for (int i = 0; i < this.length; i++) {"mode": mode[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setDeviceOrientation_batch(List<int> orientation) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('FURenderer::setDeviceOrientation_batch', [for (int i = 0; i < this.length; i++) {"orientation": orientation[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<List<int>> getCurrentRotationMode_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('FURenderer::getCurrentRotationMode_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<List<int>> setMultiSamples_batch(List<int> samples) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('FURenderer::setMultiSamples_batch', [for (int i = 0; i < this.length; i++) {"samples": samples[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setAsyncTrackFaceEnable_batch(List<int> enable) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('FURenderer::setAsyncTrackFaceEnable_batch', [for (int i = 0; i < this.length; i++) {"enable": enable[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setTongueTrackingEnable_batch(List<int> enable) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('FURenderer::setTongueTrackingEnable_batch', [for (int i = 0; i < this.length; i++) {"enable": enable[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> namaLibDestroy_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/nama_fluttify').invokeMethod('FURenderer::namaLibDestroy_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  //endregion
}