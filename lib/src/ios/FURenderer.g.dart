// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:faceunity_nama_fluttify/src/ios/ios.export.g.dart';
import 'package:faceunity_nama_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class FURenderer extends NSObject  {
  //region constants
  
  //endregion

  //region creators
  static Future<FURenderer> create__() async {
    final int refId = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('ObjectFactory::createFURenderer');
    final object = FURenderer()..refId = refId..tag = 'faceunity_nama_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<List<FURenderer>> create_batch__(int length) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('ObjectFactory::create_batchFURenderer', {'length': length});
  
    final List<FURenderer> typedResult = resultBatch.map((result) => FURenderer()..refId = result..tag = 'faceunity_nama_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  static Future<FURenderer> shareRenderer() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::shareRenderer([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::shareRenderer', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
      kNativeObjectPool.add(FURenderer()..refId = result..tag = 'faceunity_nama_fluttify');
      return FURenderer()..refId = result..tag = 'faceunity_nama_fluttify';
    }
  }
  
  Future<void> setBackCurrentContext() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer@$refId::setBackCurrentContext([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::setBackCurrentContext', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setUpCurrentContext() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer@$refId::setUpCurrentContext([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::setUpCurrentContext', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<int> setupWithDataDataSizeardataauthPackageauthSize(NSValue/* void* */ data, int dataSize, NSValue/* void* */ ardata, NSValue/* void* */ package, int size) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer@$refId::setupWithData([\'dataSize\':$dataSize, \'size\':$size])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::setupWithDataDataSizeardataauthPackageauthSize', {"data": data.refId, "dataSize": dataSize, "ardata": ardata.refId, "package": package.refId, "size": size, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<int> setupWithDataDataSizeardataauthPackageauthSizeshouldCreateContext(NSValue/* void* */ data, int dataSize, NSValue/* void* */ ardata, NSValue/* void* */ package, int size, bool shouldCreate) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer@$refId::setupWithData([\'dataSize\':$dataSize, \'size\':$size, \'shouldCreate\':$shouldCreate])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::setupWithDataDataSizeardataauthPackageauthSizeshouldCreateContext', {"data": data.refId, "dataSize": dataSize, "ardata": ardata.refId, "package": package.refId, "size": size, "shouldCreate": shouldCreate, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<int> setupWithDataPathAuthPackageauthSizeshouldCreateContext(String v3path, NSValue/* void* */ package, int size, bool shouldCreate) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer@$refId::setupWithDataPath([\'v3path\':$v3path, \'size\':$size, \'shouldCreate\':$shouldCreate])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::setupWithDataPathAuthPackageauthSizeshouldCreateContext', {"v3path": v3path, "package": package.refId, "size": size, "shouldCreate": shouldCreate, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<NSData> setupLocalWithV3PathOffLinePathauthPackageauthSizeshouldCreateContext(String v3path, String offLinePath, NSValue/* void* */ package, int size, bool shouldCreate) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer@$refId::setupLocalWithV3Path([\'v3path\':$v3path, \'offLinePath\':$offLinePath, \'size\':$size, \'shouldCreate\':$shouldCreate])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::setupLocalWithV3PathOffLinePathauthPackageauthSizeshouldCreateContext', {"v3path": v3path, "offLinePath": offLinePath, "package": package.refId, "size": size, "shouldCreate": shouldCreate, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
      kNativeObjectPool.add(NSData()..refId = result..tag = 'faceunity_nama_fluttify');
      return NSData()..refId = result..tag = 'faceunity_nama_fluttify';
    }
  }
  
  Future<int> renderItemsInFormatoutPtroutFormatwidthheightframeIditemsitemCountflipx(NSValue/* void* */ inPtr, FUFormat inFormat, NSValue/* void* */ outPtr, FUFormat outFormat, int width, int height, int frameid, NSValue/* int* */ items, int itemCount, bool flip) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer@$refId::renderItems([\'width\':$width, \'height\':$height, \'frameid\':$frameid, \'itemCount\':$itemCount, \'flip\':$flip])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::renderItemsInFormatoutPtroutFormatwidthheightframeIditemsitemCountflipx', {"inPtr": inPtr.refId, "inFormat": inFormat.index, "outPtr": outPtr.refId, "outFormat": outFormat.index, "width": width, "height": height, "frameid": frameid, "items": items.refId, "itemCount": itemCount, "flip": flip, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<int> renderBundlesInFormatoutPtroutFormatwidthheightframeIditemsitemCount(NSValue/* void* */ inPtr, FUFormat inFormat, NSValue/* void* */ outPtr, FUFormat outFormat, int width, int height, int frameid, NSValue/* int* */ items, int itemCount) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer@$refId::renderBundles([\'width\':$width, \'height\':$height, \'frameid\':$frameid, \'itemCount\':$itemCount])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::renderBundlesInFormatoutPtroutFormatwidthheightframeIditemsitemCount', {"inPtr": inPtr.refId, "inFormat": inFormat.index, "outPtr": outPtr.refId, "outFormat": outFormat.index, "width": width, "height": height, "frameid": frameid, "items": items.refId, "itemCount": itemCount, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<int> renderBundlesSplitViewInFormatoutPtroutFormatwidthheightframeIditemsitemCountsplitViewInfoPtr(NSValue/* void* */ inPtr, FUFormat inFormat, NSValue/* void* */ outPtr, FUFormat outFormat, int width, int height, int frameid, NSValue/* int* */ items, int itemCount, List<TSplitViewInfo> splitViewInfoPtr) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer@$refId::renderBundlesSplitView([\'width\':$width, \'height\':$height, \'frameid\':$frameid, \'itemCount\':$itemCount])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::renderBundlesSplitViewInFormatoutPtroutFormatwidthheightframeIditemsitemCountsplitViewInfoPtr', {"inPtr": inPtr.refId, "inFormat": inFormat.index, "outPtr": outPtr.refId, "outFormat": outFormat.index, "width": width, "height": height, "frameid": frameid, "items": items.refId, "itemCount": itemCount, "splitViewInfoPtr": splitViewInfoPtr.map((it) => it.refId).toList(), "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setInputCameraMatrixFlip_yrotate_mode(int flip_x, int flip_y, int rotate_mode) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer@$refId::setInputCameraMatrix([\'flip_x\':$flip_x, \'flip_y\':$flip_y, \'rotate_mode\':$rotate_mode])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::setInputCameraMatrixFlip_yrotate_mode', {"flip_x": flip_x, "flip_y": flip_y, "rotate_mode": rotate_mode, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setOutputResolutionH(int w, int h) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer@$refId::setOutputResolution([\'w\':$w, \'h\':$h])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::setOutputResolutionH', {"w": w, "h": h, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<int> rotateImageInPtrinFormatwidthheightrotationModeflipXflipY(FURotatedImage outImage, NSValue/* void* */ inPtr, FUFormat inFormat, int width, int height, FURotationMode rotationMode, bool flipX, bool flipY) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer@$refId::rotateImage([\'width\':$width, \'height\':$height, \'flipX\':$flipX, \'flipY\':$flipY])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::rotateImageInPtrinFormatwidthheightrotationModeflipXflipY', {"outImage": outImage.refId, "inPtr": inPtr.refId, "inFormat": inFormat.index, "width": width, "height": height, "rotationMode": rotationMode.index, "flipX": flipX, "flipY": flipY, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<void> onCameraChange() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::onCameraChange([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::onCameraChange', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<void> OnDeviceLost() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::OnDeviceLost([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::OnDeviceLost', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<int> createItemFromPackageSize(NSValue/* void* */ data, int size) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::createItemFromPackage([\'size\':$size])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::createItemFromPackageSize', {"data": data.refId, "size": size});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<int> itemWithContentsOfFile(String path) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::itemWithContentsOfFile([\'path\':$path])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::itemWithContentsOfFile', {"path": path});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<void> destroyItem(int item) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::destroyItem([\'item\':$item])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::destroyItem', {"item": item});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<void> destroyAllItems() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::destroyAllItems([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::destroyAllItems', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<int> loadAIModelFromPackageSizeaitype(NSValue/* void* */ data, int size, FUAITYPE type) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::loadAIModelFromPackage([\'size\':$size])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::loadAIModelFromPackageSizeaitype', {"data": data.refId, "size": size, "type": type.index});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<int> releaseAIModel(FUAITYPE type) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::releaseAIModel([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::releaseAIModel', {"type": type.index});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<int> isAIModelLoaded(FUAITYPE type) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::isAIModelLoaded([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::isAIModelLoaded', {"type": type.index});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<int> itemSetParamWithNamevalue(int item, String name, NSObject value) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::itemSetParam([\'item\':$item, \'name\':$name])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::itemSetParamWithNamevalue', {"item": item, "name": name, "value": value.refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<int> itemSetParamdvWithNamevaluelength(int item, String name, NSValue/* double* */ value, int length) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::itemSetParamdv([\'item\':$item, \'name\':$name, \'length\':$length])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::itemSetParamdvWithNamevaluelength', {"item": item, "name": name, "value": value.refId, "length": length});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<int> itemGetParamdvWithNamebufferlength(int item, String name, NSValue/* double* */ buffer, int length) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::itemGetParamdv([\'item\':$item, \'name\':$name, \'length\':$length])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::itemGetParamdvWithNamebufferlength', {"item": item, "name": name, "buffer": buffer.refId, "length": length});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<int> itemGetParamfvWithNamebufferlength(int item, String name, NSValue/* float* */ buffer, int length) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::itemGetParamfv([\'item\':$item, \'name\':$name, \'length\':$length])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::itemGetParamfvWithNamebufferlength', {"item": item, "name": name, "buffer": buffer.refId, "length": length});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<double> getDoubleParamFromItemWithName(int item, String name) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::getDoubleParamFromItem([\'item\':$item, \'name\':$name])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::getDoubleParamFromItemWithName', {"item": item, "name": name});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> getStringParamFromItemWithName(int item, String name) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::getStringParamFromItem([\'item\':$item, \'name\':$name])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::getStringParamFromItemWithName', {"item": item, "name": name});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<int> itemSetParamu8vWithNamebuffersize(int item, String name, NSValue/* void* */ buffer, int size) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::itemSetParamu8v([\'item\':$item, \'name\':$name, \'size\':$size])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::itemSetParamu8vWithNamebuffersize', {"item": item, "name": name, "buffer": buffer.refId, "size": size});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<int> itemGetParamu8vWithNamebuffersize(int item, String name, NSValue/* void* */ buffer, int size) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::itemGetParamu8v([\'item\':$item, \'name\':$name, \'size\':$size])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::itemGetParamu8vWithNamebuffersize', {"item": item, "name": name, "buffer": buffer.refId, "size": size});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<int> isTracking() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::isTracking([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::isTracking', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<int> setMaxFaces(int maxFaces) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::setMaxFaces([\'maxFaces\':$maxFaces])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::setMaxFaces', {"maxFaces": maxFaces});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<int> trackFaceInputDatawidthheight(int inputFormat, NSValue/* void* */ inputData, int width, int height) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::trackFace([\'inputFormat\':$inputFormat, \'width\':$width, \'height\':$height])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::trackFaceInputDatawidthheight', {"inputFormat": inputFormat, "inputData": inputData.refId, "width": width, "height": height});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<int> trackFaceWithTongueInputDatawidthheight(int inputFormat, NSValue/* void* */ inputData, int width, int height) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::trackFaceWithTongue([\'inputFormat\':$inputFormat, \'width\':$width, \'height\':$height])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::trackFaceWithTongueInputDatawidthheight', {"inputFormat": inputFormat, "inputData": inputData.refId, "width": width, "height": height});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<int> getFaceInfoNamepretnumber(int faceId, String name, NSValue/* float* */ pret, int number) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::getFaceInfo([\'faceId\':$faceId, \'name\':$name, \'number\':$number])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::getFaceInfoNamepretnumber', {"faceId": faceId, "name": name, "pret": pret.refId, "number": number});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<int> getFaceIdentifier(int faceId) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::getFaceIdentifier([\'faceId\':$faceId])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::getFaceIdentifier', {"faceId": faceId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<int> avatarBindItemsItemsitemsCountcontractscontractsCount(int avatarItem, NSValue/* int* */ items, int itemsCount, NSValue/* int* */ contracts, int contractsCount) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::avatarBindItems([\'avatarItem\':$avatarItem, \'itemsCount\':$itemsCount, \'contractsCount\':$contractsCount])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::avatarBindItemsItemsitemsCountcontractscontractsCount', {"avatarItem": avatarItem, "items": items.refId, "itemsCount": itemsCount, "contracts": contracts.refId, "contractsCount": contractsCount});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<int> avatarUnbindItemsItemsitemsCount(int avatarItem, NSValue/* int* */ items, int itemsCount) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::avatarUnbindItems([\'avatarItem\':$avatarItem, \'itemsCount\':$itemsCount])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::avatarUnbindItemsItemsitemsCount', {"avatarItem": avatarItem, "items": items.refId, "itemsCount": itemsCount});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<int> bindItemsItemsitemsCount(int item, NSValue/* int* */ items, int itemsCount) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::bindItems([\'item\':$item, \'itemsCount\':$itemsCount])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::bindItemsItemsitemsCount', {"item": item, "items": items.refId, "itemsCount": itemsCount});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<int> unBindItemsItemsitemsCount(int item, NSValue/* int* */ items, int itemsCount) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::unBindItems([\'item\':$item, \'itemsCount\':$itemsCount])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::unBindItemsItemsitemsCount', {"item": item, "items": items.refId, "itemsCount": itemsCount});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<int> unbindAllItems(int item) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::unbindAllItems([\'item\':$item])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::unbindAllItems', {"item": item});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> getVersion() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::getVersion([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::getVersion', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<void> setExpressionCalibration(int expressionCalibration) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::setExpressionCalibration([\'expressionCalibration\':$expressionCalibration])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::setExpressionCalibration', {"expressionCalibration": expressionCalibration});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<void> setFocalLengthScale(double scale) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::setFocalLengthScale([\'scale\':$scale])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::setFocalLengthScale', {"scale": scale});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<void> setDefaultRotationMode(int mode) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::setDefaultRotationMode([\'mode\':$mode])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::setDefaultRotationMode', {"mode": mode});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<void> setDeviceOrientation(int orientation) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::setDeviceOrientation([\'orientation\':$orientation])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::setDeviceOrientation', {"orientation": orientation});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<int> getCurrentRotationMode() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::getCurrentRotationMode([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::getCurrentRotationMode', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<int> setMultiSamples(int samples) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::setMultiSamples([\'samples\':$samples])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::setMultiSamples', {"samples": samples});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<void> setAsyncTrackFaceEnable(int enable) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::setAsyncTrackFaceEnable([\'enable\':$enable])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::setAsyncTrackFaceEnable', {"enable": enable});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<void> setTongueTrackingEnable(int enable) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::setTongueTrackingEnable([\'enable\':$enable])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::setTongueTrackingEnable', {"enable": enable});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<int> loadTongueModelSize(NSValue/* void* */ model, int size) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::loadTongueModel([\'size\':$size])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::loadTongueModelSize', {"model": model.refId, "size": size});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<NSValue/* void* */> create3DBodyTrackerSize(NSValue/* void* */ model, int size) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::create3DBodyTracker([\'size\':$size])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::create3DBodyTrackerSize', {"model": model.refId, "size": size});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
      kNativeObjectPool.add(NSValue/* void* */()..refId = result..tag = 'faceunity_nama_fluttify');
      return NSValue/* void* */()..refId = result..tag = 'faceunity_nama_fluttify';
    }
  }
  
  static Future<void> destroy3DBodyTracker(NSValue/* void* */ modelPtr) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::destroy3DBodyTracker([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::destroy3DBodyTracker', {"modelPtr": modelPtr.refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<int> run3DBodyTrackerHumanHandleinPtrinFormatwhrotationMode(NSValue/* void* */ modelPtr, int humanHandle, NSValue/* void* */ inPtr, FUFormat inFormat, int w, int h, int rotationMode) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::run3DBodyTracker([\'humanHandle\':$humanHandle, \'w\':$w, \'h\':$h, \'rotationMode\':$rotationMode])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::run3DBodyTrackerHumanHandleinPtrinFormatwhrotationMode', {"modelPtr": modelPtr.refId, "humanHandle": humanHandle, "inPtr": inPtr.refId, "inFormat": inFormat.index, "w": w, "h": h, "rotationMode": rotationMode});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<NSValue/* void* */> faceCaptureCreateSize(NSValue/* void* */ data, int size) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::faceCaptureCreate([\'size\':$size])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::faceCaptureCreateSize', {"data": data.refId, "size": size});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
      kNativeObjectPool.add(NSValue/* void* */()..refId = result..tag = 'faceunity_nama_fluttify');
      return NSValue/* void* */()..refId = result..tag = 'faceunity_nama_fluttify';
    }
  }
  
  static Future<void> faceCaptureDestory(NSValue/* void* */ model) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::faceCaptureDestory([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::faceCaptureDestory', {"model": model.refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<int> faceCaptureReset(NSValue/* void* */ model) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::faceCaptureReset([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::faceCaptureReset', {"model": model.refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<int> faceCaptureProcessFrameInPtrinFormatwhrotationMode(NSValue/* void* */ model, NSValue/* void* */ inPtr, FUFormat inFormat, int w, int h, int rotationMode) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::faceCaptureProcessFrame([\'w\':$w, \'h\':$h, \'rotationMode\':$rotationMode])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::faceCaptureProcessFrameInPtrinFormatwhrotationMode', {"model": model.refId, "inPtr": inPtr.refId, "inFormat": inFormat.index, "w": w, "h": h, "rotationMode": rotationMode});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<int> faceCaptureGetResultLandmarksFaceNbufferlength(NSValue/* void* */ model, int faceN, NSValue/* float* */ buffer, int length) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::faceCaptureGetResultLandmarks([\'faceN\':$faceN, \'length\':$length])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::faceCaptureGetResultLandmarksFaceNbufferlength', {"model": model.refId, "faceN": faceN, "buffer": buffer.refId, "length": length});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<int> faceCaptureGetResultIdentityFaceNbufferlength(NSValue/* void* */ model, int faceN, NSValue/* float* */ buffer, int length) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::faceCaptureGetResultIdentity([\'faceN\':$faceN, \'length\':$length])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::faceCaptureGetResultIdentityFaceNbufferlength', {"model": model.refId, "faceN": faceN, "buffer": buffer.refId, "length": length});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<int> faceCaptureGetResultExpressionFaceNbufferlength(NSValue/* void* */ model, int faceN, NSValue/* float* */ buffer, int length) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::faceCaptureGetResultExpression([\'faceN\':$faceN, \'length\':$length])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::faceCaptureGetResultExpressionFaceNbufferlength', {"model": model.refId, "faceN": faceN, "buffer": buffer.refId, "length": length});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<int> faceCaptureGetResultRotationFaceNbufferlength(NSValue/* void* */ model, int faceN, NSValue/* float* */ buffer, int length) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::faceCaptureGetResultRotation([\'faceN\':$faceN, \'length\':$length])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::faceCaptureGetResultRotationFaceNbufferlength', {"model": model.refId, "faceN": faceN, "buffer": buffer.refId, "length": length});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<int> faceCaptureGetResultTranslationFaceNbufferlength(NSValue/* void* */ model, int faceN, NSValue/* float* */ buffer, int length) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::faceCaptureGetResultTranslation([\'faceN\':$faceN, \'length\':$length])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::faceCaptureGetResultTranslationFaceNbufferlength', {"model": model.refId, "faceN": faceN, "buffer": buffer.refId, "length": length});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<int> faceCapturGetResultTongueExpFaceNbufferlength(NSValue/* void* */ model, int faceN, NSValue/* float* */ buffer, int length) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::faceCapturGetResultTongueExp([\'faceN\':$faceN, \'length\':$length])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::faceCapturGetResultTongueExpFaceNbufferlength', {"model": model.refId, "faceN": faceN, "buffer": buffer.refId, "length": length});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<int> faceCaptureGetResultIsFaceFaceN(NSValue/* void* */ model, int faceN) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::faceCaptureGetResultIsFace([\'faceN\':$faceN])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::faceCaptureGetResultIsFaceFaceN', {"model": model.refId, "faceN": faceN});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<int> faceCaptureGetResultFaceIDFaceN(NSValue/* void* */ model, int faceN) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::faceCaptureGetResultFaceID([\'faceN\':$faceN])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::faceCaptureGetResultFaceIDFaceN', {"model": model.refId, "faceN": faceN});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<double> faceCaptureGetResultTongueScoreFaceN(NSValue/* void* */ model, int faceN) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::faceCaptureGetResultTongueScore([\'faceN\':$faceN])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::faceCaptureGetResultTongueScoreFaceN', {"model": model.refId, "faceN": faceN});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<int> faceCaptureGetResultTongueClassFaceN(NSValue/* void* */ model, int faceN) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::faceCaptureGetResultTongueClass([\'faceN\':$faceN])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::faceCaptureGetResultTongueClassFaceN', {"model": model.refId, "faceN": faceN});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<double> faceCaptureGetResultFocalLength(NSValue/* void* */ model) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::faceCaptureGetResultFocalLength([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::faceCaptureGetResultFocalLength', {"model": model.refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<int> faceCaptureGetResultFaceNum(NSValue/* void* */ model) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::faceCaptureGetResultFaceNum([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::faceCaptureGetResultFaceNum', {"model": model.refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<void> namaLibDestroy() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: FURenderer::namaLibDestroy([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::namaLibDestroy', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  //endregion
}

extension FURenderer_Batch on List<FURenderer> {
  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  Future<List<FURenderer>> shareRenderer_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::shareRenderer_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => FURenderer()..refId = result..tag = 'faceunity_nama_fluttify').toList();
      kNativeObjectPool.addAll(typedResult);
      return typedResult;
    }
  }
  
  Future<void> setBackCurrentContext_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::setBackCurrentContext_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setUpCurrentContext_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::setUpCurrentContext_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<List<int>> setupWithDataDataSizeardataauthPackageauthSize_batch(List<NSValue/* void* */> data, List<int> dataSize, List<NSValue/* void* */> ardata, List<NSValue/* void* */> package, List<int> size) async {
    if (data.length != dataSize.length || dataSize.length != ardata.length || ardata.length != package.length || package.length != size.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::setupWithDataDataSizeardataauthPackageauthSize_batch', [for (int i = 0; i < this.length; i++) {"data": data[i].refId, "dataSize": dataSize[i], "ardata": ardata[i].refId, "package": package[i].refId, "size": size[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<List<int>> setupWithDataDataSizeardataauthPackageauthSizeshouldCreateContext_batch(List<NSValue/* void* */> data, List<int> dataSize, List<NSValue/* void* */> ardata, List<NSValue/* void* */> package, List<int> size, List<bool> shouldCreate) async {
    if (data.length != dataSize.length || dataSize.length != ardata.length || ardata.length != package.length || package.length != size.length || size.length != shouldCreate.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::setupWithDataDataSizeardataauthPackageauthSizeshouldCreateContext_batch', [for (int i = 0; i < this.length; i++) {"data": data[i].refId, "dataSize": dataSize[i], "ardata": ardata[i].refId, "package": package[i].refId, "size": size[i], "shouldCreate": shouldCreate[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<List<int>> setupWithDataPathAuthPackageauthSizeshouldCreateContext_batch(List<String> v3path, List<NSValue/* void* */> package, List<int> size, List<bool> shouldCreate) async {
    if (v3path.length != package.length || package.length != size.length || size.length != shouldCreate.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::setupWithDataPathAuthPackageauthSizeshouldCreateContext_batch', [for (int i = 0; i < this.length; i++) {"v3path": v3path[i], "package": package[i].refId, "size": size[i], "shouldCreate": shouldCreate[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<List<NSData>> setupLocalWithV3PathOffLinePathauthPackageauthSizeshouldCreateContext_batch(List<String> v3path, List<String> offLinePath, List<NSValue/* void* */> package, List<int> size, List<bool> shouldCreate) async {
    if (v3path.length != offLinePath.length || offLinePath.length != package.length || package.length != size.length || size.length != shouldCreate.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::setupLocalWithV3PathOffLinePathauthPackageauthSizeshouldCreateContext_batch', [for (int i = 0; i < this.length; i++) {"v3path": v3path[i], "offLinePath": offLinePath[i], "package": package[i].refId, "size": size[i], "shouldCreate": shouldCreate[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => NSData()..refId = result..tag = 'faceunity_nama_fluttify').toList();
      kNativeObjectPool.addAll(typedResult);
      return typedResult;
    }
  }
  
  Future<List<int>> renderItemsInFormatoutPtroutFormatwidthheightframeIditemsitemCountflipx_batch(List<NSValue/* void* */> inPtr, List<FUFormat> inFormat, List<NSValue/* void* */> outPtr, List<FUFormat> outFormat, List<int> width, List<int> height, List<int> frameid, List<NSValue/* int* */> items, List<int> itemCount, List<bool> flip) async {
    if (inPtr.length != inFormat.length || inFormat.length != outPtr.length || outPtr.length != outFormat.length || outFormat.length != width.length || width.length != height.length || height.length != frameid.length || frameid.length != items.length || items.length != itemCount.length || itemCount.length != flip.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::renderItemsInFormatoutPtroutFormatwidthheightframeIditemsitemCountflipx_batch', [for (int i = 0; i < this.length; i++) {"inPtr": inPtr[i].refId, "inFormat": inFormat[i].index, "outPtr": outPtr[i].refId, "outFormat": outFormat[i].index, "width": width[i], "height": height[i], "frameid": frameid[i], "items": items[i].refId, "itemCount": itemCount[i], "flip": flip[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<List<int>> renderBundlesInFormatoutPtroutFormatwidthheightframeIditemsitemCount_batch(List<NSValue/* void* */> inPtr, List<FUFormat> inFormat, List<NSValue/* void* */> outPtr, List<FUFormat> outFormat, List<int> width, List<int> height, List<int> frameid, List<NSValue/* int* */> items, List<int> itemCount) async {
    if (inPtr.length != inFormat.length || inFormat.length != outPtr.length || outPtr.length != outFormat.length || outFormat.length != width.length || width.length != height.length || height.length != frameid.length || frameid.length != items.length || items.length != itemCount.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::renderBundlesInFormatoutPtroutFormatwidthheightframeIditemsitemCount_batch', [for (int i = 0; i < this.length; i++) {"inPtr": inPtr[i].refId, "inFormat": inFormat[i].index, "outPtr": outPtr[i].refId, "outFormat": outFormat[i].index, "width": width[i], "height": height[i], "frameid": frameid[i], "items": items[i].refId, "itemCount": itemCount[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<List<int>> renderBundlesSplitViewInFormatoutPtroutFormatwidthheightframeIditemsitemCountsplitViewInfoPtr_batch(List<NSValue/* void* */> inPtr, List<FUFormat> inFormat, List<NSValue/* void* */> outPtr, List<FUFormat> outFormat, List<int> width, List<int> height, List<int> frameid, List<NSValue/* int* */> items, List<int> itemCount, List<List<TSplitViewInfo>> splitViewInfoPtr) async {
    if (inPtr.length != inFormat.length || inFormat.length != outPtr.length || outPtr.length != outFormat.length || outFormat.length != width.length || width.length != height.length || height.length != frameid.length || frameid.length != items.length || items.length != itemCount.length || itemCount.length != splitViewInfoPtr.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::renderBundlesSplitViewInFormatoutPtroutFormatwidthheightframeIditemsitemCountsplitViewInfoPtr_batch', [for (int i = 0; i < this.length; i++) {"inPtr": inPtr[i].refId, "inFormat": inFormat[i].index, "outPtr": outPtr[i].refId, "outFormat": outFormat[i].index, "width": width[i], "height": height[i], "frameid": frameid[i], "items": items[i].refId, "itemCount": itemCount[i], "splitViewInfoPtr": splitViewInfoPtr[i].map((it) => it.refId).toList(), "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setInputCameraMatrixFlip_yrotate_mode_batch(List<int> flip_x, List<int> flip_y, List<int> rotate_mode) async {
    if (flip_x.length != flip_y.length || flip_y.length != rotate_mode.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::setInputCameraMatrixFlip_yrotate_mode_batch', [for (int i = 0; i < this.length; i++) {"flip_x": flip_x[i], "flip_y": flip_y[i], "rotate_mode": rotate_mode[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setOutputResolutionH_batch(List<int> w, List<int> h) async {
    if (w.length != h.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::setOutputResolutionH_batch', [for (int i = 0; i < this.length; i++) {"w": w[i], "h": h[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<List<int>> rotateImageInPtrinFormatwidthheightrotationModeflipXflipY_batch(List<FURotatedImage> outImage, List<NSValue/* void* */> inPtr, List<FUFormat> inFormat, List<int> width, List<int> height, List<FURotationMode> rotationMode, List<bool> flipX, List<bool> flipY) async {
    if (outImage.length != inPtr.length || inPtr.length != inFormat.length || inFormat.length != width.length || width.length != height.length || height.length != rotationMode.length || rotationMode.length != flipX.length || flipX.length != flipY.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::rotateImageInPtrinFormatwidthheightrotationModeflipXflipY_batch', [for (int i = 0; i < this.length; i++) {"outImage": outImage[i].refId, "inPtr": inPtr[i].refId, "inFormat": inFormat[i].index, "width": width[i], "height": height[i], "rotationMode": rotationMode[i].index, "flipX": flipX[i], "flipY": flipY[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> onCameraChange_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::onCameraChange_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> OnDeviceLost_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::OnDeviceLost_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<List<int>> createItemFromPackageSize_batch(List<NSValue/* void* */> data, List<int> size) async {
    if (data.length != size.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::createItemFromPackageSize_batch', [for (int i = 0; i < this.length; i++) {"data": data[i].refId, "size": size[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<List<int>> itemWithContentsOfFile_batch(List<String> path) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::itemWithContentsOfFile_batch', [for (int i = 0; i < this.length; i++) {"path": path[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> destroyItem_batch(List<int> item) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::destroyItem_batch', [for (int i = 0; i < this.length; i++) {"item": item[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> destroyAllItems_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::destroyAllItems_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<List<int>> loadAIModelFromPackageSizeaitype_batch(List<NSValue/* void* */> data, List<int> size, List<FUAITYPE> type) async {
    if (data.length != size.length || size.length != type.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::loadAIModelFromPackageSizeaitype_batch', [for (int i = 0; i < this.length; i++) {"data": data[i].refId, "size": size[i], "type": type[i].index, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<List<int>> releaseAIModel_batch(List<FUAITYPE> type) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::releaseAIModel_batch', [for (int i = 0; i < this.length; i++) {"type": type[i].index, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<List<int>> isAIModelLoaded_batch(List<FUAITYPE> type) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::isAIModelLoaded_batch', [for (int i = 0; i < this.length; i++) {"type": type[i].index, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<List<int>> itemSetParamWithNamevalue_batch(List<int> item, List<String> name, List<NSObject> value) async {
    if (item.length != name.length || name.length != value.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::itemSetParamWithNamevalue_batch', [for (int i = 0; i < this.length; i++) {"item": item[i], "name": name[i], "value": value[i].refId, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<List<int>> itemSetParamdvWithNamevaluelength_batch(List<int> item, List<String> name, List<NSValue/* double* */> value, List<int> length) async {
    if (item.length != name.length || name.length != value.length || value.length != length.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::itemSetParamdvWithNamevaluelength_batch', [for (int i = 0; i < this.length; i++) {"item": item[i], "name": name[i], "value": value[i].refId, "length": length[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<List<int>> itemGetParamdvWithNamebufferlength_batch(List<int> item, List<String> name, List<NSValue/* double* */> buffer, List<int> length) async {
    if (item.length != name.length || name.length != buffer.length || buffer.length != length.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::itemGetParamdvWithNamebufferlength_batch', [for (int i = 0; i < this.length; i++) {"item": item[i], "name": name[i], "buffer": buffer[i].refId, "length": length[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<List<int>> itemGetParamfvWithNamebufferlength_batch(List<int> item, List<String> name, List<NSValue/* float* */> buffer, List<int> length) async {
    if (item.length != name.length || name.length != buffer.length || buffer.length != length.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::itemGetParamfvWithNamebufferlength_batch', [for (int i = 0; i < this.length; i++) {"item": item[i], "name": name[i], "buffer": buffer[i].refId, "length": length[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<List<double>> getDoubleParamFromItemWithName_batch(List<int> item, List<String> name) async {
    if (item.length != name.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::getDoubleParamFromItemWithName_batch', [for (int i = 0; i < this.length; i++) {"item": item[i], "name": name[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<List<String>> getStringParamFromItemWithName_batch(List<int> item, List<String> name) async {
    if (item.length != name.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::getStringParamFromItemWithName_batch', [for (int i = 0; i < this.length; i++) {"item": item[i], "name": name[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<List<int>> itemSetParamu8vWithNamebuffersize_batch(List<int> item, List<String> name, List<NSValue/* void* */> buffer, List<int> size) async {
    if (item.length != name.length || name.length != buffer.length || buffer.length != size.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::itemSetParamu8vWithNamebuffersize_batch', [for (int i = 0; i < this.length; i++) {"item": item[i], "name": name[i], "buffer": buffer[i].refId, "size": size[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<List<int>> itemGetParamu8vWithNamebuffersize_batch(List<int> item, List<String> name, List<NSValue/* void* */> buffer, List<int> size) async {
    if (item.length != name.length || name.length != buffer.length || buffer.length != size.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::itemGetParamu8vWithNamebuffersize_batch', [for (int i = 0; i < this.length; i++) {"item": item[i], "name": name[i], "buffer": buffer[i].refId, "size": size[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<List<int>> isTracking_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::isTracking_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<List<int>> setMaxFaces_batch(List<int> maxFaces) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::setMaxFaces_batch', [for (int i = 0; i < this.length; i++) {"maxFaces": maxFaces[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<List<int>> trackFaceInputDatawidthheight_batch(List<int> inputFormat, List<NSValue/* void* */> inputData, List<int> width, List<int> height) async {
    if (inputFormat.length != inputData.length || inputData.length != width.length || width.length != height.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::trackFaceInputDatawidthheight_batch', [for (int i = 0; i < this.length; i++) {"inputFormat": inputFormat[i], "inputData": inputData[i].refId, "width": width[i], "height": height[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<List<int>> trackFaceWithTongueInputDatawidthheight_batch(List<int> inputFormat, List<NSValue/* void* */> inputData, List<int> width, List<int> height) async {
    if (inputFormat.length != inputData.length || inputData.length != width.length || width.length != height.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::trackFaceWithTongueInputDatawidthheight_batch', [for (int i = 0; i < this.length; i++) {"inputFormat": inputFormat[i], "inputData": inputData[i].refId, "width": width[i], "height": height[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<List<int>> getFaceInfoNamepretnumber_batch(List<int> faceId, List<String> name, List<NSValue/* float* */> pret, List<int> number) async {
    if (faceId.length != name.length || name.length != pret.length || pret.length != number.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::getFaceInfoNamepretnumber_batch', [for (int i = 0; i < this.length; i++) {"faceId": faceId[i], "name": name[i], "pret": pret[i].refId, "number": number[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<List<int>> getFaceIdentifier_batch(List<int> faceId) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::getFaceIdentifier_batch', [for (int i = 0; i < this.length; i++) {"faceId": faceId[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<List<int>> avatarBindItemsItemsitemsCountcontractscontractsCount_batch(List<int> avatarItem, List<NSValue/* int* */> items, List<int> itemsCount, List<NSValue/* int* */> contracts, List<int> contractsCount) async {
    if (avatarItem.length != items.length || items.length != itemsCount.length || itemsCount.length != contracts.length || contracts.length != contractsCount.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::avatarBindItemsItemsitemsCountcontractscontractsCount_batch', [for (int i = 0; i < this.length; i++) {"avatarItem": avatarItem[i], "items": items[i].refId, "itemsCount": itemsCount[i], "contracts": contracts[i].refId, "contractsCount": contractsCount[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<List<int>> avatarUnbindItemsItemsitemsCount_batch(List<int> avatarItem, List<NSValue/* int* */> items, List<int> itemsCount) async {
    if (avatarItem.length != items.length || items.length != itemsCount.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::avatarUnbindItemsItemsitemsCount_batch', [for (int i = 0; i < this.length; i++) {"avatarItem": avatarItem[i], "items": items[i].refId, "itemsCount": itemsCount[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<List<int>> bindItemsItemsitemsCount_batch(List<int> item, List<NSValue/* int* */> items, List<int> itemsCount) async {
    if (item.length != items.length || items.length != itemsCount.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::bindItemsItemsitemsCount_batch', [for (int i = 0; i < this.length; i++) {"item": item[i], "items": items[i].refId, "itemsCount": itemsCount[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<List<int>> unBindItemsItemsitemsCount_batch(List<int> item, List<NSValue/* int* */> items, List<int> itemsCount) async {
    if (item.length != items.length || items.length != itemsCount.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::unBindItemsItemsitemsCount_batch', [for (int i = 0; i < this.length; i++) {"item": item[i], "items": items[i].refId, "itemsCount": itemsCount[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<List<int>> unbindAllItems_batch(List<int> item) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::unbindAllItems_batch', [for (int i = 0; i < this.length; i++) {"item": item[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<List<String>> getVersion_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::getVersion_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setExpressionCalibration_batch(List<int> expressionCalibration) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::setExpressionCalibration_batch', [for (int i = 0; i < this.length; i++) {"expressionCalibration": expressionCalibration[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setFocalLengthScale_batch(List<double> scale) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::setFocalLengthScale_batch', [for (int i = 0; i < this.length; i++) {"scale": scale[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setDefaultRotationMode_batch(List<int> mode) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::setDefaultRotationMode_batch', [for (int i = 0; i < this.length; i++) {"mode": mode[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setDeviceOrientation_batch(List<int> orientation) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::setDeviceOrientation_batch', [for (int i = 0; i < this.length; i++) {"orientation": orientation[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<List<int>> getCurrentRotationMode_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::getCurrentRotationMode_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<List<int>> setMultiSamples_batch(List<int> samples) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::setMultiSamples_batch', [for (int i = 0; i < this.length; i++) {"samples": samples[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setAsyncTrackFaceEnable_batch(List<int> enable) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::setAsyncTrackFaceEnable_batch', [for (int i = 0; i < this.length; i++) {"enable": enable[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setTongueTrackingEnable_batch(List<int> enable) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::setTongueTrackingEnable_batch', [for (int i = 0; i < this.length; i++) {"enable": enable[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<List<int>> loadTongueModelSize_batch(List<NSValue/* void* */> model, List<int> size) async {
    if (model.length != size.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::loadTongueModelSize_batch', [for (int i = 0; i < this.length; i++) {"model": model[i].refId, "size": size[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<List<NSValue/* void* */>> create3DBodyTrackerSize_batch(List<NSValue/* void* */> model, List<int> size) async {
    if (model.length != size.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::create3DBodyTrackerSize_batch', [for (int i = 0; i < this.length; i++) {"model": model[i].refId, "size": size[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => NSValue/* void* */()..refId = result..tag = 'faceunity_nama_fluttify').toList();
      kNativeObjectPool.addAll(typedResult);
      return typedResult;
    }
  }
  
  Future<void> destroy3DBodyTracker_batch(List<NSValue/* void* */> modelPtr) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::destroy3DBodyTracker_batch', [for (int i = 0; i < this.length; i++) {"modelPtr": modelPtr[i].refId, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<List<int>> run3DBodyTrackerHumanHandleinPtrinFormatwhrotationMode_batch(List<NSValue/* void* */> modelPtr, List<int> humanHandle, List<NSValue/* void* */> inPtr, List<FUFormat> inFormat, List<int> w, List<int> h, List<int> rotationMode) async {
    if (modelPtr.length != humanHandle.length || humanHandle.length != inPtr.length || inPtr.length != inFormat.length || inFormat.length != w.length || w.length != h.length || h.length != rotationMode.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::run3DBodyTrackerHumanHandleinPtrinFormatwhrotationMode_batch', [for (int i = 0; i < this.length; i++) {"modelPtr": modelPtr[i].refId, "humanHandle": humanHandle[i], "inPtr": inPtr[i].refId, "inFormat": inFormat[i].index, "w": w[i], "h": h[i], "rotationMode": rotationMode[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<List<NSValue/* void* */>> faceCaptureCreateSize_batch(List<NSValue/* void* */> data, List<int> size) async {
    if (data.length != size.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::faceCaptureCreateSize_batch', [for (int i = 0; i < this.length; i++) {"data": data[i].refId, "size": size[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => NSValue/* void* */()..refId = result..tag = 'faceunity_nama_fluttify').toList();
      kNativeObjectPool.addAll(typedResult);
      return typedResult;
    }
  }
  
  Future<void> faceCaptureDestory_batch(List<NSValue/* void* */> model) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::faceCaptureDestory_batch', [for (int i = 0; i < this.length; i++) {"model": model[i].refId, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<List<int>> faceCaptureReset_batch(List<NSValue/* void* */> model) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::faceCaptureReset_batch', [for (int i = 0; i < this.length; i++) {"model": model[i].refId, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<List<int>> faceCaptureProcessFrameInPtrinFormatwhrotationMode_batch(List<NSValue/* void* */> model, List<NSValue/* void* */> inPtr, List<FUFormat> inFormat, List<int> w, List<int> h, List<int> rotationMode) async {
    if (model.length != inPtr.length || inPtr.length != inFormat.length || inFormat.length != w.length || w.length != h.length || h.length != rotationMode.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::faceCaptureProcessFrameInPtrinFormatwhrotationMode_batch', [for (int i = 0; i < this.length; i++) {"model": model[i].refId, "inPtr": inPtr[i].refId, "inFormat": inFormat[i].index, "w": w[i], "h": h[i], "rotationMode": rotationMode[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<List<int>> faceCaptureGetResultLandmarksFaceNbufferlength_batch(List<NSValue/* void* */> model, List<int> faceN, List<NSValue/* float* */> buffer, List<int> length) async {
    if (model.length != faceN.length || faceN.length != buffer.length || buffer.length != length.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::faceCaptureGetResultLandmarksFaceNbufferlength_batch', [for (int i = 0; i < this.length; i++) {"model": model[i].refId, "faceN": faceN[i], "buffer": buffer[i].refId, "length": length[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<List<int>> faceCaptureGetResultIdentityFaceNbufferlength_batch(List<NSValue/* void* */> model, List<int> faceN, List<NSValue/* float* */> buffer, List<int> length) async {
    if (model.length != faceN.length || faceN.length != buffer.length || buffer.length != length.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::faceCaptureGetResultIdentityFaceNbufferlength_batch', [for (int i = 0; i < this.length; i++) {"model": model[i].refId, "faceN": faceN[i], "buffer": buffer[i].refId, "length": length[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<List<int>> faceCaptureGetResultExpressionFaceNbufferlength_batch(List<NSValue/* void* */> model, List<int> faceN, List<NSValue/* float* */> buffer, List<int> length) async {
    if (model.length != faceN.length || faceN.length != buffer.length || buffer.length != length.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::faceCaptureGetResultExpressionFaceNbufferlength_batch', [for (int i = 0; i < this.length; i++) {"model": model[i].refId, "faceN": faceN[i], "buffer": buffer[i].refId, "length": length[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<List<int>> faceCaptureGetResultRotationFaceNbufferlength_batch(List<NSValue/* void* */> model, List<int> faceN, List<NSValue/* float* */> buffer, List<int> length) async {
    if (model.length != faceN.length || faceN.length != buffer.length || buffer.length != length.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::faceCaptureGetResultRotationFaceNbufferlength_batch', [for (int i = 0; i < this.length; i++) {"model": model[i].refId, "faceN": faceN[i], "buffer": buffer[i].refId, "length": length[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<List<int>> faceCaptureGetResultTranslationFaceNbufferlength_batch(List<NSValue/* void* */> model, List<int> faceN, List<NSValue/* float* */> buffer, List<int> length) async {
    if (model.length != faceN.length || faceN.length != buffer.length || buffer.length != length.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::faceCaptureGetResultTranslationFaceNbufferlength_batch', [for (int i = 0; i < this.length; i++) {"model": model[i].refId, "faceN": faceN[i], "buffer": buffer[i].refId, "length": length[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<List<int>> faceCapturGetResultTongueExpFaceNbufferlength_batch(List<NSValue/* void* */> model, List<int> faceN, List<NSValue/* float* */> buffer, List<int> length) async {
    if (model.length != faceN.length || faceN.length != buffer.length || buffer.length != length.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::faceCapturGetResultTongueExpFaceNbufferlength_batch', [for (int i = 0; i < this.length; i++) {"model": model[i].refId, "faceN": faceN[i], "buffer": buffer[i].refId, "length": length[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<List<int>> faceCaptureGetResultIsFaceFaceN_batch(List<NSValue/* void* */> model, List<int> faceN) async {
    if (model.length != faceN.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::faceCaptureGetResultIsFaceFaceN_batch', [for (int i = 0; i < this.length; i++) {"model": model[i].refId, "faceN": faceN[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<List<int>> faceCaptureGetResultFaceIDFaceN_batch(List<NSValue/* void* */> model, List<int> faceN) async {
    if (model.length != faceN.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::faceCaptureGetResultFaceIDFaceN_batch', [for (int i = 0; i < this.length; i++) {"model": model[i].refId, "faceN": faceN[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<List<double>> faceCaptureGetResultTongueScoreFaceN_batch(List<NSValue/* void* */> model, List<int> faceN) async {
    if (model.length != faceN.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::faceCaptureGetResultTongueScoreFaceN_batch', [for (int i = 0; i < this.length; i++) {"model": model[i].refId, "faceN": faceN[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<List<int>> faceCaptureGetResultTongueClassFaceN_batch(List<NSValue/* void* */> model, List<int> faceN) async {
    if (model.length != faceN.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::faceCaptureGetResultTongueClassFaceN_batch', [for (int i = 0; i < this.length; i++) {"model": model[i].refId, "faceN": faceN[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<List<double>> faceCaptureGetResultFocalLength_batch(List<NSValue/* void* */> model) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::faceCaptureGetResultFocalLength_batch', [for (int i = 0; i < this.length; i++) {"model": model[i].refId, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<List<int>> faceCaptureGetResultFaceNum_batch(List<NSValue/* void* */> model) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::faceCaptureGetResultFaceNum_batch', [for (int i = 0; i < this.length; i++) {"model": model[i].refId, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> namaLibDestroy_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/faceunity_nama_fluttify').invokeMethod('FURenderer::namaLibDestroy_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  //endregion
}