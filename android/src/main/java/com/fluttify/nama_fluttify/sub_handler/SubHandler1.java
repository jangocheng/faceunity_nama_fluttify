//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

package com.fluttify.nama_fluttify.sub_handler;

import android.os.Bundle;
import android.util.Log;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import androidx.annotation.NonNull;
import io.flutter.embedding.engine.plugins.FlutterPlugin;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MethodCall;
import io.flutter.plugin.common.MethodChannel;
import io.flutter.plugin.common.PluginRegistry.Registrar;
import io.flutter.plugin.platform.PlatformViewRegistry;

import com.fluttify.nama_fluttify.NamaFluttifyPlugin.Handler;

import static me.yohom.foundation_fluttify.FoundationFluttifyPluginKt.getEnableLog;
import static me.yohom.foundation_fluttify.FoundationFluttifyPluginKt.getHEAP;

@SuppressWarnings("ALL")
public class SubHandler1 {
    public static Map<String, Handler> getSubHandler(BinaryMessenger messenger) {
        return new HashMap<String, Handler>() {{
            // method
            put("com.faceunity.wrapper.faceunity::fuBeautifyImage_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var0 = (int) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int var4 = (int) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int[] var5 = (int[]) ((Map<String, Object>) args).get("var5");
            
                    // ref
            
            
                    // invoke native method
                    int result;
                    try {
                        result = com.faceunity.wrapper.faceunity.fuBeautifyImage(var0, var1, var2, var3, var4, var5);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuTrackFace_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
            
                    // ref
            
            
                    // invoke native method
                    try {
                        com.faceunity.wrapper.faceunity.fuTrackFace(var0, var1, var2, var3);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuAvatarToTexture_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    float[] var0 = (float[]) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    float[] var1 = (float[]) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    float[] var2 = (float[]) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    float[] var3 = (float[]) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int var4 = (int) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int var5 = (int) ((Map<String, Object>) args).get("var5");
                    // jsonable arg
                    int var6 = (int) ((Map<String, Object>) args).get("var6");
                    // jsonable arg
                    int var7 = (int) ((Map<String, Object>) args).get("var7");
                    // jsonable arg
                    int[] var8 = (int[]) ((Map<String, Object>) args).get("var8");
                    // jsonable arg
                    int var9 = (int) ((Map<String, Object>) args).get("var9");
            
                    // ref
            
            
                    // invoke native method
                    int result;
                    try {
                        result = com.faceunity.wrapper.faceunity.fuAvatarToTexture(var0, var1, var2, var3, var4, var5, var6, var7, var8, var9);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuAvatarToTextureWithTrans_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    float[] var0 = (float[]) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    float[] var1 = (float[]) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    float[] var2 = (float[]) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    float[] var3 = (float[]) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    float[] var4 = (float[]) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int var5 = (int) ((Map<String, Object>) args).get("var5");
                    // jsonable arg
                    int var6 = (int) ((Map<String, Object>) args).get("var6");
                    // jsonable arg
                    int var7 = (int) ((Map<String, Object>) args).get("var7");
                    // jsonable arg
                    int var8 = (int) ((Map<String, Object>) args).get("var8");
                    // jsonable arg
                    int[] var9 = (int[]) ((Map<String, Object>) args).get("var9");
                    // jsonable arg
                    int var10 = (int) ((Map<String, Object>) args).get("var10");
            
                    // ref
            
            
                    // invoke native method
                    int result;
                    try {
                        result = com.faceunity.wrapper.faceunity.fuAvatarToTextureWithTrans(var0, var1, var2, var3, var4, var5, var6, var7, var8, var9, var10);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuAvatarToImage_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    float[] var0 = (float[]) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    float[] var1 = (float[]) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    float[] var2 = (float[]) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    float[] var3 = (float[]) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int var4 = (int) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int var5 = (int) ((Map<String, Object>) args).get("var5");
                    // jsonable arg
                    int var6 = (int) ((Map<String, Object>) args).get("var6");
                    // jsonable arg
                    int var7 = (int) ((Map<String, Object>) args).get("var7");
                    // jsonable arg
                    int[] var8 = (int[]) ((Map<String, Object>) args).get("var8");
                    // jsonable arg
                    int var9 = (int) ((Map<String, Object>) args).get("var9");
                    // jsonable arg
                    int var10 = (int) ((Map<String, Object>) args).get("var10");
                    // jsonable arg
                    int var11 = (int) ((Map<String, Object>) args).get("var11");
                    // jsonable arg
                    byte[] var12 = (byte[]) ((Map<String, Object>) args).get("var12");
            
                    // ref
            
            
                    // invoke native method
                    int result;
                    try {
                        result = com.faceunity.wrapper.faceunity.fuAvatarToImage(var0, var1, var2, var3, var4, var5, var6, var7, var8, var9, var10, var11, var12);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuAvatarBindItems_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var0 = (int) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    int[] var1 = (int[]) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    int[] var2 = (int[]) ((Map<String, Object>) args).get("var2");
            
                    // ref
            
            
                    // invoke native method
                    int result;
                    try {
                        result = com.faceunity.wrapper.faceunity.fuAvatarBindItems(var0, var1, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuAvatarUnbindItems_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var0 = (int) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    int[] var1 = (int[]) ((Map<String, Object>) args).get("var1");
            
                    // ref
            
            
                    // invoke native method
                    int result;
                    try {
                        result = com.faceunity.wrapper.faceunity.fuAvatarUnbindItems(var0, var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuGetVersion_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
            
            
                    // invoke native method
                    String result;
                    try {
                        result = com.faceunity.wrapper.faceunity.fuGetVersion();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuSetQualityTradeoff_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    Double var0 = (Double) ((Map<String, Object>) args).get("var0");
            
                    // ref
            
            
                    // invoke native method
                    try {
                        com.faceunity.wrapper.faceunity.fuSetQualityTradeoff(new Double(var0).floatValue());
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuBindItems_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var0 = (int) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    int[] var1 = (int[]) ((Map<String, Object>) args).get("var1");
            
                    // ref
            
            
                    // invoke native method
                    int result;
                    try {
                        result = com.faceunity.wrapper.faceunity.fuBindItems(var0, var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuUnbindAllItems_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var0 = (int) ((Map<String, Object>) args).get("var0");
            
                    // ref
            
            
                    // invoke native method
                    int result;
                    try {
                        result = com.faceunity.wrapper.faceunity.fuUnbindAllItems(var0);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuClearReadbackRelated_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
            
            
                    // invoke native method
                    int result;
                    try {
                        result = com.faceunity.wrapper.faceunity.fuClearReadbackRelated();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuGetSystemError_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
            
            
                    // invoke native method
                    int result;
                    try {
                        result = com.faceunity.wrapper.faceunity.fuGetSystemError();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuGetSystemErrorString_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var0 = (int) ((Map<String, Object>) args).get("var0");
            
                    // ref
            
            
                    // invoke native method
                    String result;
                    try {
                        result = com.faceunity.wrapper.faceunity.fuGetSystemErrorString(var0);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuCheckDebugItem_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
            
                    // ref
            
            
                    // invoke native method
                    int result;
                    try {
                        result = com.faceunity.wrapper.faceunity.fuCheckDebugItem(var0);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuLoadExtendedARData_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
            
                    // ref
            
            
                    // invoke native method
                    int result;
                    try {
                        result = com.faceunity.wrapper.faceunity.fuLoadExtendedARData(var0);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuSetExpressionCalibration_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var0 = (int) ((Map<String, Object>) args).get("var0");
            
                    // ref
            
            
                    // invoke native method
                    try {
                        com.faceunity.wrapper.faceunity.fuSetExpressionCalibration(var0);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuLoadAnimModel_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
            
                    // ref
            
            
                    // invoke native method
                    int result;
                    try {
                        result = com.faceunity.wrapper.faceunity.fuLoadAnimModel(var0);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuSetStrictTracking_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var0 = (int) ((Map<String, Object>) args).get("var0");
            
                    // ref
            
            
                    // invoke native method
                    try {
                        com.faceunity.wrapper.faceunity.fuSetStrictTracking(var0);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuSetDefaultRotationMode_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var0 = (int) ((Map<String, Object>) args).get("var0");
            
                    // ref
            
            
                    // invoke native method
                    try {
                        com.faceunity.wrapper.faceunity.fuSetDefaultRotationMode(var0);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuGetModuleCode_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var0 = (int) ((Map<String, Object>) args).get("var0");
            
                    // ref
            
            
                    // invoke native method
                    int result;
                    try {
                        result = com.faceunity.wrapper.faceunity.fuGetModuleCode(var0);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuHasFace_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
            
            
                    // invoke native method
                    int result;
                    try {
                        result = com.faceunity.wrapper.faceunity.fuHasFace();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuSetFocalLengthScale_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    Double var0 = (Double) ((Map<String, Object>) args).get("var0");
            
                    // ref
            
            
                    // invoke native method
                    try {
                        com.faceunity.wrapper.faceunity.fuSetFocalLengthScale(new Double(var0).floatValue());
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuSetAsyncTrackFace_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var0 = (int) ((Map<String, Object>) args).get("var0");
            
                    // ref
            
            
                    // invoke native method
                    int result;
                    try {
                        result = com.faceunity.wrapper.faceunity.fuSetAsyncTrackFace(var0);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::createcom_spap_nama_R_string__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_spap_nama_R_string__");
                }
            
                // args
            
            
                // create target object
                com.spap.nama.R.string obj = new com.spap.nama.R.string();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_spap_nama_R_drawable__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_spap_nama_R_drawable__");
                }
            
                // args
            
            
                // create target object
                com.spap.nama.R.drawable obj = new com.spap.nama.R.drawable();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_spap_nama_R__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_spap_nama_R__");
                }
            
                // args
            
            
                // create target object
                com.spap.nama.R obj = new com.spap.nama.R();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_spap_nama_R_attr__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_spap_nama_R_attr__");
                }
            
                // args
            
            
                // create target object
                com.spap.nama.R.attr obj = new com.spap.nama.R.attr();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_spap_nama_BuildConfig__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_spap_nama_BuildConfig__");
                }
            
                // args
            
            
                // create target object
                com.spap.nama.BuildConfig obj = new com.spap.nama.BuildConfig();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_faceunity_wrapper_faceunity__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_faceunity_wrapper_faceunity__");
                }
            
                // args
            
            
                // create target object
                com.faceunity.wrapper.faceunity obj = new com.faceunity.wrapper.faceunity();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_faceunity_wrapper_faceunity_RotatedImage__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_faceunity_wrapper_faceunity_RotatedImage__");
                }
            
                // args
            
            
                // create target object
                com.faceunity.wrapper.faceunity.RotatedImage obj = new com.faceunity.wrapper.faceunity.RotatedImage();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_faceunity_wrapper_faceunity_FUImage__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_faceunity_wrapper_faceunity_FUImage__");
                }
            
                // args
            
            
                // create target object
                com.faceunity.wrapper.faceunity.FUImage obj = new com.faceunity.wrapper.faceunity.FUImage();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_faceunity_wrapper_faceunity_AvatarInfo__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_faceunity_wrapper_faceunity_AvatarInfo__");
                }
            
                // args
            
            
                // create target object
                com.faceunity.wrapper.faceunity.AvatarInfo obj = new com.faceunity.wrapper.faceunity.AvatarInfo();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_faceunity_wrapper_faceunity_SplitViewInfo__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_faceunity_wrapper_faceunity_SplitViewInfo__");
                }
            
                // args
            
            
                // create target object
                com.faceunity.wrapper.faceunity.SplitViewInfo obj = new com.faceunity.wrapper.faceunity.SplitViewInfo();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_faceunity_BuildConfig__", (args, methodResult) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_faceunity_BuildConfig__");
                }
            
                // args
            
            
                // create target object
                com.faceunity.BuildConfig obj = new com.faceunity.BuildConfig();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::create_batchcom_spap_nama_R_string__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int i = 0; i < length; i++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(i);
                    }
            
                    // args
            
            
                    // create target object
                    com.spap.nama.R.string obj = new com.spap.nama.R.string();
                    getHEAP().put(obj.hashCode(), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(obj.hashCode());
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_spap_nama_R_drawable__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int i = 0; i < length; i++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(i);
                    }
            
                    // args
            
            
                    // create target object
                    com.spap.nama.R.drawable obj = new com.spap.nama.R.drawable();
                    getHEAP().put(obj.hashCode(), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(obj.hashCode());
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_spap_nama_R__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int i = 0; i < length; i++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(i);
                    }
            
                    // args
            
            
                    // create target object
                    com.spap.nama.R obj = new com.spap.nama.R();
                    getHEAP().put(obj.hashCode(), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(obj.hashCode());
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_spap_nama_R_attr__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int i = 0; i < length; i++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(i);
                    }
            
                    // args
            
            
                    // create target object
                    com.spap.nama.R.attr obj = new com.spap.nama.R.attr();
                    getHEAP().put(obj.hashCode(), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(obj.hashCode());
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_spap_nama_BuildConfig__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int i = 0; i < length; i++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(i);
                    }
            
                    // args
            
            
                    // create target object
                    com.spap.nama.BuildConfig obj = new com.spap.nama.BuildConfig();
                    getHEAP().put(obj.hashCode(), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(obj.hashCode());
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_faceunity_wrapper_faceunity__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int i = 0; i < length; i++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(i);
                    }
            
                    // args
            
            
                    // create target object
                    com.faceunity.wrapper.faceunity obj = new com.faceunity.wrapper.faceunity();
                    getHEAP().put(obj.hashCode(), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(obj.hashCode());
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_faceunity_wrapper_faceunity_RotatedImage__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int i = 0; i < length; i++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(i);
                    }
            
                    // args
            
            
                    // create target object
                    com.faceunity.wrapper.faceunity.RotatedImage obj = new com.faceunity.wrapper.faceunity.RotatedImage();
                    getHEAP().put(obj.hashCode(), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(obj.hashCode());
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_faceunity_wrapper_faceunity_FUImage__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int i = 0; i < length; i++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(i);
                    }
            
                    // args
            
            
                    // create target object
                    com.faceunity.wrapper.faceunity.FUImage obj = new com.faceunity.wrapper.faceunity.FUImage();
                    getHEAP().put(obj.hashCode(), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(obj.hashCode());
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_faceunity_wrapper_faceunity_AvatarInfo__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int i = 0; i < length; i++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(i);
                    }
            
                    // args
            
            
                    // create target object
                    com.faceunity.wrapper.faceunity.AvatarInfo obj = new com.faceunity.wrapper.faceunity.AvatarInfo();
                    getHEAP().put(obj.hashCode(), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(obj.hashCode());
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_faceunity_wrapper_faceunity_SplitViewInfo__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int i = 0; i < length; i++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(i);
                    }
            
                    // args
            
            
                    // create target object
                    com.faceunity.wrapper.faceunity.SplitViewInfo obj = new com.faceunity.wrapper.faceunity.SplitViewInfo();
                    getHEAP().put(obj.hashCode(), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(obj.hashCode());
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_faceunity_BuildConfig__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int i = 0; i < length; i++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(i);
                    }
            
                    // args
            
            
                    // create target object
                    com.faceunity.BuildConfig obj = new com.faceunity.BuildConfig();
                    getHEAP().put(obj.hashCode(), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(obj.hashCode());
                }
            
                methodResult.success(resultList);
            });
        }};
    }
}
