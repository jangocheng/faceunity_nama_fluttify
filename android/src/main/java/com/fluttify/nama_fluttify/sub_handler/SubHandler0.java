//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

package com.fluttify.nama_fluttify.sub_handler;

import android.os.Bundle;
import android.util.Log;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import androidx.annotation.NonNull;
import io.flutter.embedding.engine.plugins.FlutterPlugin;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MethodCall;
import io.flutter.plugin.common.MethodChannel;
import io.flutter.plugin.common.PluginRegistry.Registrar;
import io.flutter.plugin.platform.PlatformViewRegistry;

import com.fluttify.nama_fluttify.NamaFluttifyPlugin.Handler;

import static me.yohom.foundation_fluttify.FoundationFluttifyPluginKt.getEnableLog;
import static me.yohom.foundation_fluttify.FoundationFluttifyPluginKt.getHEAP;

@SuppressWarnings("ALL")
public class SubHandler0 {
    public static Map<String, Handler> getSubHandler(BinaryMessenger messenger) {
        return new HashMap<String, Handler>() {{
            // getter
            put("com.faceunity.wrapper.faceunity.RotatedImage::get_mData", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.faceunity.wrapper.faceunity.RotatedImage ref = (com.faceunity.wrapper.faceunity.RotatedImage) getHEAP().get(refId);
            
                byte[] result = ref.mData;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.faceunity.wrapper.faceunity.RotatedImage::get_mWidth", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.faceunity.wrapper.faceunity.RotatedImage ref = (com.faceunity.wrapper.faceunity.RotatedImage) getHEAP().get(refId);
            
                int result = ref.mWidth;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.faceunity.wrapper.faceunity.RotatedImage::get_mHeight", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.faceunity.wrapper.faceunity.RotatedImage ref = (com.faceunity.wrapper.faceunity.RotatedImage) getHEAP().get(refId);
            
                int result = ref.mHeight;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.faceunity.wrapper.faceunity.FUImage::get_tex", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.faceunity.wrapper.faceunity.FUImage ref = (com.faceunity.wrapper.faceunity.FUImage) getHEAP().get(refId);
            
                int result = ref.tex;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.faceunity.wrapper.faceunity.FUImage::get_nv21_data", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.faceunity.wrapper.faceunity.FUImage ref = (com.faceunity.wrapper.faceunity.FUImage) getHEAP().get(refId);
            
                byte[] result = ref.nv21_data;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.faceunity.wrapper.faceunity.AvatarInfo::get_mTranslation", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.faceunity.wrapper.faceunity.AvatarInfo ref = (com.faceunity.wrapper.faceunity.AvatarInfo) getHEAP().get(refId);
            
                float[] result = ref.mTranslation;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.faceunity.wrapper.faceunity.AvatarInfo::get_mRotation", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.faceunity.wrapper.faceunity.AvatarInfo ref = (com.faceunity.wrapper.faceunity.AvatarInfo) getHEAP().get(refId);
            
                float[] result = ref.mRotation;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.faceunity.wrapper.faceunity.AvatarInfo::get_mExpression", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.faceunity.wrapper.faceunity.AvatarInfo ref = (com.faceunity.wrapper.faceunity.AvatarInfo) getHEAP().get(refId);
            
                float[] result = ref.mExpression;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.faceunity.wrapper.faceunity.AvatarInfo::get_mRotationMode", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.faceunity.wrapper.faceunity.AvatarInfo ref = (com.faceunity.wrapper.faceunity.AvatarInfo) getHEAP().get(refId);
            
                float[] result = ref.mRotationMode;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.faceunity.wrapper.faceunity.AvatarInfo::get_mPupilPos", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.faceunity.wrapper.faceunity.AvatarInfo ref = (com.faceunity.wrapper.faceunity.AvatarInfo) getHEAP().get(refId);
            
                float[] result = ref.mPupilPos;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.faceunity.wrapper.faceunity.AvatarInfo::get_mIsValid", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.faceunity.wrapper.faceunity.AvatarInfo ref = (com.faceunity.wrapper.faceunity.AvatarInfo) getHEAP().get(refId);
            
                boolean result = ref.mIsValid;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.faceunity.wrapper.faceunity.SplitViewInfo::get_mImage", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.faceunity.wrapper.faceunity.SplitViewInfo ref = (com.faceunity.wrapper.faceunity.SplitViewInfo) getHEAP().get(refId);
            
                byte[] result = ref.mImage;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.faceunity.wrapper.faceunity.SplitViewInfo::get_mTex", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.faceunity.wrapper.faceunity.SplitViewInfo ref = (com.faceunity.wrapper.faceunity.SplitViewInfo) getHEAP().get(refId);
            
                int result = ref.mTex;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.faceunity.wrapper.faceunity.SplitViewInfo::get_mOutW", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.faceunity.wrapper.faceunity.SplitViewInfo ref = (com.faceunity.wrapper.faceunity.SplitViewInfo) getHEAP().get(refId);
            
                int result = ref.mOutW;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.faceunity.wrapper.faceunity.SplitViewInfo::get_mOutH", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.faceunity.wrapper.faceunity.SplitViewInfo ref = (com.faceunity.wrapper.faceunity.SplitViewInfo) getHEAP().get(refId);
            
                int result = ref.mOutH;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.faceunity.wrapper.faceunity.SplitViewInfo::get_mView0Ratio", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.faceunity.wrapper.faceunity.SplitViewInfo ref = (com.faceunity.wrapper.faceunity.SplitViewInfo) getHEAP().get(refId);
            
                float result = ref.mView0Ratio;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.faceunity.wrapper.faceunity.SplitViewInfo::get_mMarginInPixel", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.faceunity.wrapper.faceunity.SplitViewInfo ref = (com.faceunity.wrapper.faceunity.SplitViewInfo) getHEAP().get(refId);
            
                int result = ref.mMarginInPixel;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.faceunity.wrapper.faceunity.SplitViewInfo::get_mIsVertical", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.faceunity.wrapper.faceunity.SplitViewInfo ref = (com.faceunity.wrapper.faceunity.SplitViewInfo) getHEAP().get(refId);
            
                boolean result = ref.mIsVertical;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.faceunity.wrapper.faceunity.SplitViewInfo::get_mIsImageFirst", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.faceunity.wrapper.faceunity.SplitViewInfo ref = (com.faceunity.wrapper.faceunity.SplitViewInfo) getHEAP().get(refId);
            
                boolean result = ref.mIsImageFirst;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.faceunity.wrapper.faceunity.SplitViewInfo::get_mRotationModeBeforeCrop", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.faceunity.wrapper.faceunity.SplitViewInfo ref = (com.faceunity.wrapper.faceunity.SplitViewInfo) getHEAP().get(refId);
            
                int result = ref.mRotationModeBeforeCrop;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.faceunity.wrapper.faceunity.SplitViewInfo::get_mCropRatioTop", (args, methodResult) -> {
                // ref object
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.faceunity.wrapper.faceunity.SplitViewInfo ref = (com.faceunity.wrapper.faceunity.SplitViewInfo) getHEAP().get(refId);
            
                float result = ref.mCropRatioTop;
            
            
            
                methodResult.success(result);
            });
            // getter
            put("com.faceunity.wrapper.faceunity.RotatedImage::get_mData_batch", (argsBatch, methodResult) -> {
                List<byte[]> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // ref object
                    com.faceunity.wrapper.faceunity.RotatedImage ref = (com.faceunity.wrapper.faceunity.RotatedImage) getHEAP().get((int) args.get("refId"));
            
                    byte[] result = ref.mData;
            
                    byte[] jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.faceunity.wrapper.faceunity.RotatedImage::get_mWidth_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // ref object
                    com.faceunity.wrapper.faceunity.RotatedImage ref = (com.faceunity.wrapper.faceunity.RotatedImage) getHEAP().get((int) args.get("refId"));
            
                    int result = ref.mWidth;
            
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.faceunity.wrapper.faceunity.RotatedImage::get_mHeight_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // ref object
                    com.faceunity.wrapper.faceunity.RotatedImage ref = (com.faceunity.wrapper.faceunity.RotatedImage) getHEAP().get((int) args.get("refId"));
            
                    int result = ref.mHeight;
            
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.faceunity.wrapper.faceunity.FUImage::get_tex_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // ref object
                    com.faceunity.wrapper.faceunity.FUImage ref = (com.faceunity.wrapper.faceunity.FUImage) getHEAP().get((int) args.get("refId"));
            
                    int result = ref.tex;
            
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.faceunity.wrapper.faceunity.FUImage::get_nv21_data_batch", (argsBatch, methodResult) -> {
                List<byte[]> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // ref object
                    com.faceunity.wrapper.faceunity.FUImage ref = (com.faceunity.wrapper.faceunity.FUImage) getHEAP().get((int) args.get("refId"));
            
                    byte[] result = ref.nv21_data;
            
                    byte[] jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.faceunity.wrapper.faceunity.AvatarInfo::get_mTranslation_batch", (argsBatch, methodResult) -> {
                List<float[]> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // ref object
                    com.faceunity.wrapper.faceunity.AvatarInfo ref = (com.faceunity.wrapper.faceunity.AvatarInfo) getHEAP().get((int) args.get("refId"));
            
                    float[] result = ref.mTranslation;
            
                    float[] jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.faceunity.wrapper.faceunity.AvatarInfo::get_mRotation_batch", (argsBatch, methodResult) -> {
                List<float[]> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // ref object
                    com.faceunity.wrapper.faceunity.AvatarInfo ref = (com.faceunity.wrapper.faceunity.AvatarInfo) getHEAP().get((int) args.get("refId"));
            
                    float[] result = ref.mRotation;
            
                    float[] jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.faceunity.wrapper.faceunity.AvatarInfo::get_mExpression_batch", (argsBatch, methodResult) -> {
                List<float[]> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // ref object
                    com.faceunity.wrapper.faceunity.AvatarInfo ref = (com.faceunity.wrapper.faceunity.AvatarInfo) getHEAP().get((int) args.get("refId"));
            
                    float[] result = ref.mExpression;
            
                    float[] jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.faceunity.wrapper.faceunity.AvatarInfo::get_mRotationMode_batch", (argsBatch, methodResult) -> {
                List<float[]> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // ref object
                    com.faceunity.wrapper.faceunity.AvatarInfo ref = (com.faceunity.wrapper.faceunity.AvatarInfo) getHEAP().get((int) args.get("refId"));
            
                    float[] result = ref.mRotationMode;
            
                    float[] jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.faceunity.wrapper.faceunity.AvatarInfo::get_mPupilPos_batch", (argsBatch, methodResult) -> {
                List<float[]> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // ref object
                    com.faceunity.wrapper.faceunity.AvatarInfo ref = (com.faceunity.wrapper.faceunity.AvatarInfo) getHEAP().get((int) args.get("refId"));
            
                    float[] result = ref.mPupilPos;
            
                    float[] jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.faceunity.wrapper.faceunity.AvatarInfo::get_mIsValid_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // ref object
                    com.faceunity.wrapper.faceunity.AvatarInfo ref = (com.faceunity.wrapper.faceunity.AvatarInfo) getHEAP().get((int) args.get("refId"));
            
                    boolean result = ref.mIsValid;
            
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.faceunity.wrapper.faceunity.SplitViewInfo::get_mImage_batch", (argsBatch, methodResult) -> {
                List<byte[]> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // ref object
                    com.faceunity.wrapper.faceunity.SplitViewInfo ref = (com.faceunity.wrapper.faceunity.SplitViewInfo) getHEAP().get((int) args.get("refId"));
            
                    byte[] result = ref.mImage;
            
                    byte[] jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.faceunity.wrapper.faceunity.SplitViewInfo::get_mTex_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // ref object
                    com.faceunity.wrapper.faceunity.SplitViewInfo ref = (com.faceunity.wrapper.faceunity.SplitViewInfo) getHEAP().get((int) args.get("refId"));
            
                    int result = ref.mTex;
            
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.faceunity.wrapper.faceunity.SplitViewInfo::get_mOutW_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // ref object
                    com.faceunity.wrapper.faceunity.SplitViewInfo ref = (com.faceunity.wrapper.faceunity.SplitViewInfo) getHEAP().get((int) args.get("refId"));
            
                    int result = ref.mOutW;
            
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.faceunity.wrapper.faceunity.SplitViewInfo::get_mOutH_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // ref object
                    com.faceunity.wrapper.faceunity.SplitViewInfo ref = (com.faceunity.wrapper.faceunity.SplitViewInfo) getHEAP().get((int) args.get("refId"));
            
                    int result = ref.mOutH;
            
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.faceunity.wrapper.faceunity.SplitViewInfo::get_mView0Ratio_batch", (argsBatch, methodResult) -> {
                List<Float> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // ref object
                    com.faceunity.wrapper.faceunity.SplitViewInfo ref = (com.faceunity.wrapper.faceunity.SplitViewInfo) getHEAP().get((int) args.get("refId"));
            
                    float result = ref.mView0Ratio;
            
                    float jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.faceunity.wrapper.faceunity.SplitViewInfo::get_mMarginInPixel_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // ref object
                    com.faceunity.wrapper.faceunity.SplitViewInfo ref = (com.faceunity.wrapper.faceunity.SplitViewInfo) getHEAP().get((int) args.get("refId"));
            
                    int result = ref.mMarginInPixel;
            
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.faceunity.wrapper.faceunity.SplitViewInfo::get_mIsVertical_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // ref object
                    com.faceunity.wrapper.faceunity.SplitViewInfo ref = (com.faceunity.wrapper.faceunity.SplitViewInfo) getHEAP().get((int) args.get("refId"));
            
                    boolean result = ref.mIsVertical;
            
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.faceunity.wrapper.faceunity.SplitViewInfo::get_mIsImageFirst_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // ref object
                    com.faceunity.wrapper.faceunity.SplitViewInfo ref = (com.faceunity.wrapper.faceunity.SplitViewInfo) getHEAP().get((int) args.get("refId"));
            
                    boolean result = ref.mIsImageFirst;
            
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.faceunity.wrapper.faceunity.SplitViewInfo::get_mRotationModeBeforeCrop_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // ref object
                    com.faceunity.wrapper.faceunity.SplitViewInfo ref = (com.faceunity.wrapper.faceunity.SplitViewInfo) getHEAP().get((int) args.get("refId"));
            
                    int result = ref.mRotationModeBeforeCrop;
            
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // getter
            put("com.faceunity.wrapper.faceunity.SplitViewInfo::get_mCropRatioTop_batch", (argsBatch, methodResult) -> {
                List<Float> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // ref object
                    com.faceunity.wrapper.faceunity.SplitViewInfo ref = (com.faceunity.wrapper.faceunity.SplitViewInfo) getHEAP().get((int) args.get("refId"));
            
                    float result = ref.mCropRatioTop;
            
                    float jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // setter
            put("com.faceunity.wrapper.faceunity.RotatedImage::set_mData", (args, methodResult) -> {
                // jsonable arg
                byte[] mData = (byte[]) ((Map<String, Object>) args).get("mData");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.faceunity.wrapper.faceunity.RotatedImage ref = (com.faceunity.wrapper.faceunity.RotatedImage) getHEAP().get(refId);
            
                ref.mData = mData;
                methodResult.success("success");
            });
            // setter
            put("com.faceunity.wrapper.faceunity.RotatedImage::set_mWidth", (args, methodResult) -> {
                // jsonable arg
                int mWidth = (int) ((Map<String, Object>) args).get("mWidth");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.faceunity.wrapper.faceunity.RotatedImage ref = (com.faceunity.wrapper.faceunity.RotatedImage) getHEAP().get(refId);
            
                ref.mWidth = mWidth;
                methodResult.success("success");
            });
            // setter
            put("com.faceunity.wrapper.faceunity.RotatedImage::set_mHeight", (args, methodResult) -> {
                // jsonable arg
                int mHeight = (int) ((Map<String, Object>) args).get("mHeight");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.faceunity.wrapper.faceunity.RotatedImage ref = (com.faceunity.wrapper.faceunity.RotatedImage) getHEAP().get(refId);
            
                ref.mHeight = mHeight;
                methodResult.success("success");
            });
            // setter
            put("com.faceunity.wrapper.faceunity.FUImage::set_tex", (args, methodResult) -> {
                // jsonable arg
                int tex = (int) ((Map<String, Object>) args).get("tex");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.faceunity.wrapper.faceunity.FUImage ref = (com.faceunity.wrapper.faceunity.FUImage) getHEAP().get(refId);
            
                ref.tex = tex;
                methodResult.success("success");
            });
            // setter
            put("com.faceunity.wrapper.faceunity.FUImage::set_nv21_data", (args, methodResult) -> {
                // jsonable arg
                byte[] nv21_data = (byte[]) ((Map<String, Object>) args).get("nv21_data");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.faceunity.wrapper.faceunity.FUImage ref = (com.faceunity.wrapper.faceunity.FUImage) getHEAP().get(refId);
            
                ref.nv21_data = nv21_data;
                methodResult.success("success");
            });
            // setter
            put("com.faceunity.wrapper.faceunity.AvatarInfo::set_mTranslation", (args, methodResult) -> {
                // jsonable arg
                float[] mTranslation = (float[]) ((Map<String, Object>) args).get("mTranslation");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.faceunity.wrapper.faceunity.AvatarInfo ref = (com.faceunity.wrapper.faceunity.AvatarInfo) getHEAP().get(refId);
            
                ref.mTranslation = mTranslation;
                methodResult.success("success");
            });
            // setter
            put("com.faceunity.wrapper.faceunity.AvatarInfo::set_mRotation", (args, methodResult) -> {
                // jsonable arg
                float[] mRotation = (float[]) ((Map<String, Object>) args).get("mRotation");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.faceunity.wrapper.faceunity.AvatarInfo ref = (com.faceunity.wrapper.faceunity.AvatarInfo) getHEAP().get(refId);
            
                ref.mRotation = mRotation;
                methodResult.success("success");
            });
            // setter
            put("com.faceunity.wrapper.faceunity.AvatarInfo::set_mExpression", (args, methodResult) -> {
                // jsonable arg
                float[] mExpression = (float[]) ((Map<String, Object>) args).get("mExpression");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.faceunity.wrapper.faceunity.AvatarInfo ref = (com.faceunity.wrapper.faceunity.AvatarInfo) getHEAP().get(refId);
            
                ref.mExpression = mExpression;
                methodResult.success("success");
            });
            // setter
            put("com.faceunity.wrapper.faceunity.AvatarInfo::set_mRotationMode", (args, methodResult) -> {
                // jsonable arg
                float[] mRotationMode = (float[]) ((Map<String, Object>) args).get("mRotationMode");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.faceunity.wrapper.faceunity.AvatarInfo ref = (com.faceunity.wrapper.faceunity.AvatarInfo) getHEAP().get(refId);
            
                ref.mRotationMode = mRotationMode;
                methodResult.success("success");
            });
            // setter
            put("com.faceunity.wrapper.faceunity.AvatarInfo::set_mPupilPos", (args, methodResult) -> {
                // jsonable arg
                float[] mPupilPos = (float[]) ((Map<String, Object>) args).get("mPupilPos");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.faceunity.wrapper.faceunity.AvatarInfo ref = (com.faceunity.wrapper.faceunity.AvatarInfo) getHEAP().get(refId);
            
                ref.mPupilPos = mPupilPos;
                methodResult.success("success");
            });
            // setter
            put("com.faceunity.wrapper.faceunity.AvatarInfo::set_mIsValid", (args, methodResult) -> {
                // jsonable arg
                boolean mIsValid = (boolean) ((Map<String, Object>) args).get("mIsValid");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.faceunity.wrapper.faceunity.AvatarInfo ref = (com.faceunity.wrapper.faceunity.AvatarInfo) getHEAP().get(refId);
            
                ref.mIsValid = mIsValid;
                methodResult.success("success");
            });
            // setter
            put("com.faceunity.wrapper.faceunity.SplitViewInfo::set_mImage", (args, methodResult) -> {
                // jsonable arg
                byte[] mImage = (byte[]) ((Map<String, Object>) args).get("mImage");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.faceunity.wrapper.faceunity.SplitViewInfo ref = (com.faceunity.wrapper.faceunity.SplitViewInfo) getHEAP().get(refId);
            
                ref.mImage = mImage;
                methodResult.success("success");
            });
            // setter
            put("com.faceunity.wrapper.faceunity.SplitViewInfo::set_mTex", (args, methodResult) -> {
                // jsonable arg
                int mTex = (int) ((Map<String, Object>) args).get("mTex");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.faceunity.wrapper.faceunity.SplitViewInfo ref = (com.faceunity.wrapper.faceunity.SplitViewInfo) getHEAP().get(refId);
            
                ref.mTex = mTex;
                methodResult.success("success");
            });
            // setter
            put("com.faceunity.wrapper.faceunity.SplitViewInfo::set_mOutW", (args, methodResult) -> {
                // jsonable arg
                int mOutW = (int) ((Map<String, Object>) args).get("mOutW");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.faceunity.wrapper.faceunity.SplitViewInfo ref = (com.faceunity.wrapper.faceunity.SplitViewInfo) getHEAP().get(refId);
            
                ref.mOutW = mOutW;
                methodResult.success("success");
            });
            // setter
            put("com.faceunity.wrapper.faceunity.SplitViewInfo::set_mOutH", (args, methodResult) -> {
                // jsonable arg
                int mOutH = (int) ((Map<String, Object>) args).get("mOutH");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.faceunity.wrapper.faceunity.SplitViewInfo ref = (com.faceunity.wrapper.faceunity.SplitViewInfo) getHEAP().get(refId);
            
                ref.mOutH = mOutH;
                methodResult.success("success");
            });
            // setter
            put("com.faceunity.wrapper.faceunity.SplitViewInfo::set_mView0Ratio", (args, methodResult) -> {
                // jsonable arg
                Double mView0Ratio = (Double) ((Map<String, Object>) args).get("mView0Ratio");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.faceunity.wrapper.faceunity.SplitViewInfo ref = (com.faceunity.wrapper.faceunity.SplitViewInfo) getHEAP().get(refId);
            
                ref.mView0Ratio = new Double(mView0Ratio).floatValue();
                methodResult.success("success");
            });
            // setter
            put("com.faceunity.wrapper.faceunity.SplitViewInfo::set_mMarginInPixel", (args, methodResult) -> {
                // jsonable arg
                int mMarginInPixel = (int) ((Map<String, Object>) args).get("mMarginInPixel");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.faceunity.wrapper.faceunity.SplitViewInfo ref = (com.faceunity.wrapper.faceunity.SplitViewInfo) getHEAP().get(refId);
            
                ref.mMarginInPixel = mMarginInPixel;
                methodResult.success("success");
            });
            // setter
            put("com.faceunity.wrapper.faceunity.SplitViewInfo::set_mIsVertical", (args, methodResult) -> {
                // jsonable arg
                boolean mIsVertical = (boolean) ((Map<String, Object>) args).get("mIsVertical");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.faceunity.wrapper.faceunity.SplitViewInfo ref = (com.faceunity.wrapper.faceunity.SplitViewInfo) getHEAP().get(refId);
            
                ref.mIsVertical = mIsVertical;
                methodResult.success("success");
            });
            // setter
            put("com.faceunity.wrapper.faceunity.SplitViewInfo::set_mIsImageFirst", (args, methodResult) -> {
                // jsonable arg
                boolean mIsImageFirst = (boolean) ((Map<String, Object>) args).get("mIsImageFirst");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.faceunity.wrapper.faceunity.SplitViewInfo ref = (com.faceunity.wrapper.faceunity.SplitViewInfo) getHEAP().get(refId);
            
                ref.mIsImageFirst = mIsImageFirst;
                methodResult.success("success");
            });
            // setter
            put("com.faceunity.wrapper.faceunity.SplitViewInfo::set_mRotationModeBeforeCrop", (args, methodResult) -> {
                // jsonable arg
                int mRotationModeBeforeCrop = (int) ((Map<String, Object>) args).get("mRotationModeBeforeCrop");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.faceunity.wrapper.faceunity.SplitViewInfo ref = (com.faceunity.wrapper.faceunity.SplitViewInfo) getHEAP().get(refId);
            
                ref.mRotationModeBeforeCrop = mRotationModeBeforeCrop;
                methodResult.success("success");
            });
            // setter
            put("com.faceunity.wrapper.faceunity.SplitViewInfo::set_mCropRatioTop", (args, methodResult) -> {
                // jsonable arg
                Double mCropRatioTop = (Double) ((Map<String, Object>) args).get("mCropRatioTop");
            
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.faceunity.wrapper.faceunity.SplitViewInfo ref = (com.faceunity.wrapper.faceunity.SplitViewInfo) getHEAP().get(refId);
            
                ref.mCropRatioTop = new Double(mCropRatioTop).floatValue();
                methodResult.success("success");
            });
            // setter batch
            put("com.faceunity.wrapper.faceunity.RotatedImage::set_mData_batch", (argsBatch, methodResult) -> {
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // jsonable arg
                    byte[] mData = (byte[]) ((Map<String, Object>) args).get("mData");
            
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.faceunity.wrapper.faceunity.RotatedImage ref = (com.faceunity.wrapper.faceunity.RotatedImage) getHEAP().get(refId);
            
                    ref.mData = mData;
                }
            
                methodResult.success("success");
            });
            // setter batch
            put("com.faceunity.wrapper.faceunity.RotatedImage::set_mWidth_batch", (argsBatch, methodResult) -> {
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // jsonable arg
                    int mWidth = (int) ((Map<String, Object>) args).get("mWidth");
            
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.faceunity.wrapper.faceunity.RotatedImage ref = (com.faceunity.wrapper.faceunity.RotatedImage) getHEAP().get(refId);
            
                    ref.mWidth = mWidth;
                }
            
                methodResult.success("success");
            });
            // setter batch
            put("com.faceunity.wrapper.faceunity.RotatedImage::set_mHeight_batch", (argsBatch, methodResult) -> {
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // jsonable arg
                    int mHeight = (int) ((Map<String, Object>) args).get("mHeight");
            
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.faceunity.wrapper.faceunity.RotatedImage ref = (com.faceunity.wrapper.faceunity.RotatedImage) getHEAP().get(refId);
            
                    ref.mHeight = mHeight;
                }
            
                methodResult.success("success");
            });
            // setter batch
            put("com.faceunity.wrapper.faceunity.FUImage::set_tex_batch", (argsBatch, methodResult) -> {
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // jsonable arg
                    int tex = (int) ((Map<String, Object>) args).get("tex");
            
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.faceunity.wrapper.faceunity.FUImage ref = (com.faceunity.wrapper.faceunity.FUImage) getHEAP().get(refId);
            
                    ref.tex = tex;
                }
            
                methodResult.success("success");
            });
            // setter batch
            put("com.faceunity.wrapper.faceunity.FUImage::set_nv21_data_batch", (argsBatch, methodResult) -> {
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // jsonable arg
                    byte[] nv21_data = (byte[]) ((Map<String, Object>) args).get("nv21_data");
            
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.faceunity.wrapper.faceunity.FUImage ref = (com.faceunity.wrapper.faceunity.FUImage) getHEAP().get(refId);
            
                    ref.nv21_data = nv21_data;
                }
            
                methodResult.success("success");
            });
            // setter batch
            put("com.faceunity.wrapper.faceunity.AvatarInfo::set_mTranslation_batch", (argsBatch, methodResult) -> {
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // jsonable arg
                    float[] mTranslation = (float[]) ((Map<String, Object>) args).get("mTranslation");
            
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.faceunity.wrapper.faceunity.AvatarInfo ref = (com.faceunity.wrapper.faceunity.AvatarInfo) getHEAP().get(refId);
            
                    ref.mTranslation = mTranslation;
                }
            
                methodResult.success("success");
            });
            // setter batch
            put("com.faceunity.wrapper.faceunity.AvatarInfo::set_mRotation_batch", (argsBatch, methodResult) -> {
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // jsonable arg
                    float[] mRotation = (float[]) ((Map<String, Object>) args).get("mRotation");
            
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.faceunity.wrapper.faceunity.AvatarInfo ref = (com.faceunity.wrapper.faceunity.AvatarInfo) getHEAP().get(refId);
            
                    ref.mRotation = mRotation;
                }
            
                methodResult.success("success");
            });
            // setter batch
            put("com.faceunity.wrapper.faceunity.AvatarInfo::set_mExpression_batch", (argsBatch, methodResult) -> {
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // jsonable arg
                    float[] mExpression = (float[]) ((Map<String, Object>) args).get("mExpression");
            
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.faceunity.wrapper.faceunity.AvatarInfo ref = (com.faceunity.wrapper.faceunity.AvatarInfo) getHEAP().get(refId);
            
                    ref.mExpression = mExpression;
                }
            
                methodResult.success("success");
            });
            // setter batch
            put("com.faceunity.wrapper.faceunity.AvatarInfo::set_mRotationMode_batch", (argsBatch, methodResult) -> {
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // jsonable arg
                    float[] mRotationMode = (float[]) ((Map<String, Object>) args).get("mRotationMode");
            
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.faceunity.wrapper.faceunity.AvatarInfo ref = (com.faceunity.wrapper.faceunity.AvatarInfo) getHEAP().get(refId);
            
                    ref.mRotationMode = mRotationMode;
                }
            
                methodResult.success("success");
            });
            // setter batch
            put("com.faceunity.wrapper.faceunity.AvatarInfo::set_mPupilPos_batch", (argsBatch, methodResult) -> {
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // jsonable arg
                    float[] mPupilPos = (float[]) ((Map<String, Object>) args).get("mPupilPos");
            
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.faceunity.wrapper.faceunity.AvatarInfo ref = (com.faceunity.wrapper.faceunity.AvatarInfo) getHEAP().get(refId);
            
                    ref.mPupilPos = mPupilPos;
                }
            
                methodResult.success("success");
            });
            // setter batch
            put("com.faceunity.wrapper.faceunity.AvatarInfo::set_mIsValid_batch", (argsBatch, methodResult) -> {
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // jsonable arg
                    boolean mIsValid = (boolean) ((Map<String, Object>) args).get("mIsValid");
            
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.faceunity.wrapper.faceunity.AvatarInfo ref = (com.faceunity.wrapper.faceunity.AvatarInfo) getHEAP().get(refId);
            
                    ref.mIsValid = mIsValid;
                }
            
                methodResult.success("success");
            });
            // setter batch
            put("com.faceunity.wrapper.faceunity.SplitViewInfo::set_mImage_batch", (argsBatch, methodResult) -> {
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // jsonable arg
                    byte[] mImage = (byte[]) ((Map<String, Object>) args).get("mImage");
            
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.faceunity.wrapper.faceunity.SplitViewInfo ref = (com.faceunity.wrapper.faceunity.SplitViewInfo) getHEAP().get(refId);
            
                    ref.mImage = mImage;
                }
            
                methodResult.success("success");
            });
            // setter batch
            put("com.faceunity.wrapper.faceunity.SplitViewInfo::set_mTex_batch", (argsBatch, methodResult) -> {
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // jsonable arg
                    int mTex = (int) ((Map<String, Object>) args).get("mTex");
            
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.faceunity.wrapper.faceunity.SplitViewInfo ref = (com.faceunity.wrapper.faceunity.SplitViewInfo) getHEAP().get(refId);
            
                    ref.mTex = mTex;
                }
            
                methodResult.success("success");
            });
            // setter batch
            put("com.faceunity.wrapper.faceunity.SplitViewInfo::set_mOutW_batch", (argsBatch, methodResult) -> {
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // jsonable arg
                    int mOutW = (int) ((Map<String, Object>) args).get("mOutW");
            
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.faceunity.wrapper.faceunity.SplitViewInfo ref = (com.faceunity.wrapper.faceunity.SplitViewInfo) getHEAP().get(refId);
            
                    ref.mOutW = mOutW;
                }
            
                methodResult.success("success");
            });
            // setter batch
            put("com.faceunity.wrapper.faceunity.SplitViewInfo::set_mOutH_batch", (argsBatch, methodResult) -> {
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // jsonable arg
                    int mOutH = (int) ((Map<String, Object>) args).get("mOutH");
            
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.faceunity.wrapper.faceunity.SplitViewInfo ref = (com.faceunity.wrapper.faceunity.SplitViewInfo) getHEAP().get(refId);
            
                    ref.mOutH = mOutH;
                }
            
                methodResult.success("success");
            });
            // setter batch
            put("com.faceunity.wrapper.faceunity.SplitViewInfo::set_mView0Ratio_batch", (argsBatch, methodResult) -> {
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // jsonable arg
                    Double mView0Ratio = (Double) ((Map<String, Object>) args).get("mView0Ratio");
            
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.faceunity.wrapper.faceunity.SplitViewInfo ref = (com.faceunity.wrapper.faceunity.SplitViewInfo) getHEAP().get(refId);
            
                    ref.mView0Ratio = new Double(mView0Ratio).floatValue();
                }
            
                methodResult.success("success");
            });
            // setter batch
            put("com.faceunity.wrapper.faceunity.SplitViewInfo::set_mMarginInPixel_batch", (argsBatch, methodResult) -> {
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // jsonable arg
                    int mMarginInPixel = (int) ((Map<String, Object>) args).get("mMarginInPixel");
            
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.faceunity.wrapper.faceunity.SplitViewInfo ref = (com.faceunity.wrapper.faceunity.SplitViewInfo) getHEAP().get(refId);
            
                    ref.mMarginInPixel = mMarginInPixel;
                }
            
                methodResult.success("success");
            });
            // setter batch
            put("com.faceunity.wrapper.faceunity.SplitViewInfo::set_mIsVertical_batch", (argsBatch, methodResult) -> {
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // jsonable arg
                    boolean mIsVertical = (boolean) ((Map<String, Object>) args).get("mIsVertical");
            
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.faceunity.wrapper.faceunity.SplitViewInfo ref = (com.faceunity.wrapper.faceunity.SplitViewInfo) getHEAP().get(refId);
            
                    ref.mIsVertical = mIsVertical;
                }
            
                methodResult.success("success");
            });
            // setter batch
            put("com.faceunity.wrapper.faceunity.SplitViewInfo::set_mIsImageFirst_batch", (argsBatch, methodResult) -> {
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // jsonable arg
                    boolean mIsImageFirst = (boolean) ((Map<String, Object>) args).get("mIsImageFirst");
            
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.faceunity.wrapper.faceunity.SplitViewInfo ref = (com.faceunity.wrapper.faceunity.SplitViewInfo) getHEAP().get(refId);
            
                    ref.mIsImageFirst = mIsImageFirst;
                }
            
                methodResult.success("success");
            });
            // setter batch
            put("com.faceunity.wrapper.faceunity.SplitViewInfo::set_mRotationModeBeforeCrop_batch", (argsBatch, methodResult) -> {
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // jsonable arg
                    int mRotationModeBeforeCrop = (int) ((Map<String, Object>) args).get("mRotationModeBeforeCrop");
            
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.faceunity.wrapper.faceunity.SplitViewInfo ref = (com.faceunity.wrapper.faceunity.SplitViewInfo) getHEAP().get(refId);
            
                    ref.mRotationModeBeforeCrop = mRotationModeBeforeCrop;
                }
            
                methodResult.success("success");
            });
            // setter batch
            put("com.faceunity.wrapper.faceunity.SplitViewInfo::set_mCropRatioTop_batch", (argsBatch, methodResult) -> {
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // jsonable arg
                    Double mCropRatioTop = (Double) ((Map<String, Object>) args).get("mCropRatioTop");
            
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.faceunity.wrapper.faceunity.SplitViewInfo ref = (com.faceunity.wrapper.faceunity.SplitViewInfo) getHEAP().get(refId);
            
                    ref.mCropRatioTop = new Double(mCropRatioTop).floatValue();
                }
            
                methodResult.success("success");
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuSetup", (args, methodResult) -> {
                // args
                // jsonable arg
                byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
                // jsonable arg
                byte[] var1 = (byte[]) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                byte[] var2 = (byte[]) ((Map<String, Object>) args).get("var2");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.faceunity.wrapper.faceunity::fuSetup(" + var0 + var1 + var2 + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = com.faceunity.wrapper.faceunity.fuSetup(var0, var1, var2);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuCreateItemFromPackage", (args, methodResult) -> {
                // args
                // jsonable arg
                byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.faceunity.wrapper.faceunity::fuCreateItemFromPackage(" + var0 + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = com.faceunity.wrapper.faceunity.fuCreateItemFromPackage(var0);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuDestroyItem", (args, methodResult) -> {
                // args
                // jsonable arg
                int var0 = (int) ((Map<String, Object>) args).get("var0");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.faceunity.wrapper.faceunity::fuDestroyItem(" + var0 + ")");
                }
            
                // invoke native method
                try {
                    com.faceunity.wrapper.faceunity.fuDestroyItem(var0);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuDestroyAllItems", (args, methodResult) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.faceunity.wrapper.faceunity::fuDestroyAllItems(" + "" + ")");
                }
            
                // invoke native method
                try {
                    com.faceunity.wrapper.faceunity.fuDestroyAllItems();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuRenderNV21ImageToTexture", (args, methodResult) -> {
                // args
                // jsonable arg
                byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                int var2 = (int) ((Map<String, Object>) args).get("var2");
                // jsonable arg
                int var3 = (int) ((Map<String, Object>) args).get("var3");
                // jsonable arg
                int[] var4 = (int[]) ((Map<String, Object>) args).get("var4");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.faceunity.wrapper.faceunity::fuRenderNV21ImageToTexture(" + var0 + var1 + var2 + var3 + var4 + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = com.faceunity.wrapper.faceunity.fuRenderNV21ImageToTexture(var0, var1, var2, var3, var4);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuRenderI420ImageToTexture", (args, methodResult) -> {
                // args
                // jsonable arg
                byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                int var2 = (int) ((Map<String, Object>) args).get("var2");
                // jsonable arg
                int var3 = (int) ((Map<String, Object>) args).get("var3");
                // jsonable arg
                int[] var4 = (int[]) ((Map<String, Object>) args).get("var4");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.faceunity.wrapper.faceunity::fuRenderI420ImageToTexture(" + var0 + var1 + var2 + var3 + var4 + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = com.faceunity.wrapper.faceunity.fuRenderI420ImageToTexture(var0, var1, var2, var3, var4);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuDone", (args, methodResult) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.faceunity.wrapper.faceunity::fuDone(" + "" + ")");
                }
            
                // invoke native method
                try {
                    com.faceunity.wrapper.faceunity.fuDone();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuOnDeviceLost", (args, methodResult) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.faceunity.wrapper.faceunity::fuOnDeviceLost(" + "" + ")");
                }
            
                // invoke native method
                try {
                    com.faceunity.wrapper.faceunity.fuOnDeviceLost();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuOnCameraChange", (args, methodResult) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.faceunity.wrapper.faceunity::fuOnCameraChange(" + "" + ")");
                }
            
                // invoke native method
                try {
                    com.faceunity.wrapper.faceunity.fuOnCameraChange();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuItemSetParam__int__String__double", (args, methodResult) -> {
                // args
                // jsonable arg
                int var0 = (int) ((Map<String, Object>) args).get("var0");
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                double var2 = (double) ((Map<String, Object>) args).get("var2");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.faceunity.wrapper.faceunity::fuItemSetParam(" + var0 + var1 + var2 + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = com.faceunity.wrapper.faceunity.fuItemSetParam(var0, var1, var2);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuItemSetParam__int__String__Float64List", (args, methodResult) -> {
                // args
                // jsonable arg
                int var0 = (int) ((Map<String, Object>) args).get("var0");
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                double[] var2 = (double[]) ((Map<String, Object>) args).get("var2");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.faceunity.wrapper.faceunity::fuItemSetParam(" + var0 + var1 + var2 + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = com.faceunity.wrapper.faceunity.fuItemSetParam(var0, var1, var2);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuItemSetParam__int__String__String", (args, methodResult) -> {
                // args
                // jsonable arg
                int var0 = (int) ((Map<String, Object>) args).get("var0");
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                String var2 = (String) ((Map<String, Object>) args).get("var2");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.faceunity.wrapper.faceunity::fuItemSetParam(" + var0 + var1 + var2 + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = com.faceunity.wrapper.faceunity.fuItemSetParam(var0, var1, var2);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuItemSetParamu8v", (args, methodResult) -> {
                // args
                // jsonable arg
                int var0 = (int) ((Map<String, Object>) args).get("var0");
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                byte[] var2 = (byte[]) ((Map<String, Object>) args).get("var2");
                // jsonable arg
                int var3 = (int) ((Map<String, Object>) args).get("var3");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.faceunity.wrapper.faceunity::fuItemSetParamu8v(" + var0 + var1 + var2 + var3 + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = com.faceunity.wrapper.faceunity.fuItemSetParamu8v(var0, var1, var2, var3);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuIsTracking", (args, methodResult) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.faceunity.wrapper.faceunity::fuIsTracking(" + "" + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = com.faceunity.wrapper.faceunity.fuIsTracking();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuItemGetParam", (args, methodResult) -> {
                // args
                // jsonable arg
                int var0 = (int) ((Map<String, Object>) args).get("var0");
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.faceunity.wrapper.faceunity::fuItemGetParam(" + var0 + var1 + ")");
                }
            
                // invoke native method
                double result;
                try {
                    result = com.faceunity.wrapper.faceunity.fuItemGetParam(var0, var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                double jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuItemGetParamString", (args, methodResult) -> {
                // args
                // jsonable arg
                int var0 = (int) ((Map<String, Object>) args).get("var0");
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.faceunity.wrapper.faceunity::fuItemGetParamString(" + var0 + var1 + ")");
                }
            
                // invoke native method
                String result;
                try {
                    result = com.faceunity.wrapper.faceunity.fuItemGetParamString(var0, var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuItemGetParamu8v", (args, methodResult) -> {
                // args
                // jsonable arg
                int var0 = (int) ((Map<String, Object>) args).get("var0");
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.faceunity.wrapper.faceunity::fuItemGetParamu8v(" + var0 + var1 + ")");
                }
            
                // invoke native method
                byte[] result;
                try {
                    result = com.faceunity.wrapper.faceunity.fuItemGetParamu8v(var0, var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                byte[] jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuSetMaxFaces", (args, methodResult) -> {
                // args
                // jsonable arg
                int var0 = (int) ((Map<String, Object>) args).get("var0");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.faceunity.wrapper.faceunity::fuSetMaxFaces(" + var0 + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = com.faceunity.wrapper.faceunity.fuSetMaxFaces(var0);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuRenderToNV21Image__Uint8List__int__int__int__Int32List", (args, methodResult) -> {
                // args
                // jsonable arg
                byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                int var2 = (int) ((Map<String, Object>) args).get("var2");
                // jsonable arg
                int var3 = (int) ((Map<String, Object>) args).get("var3");
                // jsonable arg
                int[] var4 = (int[]) ((Map<String, Object>) args).get("var4");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.faceunity.wrapper.faceunity::fuRenderToNV21Image(" + var0 + var1 + var2 + var3 + var4 + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = com.faceunity.wrapper.faceunity.fuRenderToNV21Image(var0, var1, var2, var3, var4);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuRenderToNV21ImageMasked", (args, methodResult) -> {
                // args
                // jsonable arg
                byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                int var2 = (int) ((Map<String, Object>) args).get("var2");
                // jsonable arg
                int var3 = (int) ((Map<String, Object>) args).get("var3");
                // jsonable arg
                int[] var4 = (int[]) ((Map<String, Object>) args).get("var4");
                // jsonable arg
                int[] var5 = (int[]) ((Map<String, Object>) args).get("var5");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.faceunity.wrapper.faceunity::fuRenderToNV21ImageMasked(" + var0 + var1 + var2 + var3 + var4 + var5 + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = com.faceunity.wrapper.faceunity.fuRenderToNV21ImageMasked(var0, var1, var2, var3, var4, var5);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuRenderToNV21Image__Uint8List__int__int__int__Int32List__int", (args, methodResult) -> {
                // args
                // jsonable arg
                byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                int var2 = (int) ((Map<String, Object>) args).get("var2");
                // jsonable arg
                int var3 = (int) ((Map<String, Object>) args).get("var3");
                // jsonable arg
                int[] var4 = (int[]) ((Map<String, Object>) args).get("var4");
                // jsonable arg
                int var5 = (int) ((Map<String, Object>) args).get("var5");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.faceunity.wrapper.faceunity::fuRenderToNV21Image(" + var0 + var1 + var2 + var3 + var4 + var5 + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = com.faceunity.wrapper.faceunity.fuRenderToNV21Image(var0, var1, var2, var3, var4, var5);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuRenderToNV21Image__int__int__int__int__Int32List__int", (args, methodResult) -> {
                // args
                // jsonable arg
                int var0 = (int) ((Map<String, Object>) args).get("var0");
                // jsonable arg
                int var2 = (int) ((Map<String, Object>) args).get("var2");
                // jsonable arg
                int var3 = (int) ((Map<String, Object>) args).get("var3");
                // jsonable arg
                int var4 = (int) ((Map<String, Object>) args).get("var4");
                // jsonable arg
                int[] var5 = (int[]) ((Map<String, Object>) args).get("var5");
                // jsonable arg
                int var6 = (int) ((Map<String, Object>) args).get("var6");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.faceunity.wrapper.faceunity::fuRenderToNV21Image(" + var0 + var2 + var3 + var4 + var5 + var6 + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = com.faceunity.wrapper.faceunity.fuRenderToNV21Image(var0, var2, var3, var4, var5, var6);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuRenderToNV21Image__Uint8List__int__int__int__Int32List__int__int__int__Uint8List", (args, methodResult) -> {
                // args
                // jsonable arg
                byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                int var2 = (int) ((Map<String, Object>) args).get("var2");
                // jsonable arg
                int var3 = (int) ((Map<String, Object>) args).get("var3");
                // jsonable arg
                int[] var4 = (int[]) ((Map<String, Object>) args).get("var4");
                // jsonable arg
                int var5 = (int) ((Map<String, Object>) args).get("var5");
                // jsonable arg
                int var6 = (int) ((Map<String, Object>) args).get("var6");
                // jsonable arg
                int var7 = (int) ((Map<String, Object>) args).get("var7");
                // jsonable arg
                byte[] var8 = (byte[]) ((Map<String, Object>) args).get("var8");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.faceunity.wrapper.faceunity::fuRenderToNV21Image(" + var0 + var1 + var2 + var3 + var4 + var5 + var6 + var7 + var8 + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = com.faceunity.wrapper.faceunity.fuRenderToNV21Image(var0, var1, var2, var3, var4, var5, var6, var7, var8);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuRenderToI420Image__Uint8List__int__int__int__Int32List", (args, methodResult) -> {
                // args
                // jsonable arg
                byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                int var2 = (int) ((Map<String, Object>) args).get("var2");
                // jsonable arg
                int var3 = (int) ((Map<String, Object>) args).get("var3");
                // jsonable arg
                int[] var4 = (int[]) ((Map<String, Object>) args).get("var4");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.faceunity.wrapper.faceunity::fuRenderToI420Image(" + var0 + var1 + var2 + var3 + var4 + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = com.faceunity.wrapper.faceunity.fuRenderToI420Image(var0, var1, var2, var3, var4);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuRenderToI420ImageMasked", (args, methodResult) -> {
                // args
                // jsonable arg
                byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                int var2 = (int) ((Map<String, Object>) args).get("var2");
                // jsonable arg
                int var3 = (int) ((Map<String, Object>) args).get("var3");
                // jsonable arg
                int[] var4 = (int[]) ((Map<String, Object>) args).get("var4");
                // jsonable arg
                int[] var5 = (int[]) ((Map<String, Object>) args).get("var5");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.faceunity.wrapper.faceunity::fuRenderToI420ImageMasked(" + var0 + var1 + var2 + var3 + var4 + var5 + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = com.faceunity.wrapper.faceunity.fuRenderToI420ImageMasked(var0, var1, var2, var3, var4, var5);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuRenderToI420Image__Uint8List__int__int__int__Int32List__int", (args, methodResult) -> {
                // args
                // jsonable arg
                byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                int var2 = (int) ((Map<String, Object>) args).get("var2");
                // jsonable arg
                int var3 = (int) ((Map<String, Object>) args).get("var3");
                // jsonable arg
                int[] var4 = (int[]) ((Map<String, Object>) args).get("var4");
                // jsonable arg
                int var5 = (int) ((Map<String, Object>) args).get("var5");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.faceunity.wrapper.faceunity::fuRenderToI420Image(" + var0 + var1 + var2 + var3 + var4 + var5 + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = com.faceunity.wrapper.faceunity.fuRenderToI420Image(var0, var1, var2, var3, var4, var5);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuRenderToI420Image__int__int__int__int__Int32List__int", (args, methodResult) -> {
                // args
                // jsonable arg
                int var0 = (int) ((Map<String, Object>) args).get("var0");
                // jsonable arg
                int var2 = (int) ((Map<String, Object>) args).get("var2");
                // jsonable arg
                int var3 = (int) ((Map<String, Object>) args).get("var3");
                // jsonable arg
                int var4 = (int) ((Map<String, Object>) args).get("var4");
                // jsonable arg
                int[] var5 = (int[]) ((Map<String, Object>) args).get("var5");
                // jsonable arg
                int var6 = (int) ((Map<String, Object>) args).get("var6");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.faceunity.wrapper.faceunity::fuRenderToI420Image(" + var0 + var2 + var3 + var4 + var5 + var6 + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = com.faceunity.wrapper.faceunity.fuRenderToI420Image(var0, var2, var3, var4, var5, var6);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuRenderToI420Image__Uint8List__int__int__int__Int32List__int__int__int__Uint8List", (args, methodResult) -> {
                // args
                // jsonable arg
                byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                int var2 = (int) ((Map<String, Object>) args).get("var2");
                // jsonable arg
                int var3 = (int) ((Map<String, Object>) args).get("var3");
                // jsonable arg
                int[] var4 = (int[]) ((Map<String, Object>) args).get("var4");
                // jsonable arg
                int var5 = (int) ((Map<String, Object>) args).get("var5");
                // jsonable arg
                int var6 = (int) ((Map<String, Object>) args).get("var6");
                // jsonable arg
                int var7 = (int) ((Map<String, Object>) args).get("var7");
                // jsonable arg
                byte[] var8 = (byte[]) ((Map<String, Object>) args).get("var8");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.faceunity.wrapper.faceunity::fuRenderToI420Image(" + var0 + var1 + var2 + var3 + var4 + var5 + var6 + var7 + var8 + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = com.faceunity.wrapper.faceunity.fuRenderToI420Image(var0, var1, var2, var3, var4, var5, var6, var7, var8);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuRenderToRgbaImage__Uint8List__int__int__int__Int32List", (args, methodResult) -> {
                // args
                // jsonable arg
                byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                int var2 = (int) ((Map<String, Object>) args).get("var2");
                // jsonable arg
                int var3 = (int) ((Map<String, Object>) args).get("var3");
                // jsonable arg
                int[] var4 = (int[]) ((Map<String, Object>) args).get("var4");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.faceunity.wrapper.faceunity::fuRenderToRgbaImage(" + var0 + var1 + var2 + var3 + var4 + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = com.faceunity.wrapper.faceunity.fuRenderToRgbaImage(var0, var1, var2, var3, var4);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuRenderToRgbaImage__Uint8List__int__int__int__Int32List__int", (args, methodResult) -> {
                // args
                // jsonable arg
                byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                int var2 = (int) ((Map<String, Object>) args).get("var2");
                // jsonable arg
                int var3 = (int) ((Map<String, Object>) args).get("var3");
                // jsonable arg
                int[] var4 = (int[]) ((Map<String, Object>) args).get("var4");
                // jsonable arg
                int var5 = (int) ((Map<String, Object>) args).get("var5");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.faceunity.wrapper.faceunity::fuRenderToRgbaImage(" + var0 + var1 + var2 + var3 + var4 + var5 + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = com.faceunity.wrapper.faceunity.fuRenderToRgbaImage(var0, var1, var2, var3, var4, var5);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuRenderToRgbaImage__int__int__int__int__Int32List__int", (args, methodResult) -> {
                // args
                // jsonable arg
                int var0 = (int) ((Map<String, Object>) args).get("var0");
                // jsonable arg
                int var2 = (int) ((Map<String, Object>) args).get("var2");
                // jsonable arg
                int var3 = (int) ((Map<String, Object>) args).get("var3");
                // jsonable arg
                int var4 = (int) ((Map<String, Object>) args).get("var4");
                // jsonable arg
                int[] var5 = (int[]) ((Map<String, Object>) args).get("var5");
                // jsonable arg
                int var6 = (int) ((Map<String, Object>) args).get("var6");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.faceunity.wrapper.faceunity::fuRenderToRgbaImage(" + var0 + var2 + var3 + var4 + var5 + var6 + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = com.faceunity.wrapper.faceunity.fuRenderToRgbaImage(var0, var2, var3, var4, var5, var6);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuRenderToRgbaImage__Uint8List__int__int__int__Int32List__int__int__int__Uint8List", (args, methodResult) -> {
                // args
                // jsonable arg
                byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                int var2 = (int) ((Map<String, Object>) args).get("var2");
                // jsonable arg
                int var3 = (int) ((Map<String, Object>) args).get("var3");
                // jsonable arg
                int[] var4 = (int[]) ((Map<String, Object>) args).get("var4");
                // jsonable arg
                int var5 = (int) ((Map<String, Object>) args).get("var5");
                // jsonable arg
                int var6 = (int) ((Map<String, Object>) args).get("var6");
                // jsonable arg
                int var7 = (int) ((Map<String, Object>) args).get("var7");
                // jsonable arg
                byte[] var8 = (byte[]) ((Map<String, Object>) args).get("var8");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.faceunity.wrapper.faceunity::fuRenderToRgbaImage(" + var0 + var1 + var2 + var3 + var4 + var5 + var6 + var7 + var8 + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = com.faceunity.wrapper.faceunity.fuRenderToRgbaImage(var0, var1, var2, var3, var4, var5, var6, var7, var8);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuRenderToYUVImage__Uint8List__Uint8List__Uint8List__int__int__int__int__int__int__Int32List", (args, methodResult) -> {
                // args
                // jsonable arg
                byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
                // jsonable arg
                byte[] var1 = (byte[]) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                byte[] var2 = (byte[]) ((Map<String, Object>) args).get("var2");
                // jsonable arg
                int var3 = (int) ((Map<String, Object>) args).get("var3");
                // jsonable arg
                int var4 = (int) ((Map<String, Object>) args).get("var4");
                // jsonable arg
                int var5 = (int) ((Map<String, Object>) args).get("var5");
                // jsonable arg
                int var6 = (int) ((Map<String, Object>) args).get("var6");
                // jsonable arg
                int var7 = (int) ((Map<String, Object>) args).get("var7");
                // jsonable arg
                int var8 = (int) ((Map<String, Object>) args).get("var8");
                // jsonable arg
                int[] var9 = (int[]) ((Map<String, Object>) args).get("var9");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.faceunity.wrapper.faceunity::fuRenderToYUVImage(" + var0 + var1 + var2 + var3 + var4 + var5 + var6 + var7 + var8 + var9 + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = com.faceunity.wrapper.faceunity.fuRenderToYUVImage(var0, var1, var2, var3, var4, var5, var6, var7, var8, var9);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuRenderToYUVImage__Uint8List__Uint8List__Uint8List__int__int__int__int__int__int__Int32List__int", (args, methodResult) -> {
                // args
                // jsonable arg
                byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
                // jsonable arg
                byte[] var1 = (byte[]) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                byte[] var2 = (byte[]) ((Map<String, Object>) args).get("var2");
                // jsonable arg
                int var3 = (int) ((Map<String, Object>) args).get("var3");
                // jsonable arg
                int var4 = (int) ((Map<String, Object>) args).get("var4");
                // jsonable arg
                int var5 = (int) ((Map<String, Object>) args).get("var5");
                // jsonable arg
                int var6 = (int) ((Map<String, Object>) args).get("var6");
                // jsonable arg
                int var7 = (int) ((Map<String, Object>) args).get("var7");
                // jsonable arg
                int var8 = (int) ((Map<String, Object>) args).get("var8");
                // jsonable arg
                int[] var9 = (int[]) ((Map<String, Object>) args).get("var9");
                // jsonable arg
                int var10 = (int) ((Map<String, Object>) args).get("var10");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.faceunity.wrapper.faceunity::fuRenderToYUVImage(" + var0 + var1 + var2 + var3 + var4 + var5 + var6 + var7 + var8 + var9 + var10 + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = com.faceunity.wrapper.faceunity.fuRenderToYUVImage(var0, var1, var2, var3, var4, var5, var6, var7, var8, var9, var10);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuRenderToYUVImage__int__int__int__int__int__int__int__int__int__Int32List", (args, methodResult) -> {
                // args
                // jsonable arg
                int var0 = (int) ((Map<String, Object>) args).get("var0");
                // jsonable arg
                int var2 = (int) ((Map<String, Object>) args).get("var2");
                // jsonable arg
                int var4 = (int) ((Map<String, Object>) args).get("var4");
                // jsonable arg
                int var6 = (int) ((Map<String, Object>) args).get("var6");
                // jsonable arg
                int var7 = (int) ((Map<String, Object>) args).get("var7");
                // jsonable arg
                int var8 = (int) ((Map<String, Object>) args).get("var8");
                // jsonable arg
                int var9 = (int) ((Map<String, Object>) args).get("var9");
                // jsonable arg
                int var10 = (int) ((Map<String, Object>) args).get("var10");
                // jsonable arg
                int var11 = (int) ((Map<String, Object>) args).get("var11");
                // jsonable arg
                int[] var12 = (int[]) ((Map<String, Object>) args).get("var12");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.faceunity.wrapper.faceunity::fuRenderToYUVImage(" + var0 + var2 + var4 + var6 + var7 + var8 + var9 + var10 + var11 + var12 + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = com.faceunity.wrapper.faceunity.fuRenderToYUVImage(var0, var2, var4, var6, var7, var8, var9, var10, var11, var12);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuDualInputToTexture__Uint8List__int__int__int__int__int__Int32List", (args, methodResult) -> {
                // args
                // jsonable arg
                byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                int var2 = (int) ((Map<String, Object>) args).get("var2");
                // jsonable arg
                int var3 = (int) ((Map<String, Object>) args).get("var3");
                // jsonable arg
                int var4 = (int) ((Map<String, Object>) args).get("var4");
                // jsonable arg
                int var5 = (int) ((Map<String, Object>) args).get("var5");
                // jsonable arg
                int[] var6 = (int[]) ((Map<String, Object>) args).get("var6");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.faceunity.wrapper.faceunity::fuDualInputToTexture(" + var0 + var1 + var2 + var3 + var4 + var5 + var6 + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = com.faceunity.wrapper.faceunity.fuDualInputToTexture(var0, var1, var2, var3, var4, var5, var6);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuDualInputToTexture__int__int__int__int__int__int__Int32List", (args, methodResult) -> {
                // args
                // jsonable arg
                int var0 = (int) ((Map<String, Object>) args).get("var0");
                // jsonable arg
                int var2 = (int) ((Map<String, Object>) args).get("var2");
                // jsonable arg
                int var3 = (int) ((Map<String, Object>) args).get("var3");
                // jsonable arg
                int var4 = (int) ((Map<String, Object>) args).get("var4");
                // jsonable arg
                int var5 = (int) ((Map<String, Object>) args).get("var5");
                // jsonable arg
                int var6 = (int) ((Map<String, Object>) args).get("var6");
                // jsonable arg
                int[] var7 = (int[]) ((Map<String, Object>) args).get("var7");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.faceunity.wrapper.faceunity::fuDualInputToTexture(" + var0 + var2 + var3 + var4 + var5 + var6 + var7 + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = com.faceunity.wrapper.faceunity.fuDualInputToTexture(var0, var2, var3, var4, var5, var6, var7);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuDualInputToTextureMasked", (args, methodResult) -> {
                // args
                // jsonable arg
                byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                int var2 = (int) ((Map<String, Object>) args).get("var2");
                // jsonable arg
                int var3 = (int) ((Map<String, Object>) args).get("var3");
                // jsonable arg
                int var4 = (int) ((Map<String, Object>) args).get("var4");
                // jsonable arg
                int var5 = (int) ((Map<String, Object>) args).get("var5");
                // jsonable arg
                int[] var6 = (int[]) ((Map<String, Object>) args).get("var6");
                // jsonable arg
                int[] var7 = (int[]) ((Map<String, Object>) args).get("var7");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.faceunity.wrapper.faceunity::fuDualInputToTextureMasked(" + var0 + var1 + var2 + var3 + var4 + var5 + var6 + var7 + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = com.faceunity.wrapper.faceunity.fuDualInputToTextureMasked(var0, var1, var2, var3, var4, var5, var6, var7);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuDualInputToTexture__Uint8List__int__int__int__int__int__Int32List__int__int__Uint8List", (args, methodResult) -> {
                // args
                // jsonable arg
                byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                int var2 = (int) ((Map<String, Object>) args).get("var2");
                // jsonable arg
                int var3 = (int) ((Map<String, Object>) args).get("var3");
                // jsonable arg
                int var4 = (int) ((Map<String, Object>) args).get("var4");
                // jsonable arg
                int var5 = (int) ((Map<String, Object>) args).get("var5");
                // jsonable arg
                int[] var6 = (int[]) ((Map<String, Object>) args).get("var6");
                // jsonable arg
                int var7 = (int) ((Map<String, Object>) args).get("var7");
                // jsonable arg
                int var8 = (int) ((Map<String, Object>) args).get("var8");
                // jsonable arg
                byte[] var9 = (byte[]) ((Map<String, Object>) args).get("var9");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.faceunity.wrapper.faceunity::fuDualInputToTexture(" + var0 + var1 + var2 + var3 + var4 + var5 + var6 + var7 + var8 + var9 + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = com.faceunity.wrapper.faceunity.fuDualInputToTexture(var0, var1, var2, var3, var4, var5, var6, var7, var8, var9);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuSetDefaultOrientation", (args, methodResult) -> {
                // args
                // jsonable arg
                int var0 = (int) ((Map<String, Object>) args).get("var0");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.faceunity.wrapper.faceunity::fuSetDefaultOrientation(" + var0 + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = com.faceunity.wrapper.faceunity.fuSetDefaultOrientation(var0);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuRenderToTexture__int__int__int__int__Int32List__int", (args, methodResult) -> {
                // args
                // jsonable arg
                int var0 = (int) ((Map<String, Object>) args).get("var0");
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                int var2 = (int) ((Map<String, Object>) args).get("var2");
                // jsonable arg
                int var3 = (int) ((Map<String, Object>) args).get("var3");
                // jsonable arg
                int[] var4 = (int[]) ((Map<String, Object>) args).get("var4");
                // jsonable arg
                int var5 = (int) ((Map<String, Object>) args).get("var5");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.faceunity.wrapper.faceunity::fuRenderToTexture(" + var0 + var1 + var2 + var3 + var4 + var5 + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = com.faceunity.wrapper.faceunity.fuRenderToTexture(var0, var1, var2, var3, var4, var5);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuRenderToTexture__int__int__int__int__Int32List__int__Uint8List__int__int", (args, methodResult) -> {
                // args
                // jsonable arg
                int var0 = (int) ((Map<String, Object>) args).get("var0");
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                int var2 = (int) ((Map<String, Object>) args).get("var2");
                // jsonable arg
                int var3 = (int) ((Map<String, Object>) args).get("var3");
                // jsonable arg
                int[] var4 = (int[]) ((Map<String, Object>) args).get("var4");
                // jsonable arg
                int var5 = (int) ((Map<String, Object>) args).get("var5");
                // jsonable arg
                byte[] var6 = (byte[]) ((Map<String, Object>) args).get("var6");
                // jsonable arg
                int var7 = (int) ((Map<String, Object>) args).get("var7");
                // jsonable arg
                int var8 = (int) ((Map<String, Object>) args).get("var8");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.faceunity.wrapper.faceunity::fuRenderToTexture(" + var0 + var1 + var2 + var3 + var4 + var5 + var6 + var7 + var8 + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = com.faceunity.wrapper.faceunity.fuRenderToTexture(var0, var1, var2, var3, var4, var5, var6, var7, var8);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuCreateEGLContext", (args, methodResult) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.faceunity.wrapper.faceunity::fuCreateEGLContext(" + "" + ")");
                }
            
                // invoke native method
                try {
                    com.faceunity.wrapper.faceunity.fuCreateEGLContext();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuReleaseEGLContext", (args, methodResult) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.faceunity.wrapper.faceunity::fuReleaseEGLContext(" + "" + ")");
                }
            
                // invoke native method
                try {
                    com.faceunity.wrapper.faceunity.fuReleaseEGLContext();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuDisableBoostWithEGLImage", (args, methodResult) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.faceunity.wrapper.faceunity::fuDisableBoostWithEGLImage(" + "" + ")");
                }
            
                // invoke native method
                try {
                    com.faceunity.wrapper.faceunity.fuDisableBoostWithEGLImage();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuGetFaceInfo", (args, methodResult) -> {
                // args
                // jsonable arg
                int var0 = (int) ((Map<String, Object>) args).get("var0");
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                float[] var2 = (float[]) ((Map<String, Object>) args).get("var2");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.faceunity.wrapper.faceunity::fuGetFaceInfo(" + var0 + var1 + var2 + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = com.faceunity.wrapper.faceunity.fuGetFaceInfo(var0, var1, var2);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuBeautifyImage", (args, methodResult) -> {
                // args
                // jsonable arg
                int var0 = (int) ((Map<String, Object>) args).get("var0");
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                int var2 = (int) ((Map<String, Object>) args).get("var2");
                // jsonable arg
                int var3 = (int) ((Map<String, Object>) args).get("var3");
                // jsonable arg
                int var4 = (int) ((Map<String, Object>) args).get("var4");
                // jsonable arg
                int[] var5 = (int[]) ((Map<String, Object>) args).get("var5");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.faceunity.wrapper.faceunity::fuBeautifyImage(" + var0 + var1 + var2 + var3 + var4 + var5 + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = com.faceunity.wrapper.faceunity.fuBeautifyImage(var0, var1, var2, var3, var4, var5);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuTrackFace", (args, methodResult) -> {
                // args
                // jsonable arg
                byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                int var2 = (int) ((Map<String, Object>) args).get("var2");
                // jsonable arg
                int var3 = (int) ((Map<String, Object>) args).get("var3");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.faceunity.wrapper.faceunity::fuTrackFace(" + var0 + var1 + var2 + var3 + ")");
                }
            
                // invoke native method
                try {
                    com.faceunity.wrapper.faceunity.fuTrackFace(var0, var1, var2, var3);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuAvatarToTexture", (args, methodResult) -> {
                // args
                // jsonable arg
                float[] var0 = (float[]) ((Map<String, Object>) args).get("var0");
                // jsonable arg
                float[] var1 = (float[]) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                float[] var2 = (float[]) ((Map<String, Object>) args).get("var2");
                // jsonable arg
                float[] var3 = (float[]) ((Map<String, Object>) args).get("var3");
                // jsonable arg
                int var4 = (int) ((Map<String, Object>) args).get("var4");
                // jsonable arg
                int var5 = (int) ((Map<String, Object>) args).get("var5");
                // jsonable arg
                int var6 = (int) ((Map<String, Object>) args).get("var6");
                // jsonable arg
                int var7 = (int) ((Map<String, Object>) args).get("var7");
                // jsonable arg
                int[] var8 = (int[]) ((Map<String, Object>) args).get("var8");
                // jsonable arg
                int var9 = (int) ((Map<String, Object>) args).get("var9");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.faceunity.wrapper.faceunity::fuAvatarToTexture(" + var0 + var1 + var2 + var3 + var4 + var5 + var6 + var7 + var8 + var9 + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = com.faceunity.wrapper.faceunity.fuAvatarToTexture(var0, var1, var2, var3, var4, var5, var6, var7, var8, var9);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuAvatarToTextureWithTrans", (args, methodResult) -> {
                // args
                // jsonable arg
                float[] var0 = (float[]) ((Map<String, Object>) args).get("var0");
                // jsonable arg
                float[] var1 = (float[]) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                float[] var2 = (float[]) ((Map<String, Object>) args).get("var2");
                // jsonable arg
                float[] var3 = (float[]) ((Map<String, Object>) args).get("var3");
                // jsonable arg
                float[] var4 = (float[]) ((Map<String, Object>) args).get("var4");
                // jsonable arg
                int var5 = (int) ((Map<String, Object>) args).get("var5");
                // jsonable arg
                int var6 = (int) ((Map<String, Object>) args).get("var6");
                // jsonable arg
                int var7 = (int) ((Map<String, Object>) args).get("var7");
                // jsonable arg
                int var8 = (int) ((Map<String, Object>) args).get("var8");
                // jsonable arg
                int[] var9 = (int[]) ((Map<String, Object>) args).get("var9");
                // jsonable arg
                int var10 = (int) ((Map<String, Object>) args).get("var10");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.faceunity.wrapper.faceunity::fuAvatarToTextureWithTrans(" + var0 + var1 + var2 + var3 + var4 + var5 + var6 + var7 + var8 + var9 + var10 + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = com.faceunity.wrapper.faceunity.fuAvatarToTextureWithTrans(var0, var1, var2, var3, var4, var5, var6, var7, var8, var9, var10);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuAvatarToImage", (args, methodResult) -> {
                // args
                // jsonable arg
                float[] var0 = (float[]) ((Map<String, Object>) args).get("var0");
                // jsonable arg
                float[] var1 = (float[]) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                float[] var2 = (float[]) ((Map<String, Object>) args).get("var2");
                // jsonable arg
                float[] var3 = (float[]) ((Map<String, Object>) args).get("var3");
                // jsonable arg
                int var4 = (int) ((Map<String, Object>) args).get("var4");
                // jsonable arg
                int var5 = (int) ((Map<String, Object>) args).get("var5");
                // jsonable arg
                int var6 = (int) ((Map<String, Object>) args).get("var6");
                // jsonable arg
                int var7 = (int) ((Map<String, Object>) args).get("var7");
                // jsonable arg
                int[] var8 = (int[]) ((Map<String, Object>) args).get("var8");
                // jsonable arg
                int var9 = (int) ((Map<String, Object>) args).get("var9");
                // jsonable arg
                int var10 = (int) ((Map<String, Object>) args).get("var10");
                // jsonable arg
                int var11 = (int) ((Map<String, Object>) args).get("var11");
                // jsonable arg
                byte[] var12 = (byte[]) ((Map<String, Object>) args).get("var12");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.faceunity.wrapper.faceunity::fuAvatarToImage(" + var0 + var1 + var2 + var3 + var4 + var5 + var6 + var7 + var8 + var9 + var10 + var11 + var12 + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = com.faceunity.wrapper.faceunity.fuAvatarToImage(var0, var1, var2, var3, var4, var5, var6, var7, var8, var9, var10, var11, var12);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuAvatarBindItems", (args, methodResult) -> {
                // args
                // jsonable arg
                int var0 = (int) ((Map<String, Object>) args).get("var0");
                // jsonable arg
                int[] var1 = (int[]) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                int[] var2 = (int[]) ((Map<String, Object>) args).get("var2");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.faceunity.wrapper.faceunity::fuAvatarBindItems(" + var0 + var1 + var2 + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = com.faceunity.wrapper.faceunity.fuAvatarBindItems(var0, var1, var2);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuAvatarUnbindItems", (args, methodResult) -> {
                // args
                // jsonable arg
                int var0 = (int) ((Map<String, Object>) args).get("var0");
                // jsonable arg
                int[] var1 = (int[]) ((Map<String, Object>) args).get("var1");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.faceunity.wrapper.faceunity::fuAvatarUnbindItems(" + var0 + var1 + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = com.faceunity.wrapper.faceunity.fuAvatarUnbindItems(var0, var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuGetVersion", (args, methodResult) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.faceunity.wrapper.faceunity::fuGetVersion(" + "" + ")");
                }
            
                // invoke native method
                String result;
                try {
                    result = com.faceunity.wrapper.faceunity.fuGetVersion();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuSetQualityTradeoff", (args, methodResult) -> {
                // args
                // jsonable arg
                Double var0 = (Double) ((Map<String, Object>) args).get("var0");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.faceunity.wrapper.faceunity::fuSetQualityTradeoff(" + var0 + ")");
                }
            
                // invoke native method
                try {
                    com.faceunity.wrapper.faceunity.fuSetQualityTradeoff(new Double(var0).floatValue());
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuBindItems", (args, methodResult) -> {
                // args
                // jsonable arg
                int var0 = (int) ((Map<String, Object>) args).get("var0");
                // jsonable arg
                int[] var1 = (int[]) ((Map<String, Object>) args).get("var1");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.faceunity.wrapper.faceunity::fuBindItems(" + var0 + var1 + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = com.faceunity.wrapper.faceunity.fuBindItems(var0, var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuUnbindAllItems", (args, methodResult) -> {
                // args
                // jsonable arg
                int var0 = (int) ((Map<String, Object>) args).get("var0");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.faceunity.wrapper.faceunity::fuUnbindAllItems(" + var0 + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = com.faceunity.wrapper.faceunity.fuUnbindAllItems(var0);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuClearReadbackRelated", (args, methodResult) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.faceunity.wrapper.faceunity::fuClearReadbackRelated(" + "" + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = com.faceunity.wrapper.faceunity.fuClearReadbackRelated();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuGetSystemError", (args, methodResult) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.faceunity.wrapper.faceunity::fuGetSystemError(" + "" + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = com.faceunity.wrapper.faceunity.fuGetSystemError();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuGetSystemErrorString", (args, methodResult) -> {
                // args
                // jsonable arg
                int var0 = (int) ((Map<String, Object>) args).get("var0");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.faceunity.wrapper.faceunity::fuGetSystemErrorString(" + var0 + ")");
                }
            
                // invoke native method
                String result;
                try {
                    result = com.faceunity.wrapper.faceunity.fuGetSystemErrorString(var0);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuCheckDebugItem", (args, methodResult) -> {
                // args
                // jsonable arg
                byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.faceunity.wrapper.faceunity::fuCheckDebugItem(" + var0 + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = com.faceunity.wrapper.faceunity.fuCheckDebugItem(var0);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuLoadExtendedARData", (args, methodResult) -> {
                // args
                // jsonable arg
                byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.faceunity.wrapper.faceunity::fuLoadExtendedARData(" + var0 + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = com.faceunity.wrapper.faceunity.fuLoadExtendedARData(var0);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuSetExpressionCalibration", (args, methodResult) -> {
                // args
                // jsonable arg
                int var0 = (int) ((Map<String, Object>) args).get("var0");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.faceunity.wrapper.faceunity::fuSetExpressionCalibration(" + var0 + ")");
                }
            
                // invoke native method
                try {
                    com.faceunity.wrapper.faceunity.fuSetExpressionCalibration(var0);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuLoadAnimModel", (args, methodResult) -> {
                // args
                // jsonable arg
                byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.faceunity.wrapper.faceunity::fuLoadAnimModel(" + var0 + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = com.faceunity.wrapper.faceunity.fuLoadAnimModel(var0);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuSetStrictTracking", (args, methodResult) -> {
                // args
                // jsonable arg
                int var0 = (int) ((Map<String, Object>) args).get("var0");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.faceunity.wrapper.faceunity::fuSetStrictTracking(" + var0 + ")");
                }
            
                // invoke native method
                try {
                    com.faceunity.wrapper.faceunity.fuSetStrictTracking(var0);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuSetDefaultRotationMode", (args, methodResult) -> {
                // args
                // jsonable arg
                int var0 = (int) ((Map<String, Object>) args).get("var0");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.faceunity.wrapper.faceunity::fuSetDefaultRotationMode(" + var0 + ")");
                }
            
                // invoke native method
                try {
                    com.faceunity.wrapper.faceunity.fuSetDefaultRotationMode(var0);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuGetModuleCode", (args, methodResult) -> {
                // args
                // jsonable arg
                int var0 = (int) ((Map<String, Object>) args).get("var0");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.faceunity.wrapper.faceunity::fuGetModuleCode(" + var0 + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = com.faceunity.wrapper.faceunity.fuGetModuleCode(var0);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuHasFace", (args, methodResult) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.faceunity.wrapper.faceunity::fuHasFace(" + "" + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = com.faceunity.wrapper.faceunity.fuHasFace();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuSetFocalLengthScale", (args, methodResult) -> {
                // args
                // jsonable arg
                Double var0 = (Double) ((Map<String, Object>) args).get("var0");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.faceunity.wrapper.faceunity::fuSetFocalLengthScale(" + var0 + ")");
                }
            
                // invoke native method
                try {
                    com.faceunity.wrapper.faceunity.fuSetFocalLengthScale(new Double(var0).floatValue());
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuSetAsyncTrackFace", (args, methodResult) -> {
                // args
                // jsonable arg
                int var0 = (int) ((Map<String, Object>) args).get("var0");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.faceunity.wrapper.faceunity::fuSetAsyncTrackFace(" + var0 + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = com.faceunity.wrapper.faceunity.fuSetAsyncTrackFace(var0);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuSetup_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    byte[] var1 = (byte[]) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte[] var2 = (byte[]) ((Map<String, Object>) args).get("var2");
            
                    // ref
            
            
                    // invoke native method
                    int result;
                    try {
                        result = com.faceunity.wrapper.faceunity.fuSetup(var0, var1, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuCreateItemFromPackage_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
            
                    // ref
            
            
                    // invoke native method
                    int result;
                    try {
                        result = com.faceunity.wrapper.faceunity.fuCreateItemFromPackage(var0);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuDestroyItem_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var0 = (int) ((Map<String, Object>) args).get("var0");
            
                    // ref
            
            
                    // invoke native method
                    try {
                        com.faceunity.wrapper.faceunity.fuDestroyItem(var0);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuDestroyAllItems_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
            
            
                    // invoke native method
                    try {
                        com.faceunity.wrapper.faceunity.fuDestroyAllItems();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuRenderNV21ImageToTexture_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int[] var4 = (int[]) ((Map<String, Object>) args).get("var4");
            
                    // ref
            
            
                    // invoke native method
                    int result;
                    try {
                        result = com.faceunity.wrapper.faceunity.fuRenderNV21ImageToTexture(var0, var1, var2, var3, var4);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuRenderI420ImageToTexture_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int[] var4 = (int[]) ((Map<String, Object>) args).get("var4");
            
                    // ref
            
            
                    // invoke native method
                    int result;
                    try {
                        result = com.faceunity.wrapper.faceunity.fuRenderI420ImageToTexture(var0, var1, var2, var3, var4);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuDone_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
            
            
                    // invoke native method
                    try {
                        com.faceunity.wrapper.faceunity.fuDone();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuOnDeviceLost_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
            
            
                    // invoke native method
                    try {
                        com.faceunity.wrapper.faceunity.fuOnDeviceLost();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuOnCameraChange_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
            
            
                    // invoke native method
                    try {
                        com.faceunity.wrapper.faceunity.fuOnCameraChange();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuItemSetParam__int__String__double_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var0 = (int) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    double var2 = (double) ((Map<String, Object>) args).get("var2");
            
                    // ref
            
            
                    // invoke native method
                    int result;
                    try {
                        result = com.faceunity.wrapper.faceunity.fuItemSetParam(var0, var1, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuItemSetParam__int__String__Float64List_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var0 = (int) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    double[] var2 = (double[]) ((Map<String, Object>) args).get("var2");
            
                    // ref
            
            
                    // invoke native method
                    int result;
                    try {
                        result = com.faceunity.wrapper.faceunity.fuItemSetParam(var0, var1, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuItemSetParam__int__String__String_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var0 = (int) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    String var2 = (String) ((Map<String, Object>) args).get("var2");
            
                    // ref
            
            
                    // invoke native method
                    int result;
                    try {
                        result = com.faceunity.wrapper.faceunity.fuItemSetParam(var0, var1, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuItemSetParamu8v_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var0 = (int) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte[] var2 = (byte[]) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
            
                    // ref
            
            
                    // invoke native method
                    int result;
                    try {
                        result = com.faceunity.wrapper.faceunity.fuItemSetParamu8v(var0, var1, var2, var3);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuIsTracking_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
            
            
                    // invoke native method
                    int result;
                    try {
                        result = com.faceunity.wrapper.faceunity.fuIsTracking();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuItemGetParam_batch", (argsBatch, methodResult) -> {
                List<Double> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var0 = (int) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                    // ref
            
            
                    // invoke native method
                    double result;
                    try {
                        result = com.faceunity.wrapper.faceunity.fuItemGetParam(var0, var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    double jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuItemGetParamString_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var0 = (int) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                    // ref
            
            
                    // invoke native method
                    String result;
                    try {
                        result = com.faceunity.wrapper.faceunity.fuItemGetParamString(var0, var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuItemGetParamu8v_batch", (argsBatch, methodResult) -> {
                List<byte[]> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var0 = (int) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                    // ref
            
            
                    // invoke native method
                    byte[] result;
                    try {
                        result = com.faceunity.wrapper.faceunity.fuItemGetParamu8v(var0, var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    byte[] jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuSetMaxFaces_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var0 = (int) ((Map<String, Object>) args).get("var0");
            
                    // ref
            
            
                    // invoke native method
                    int result;
                    try {
                        result = com.faceunity.wrapper.faceunity.fuSetMaxFaces(var0);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuRenderToNV21Image__Uint8List__int__int__int__Int32List_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int[] var4 = (int[]) ((Map<String, Object>) args).get("var4");
            
                    // ref
            
            
                    // invoke native method
                    int result;
                    try {
                        result = com.faceunity.wrapper.faceunity.fuRenderToNV21Image(var0, var1, var2, var3, var4);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuRenderToNV21ImageMasked_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int[] var4 = (int[]) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int[] var5 = (int[]) ((Map<String, Object>) args).get("var5");
            
                    // ref
            
            
                    // invoke native method
                    int result;
                    try {
                        result = com.faceunity.wrapper.faceunity.fuRenderToNV21ImageMasked(var0, var1, var2, var3, var4, var5);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuRenderToNV21Image__Uint8List__int__int__int__Int32List__int_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int[] var4 = (int[]) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int var5 = (int) ((Map<String, Object>) args).get("var5");
            
                    // ref
            
            
                    // invoke native method
                    int result;
                    try {
                        result = com.faceunity.wrapper.faceunity.fuRenderToNV21Image(var0, var1, var2, var3, var4, var5);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuRenderToNV21Image__int__int__int__int__Int32List__int_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var0 = (int) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int var4 = (int) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int[] var5 = (int[]) ((Map<String, Object>) args).get("var5");
                    // jsonable arg
                    int var6 = (int) ((Map<String, Object>) args).get("var6");
            
                    // ref
            
            
                    // invoke native method
                    int result;
                    try {
                        result = com.faceunity.wrapper.faceunity.fuRenderToNV21Image(var0, var2, var3, var4, var5, var6);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuRenderToNV21Image__Uint8List__int__int__int__Int32List__int__int__int__Uint8List_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int[] var4 = (int[]) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int var5 = (int) ((Map<String, Object>) args).get("var5");
                    // jsonable arg
                    int var6 = (int) ((Map<String, Object>) args).get("var6");
                    // jsonable arg
                    int var7 = (int) ((Map<String, Object>) args).get("var7");
                    // jsonable arg
                    byte[] var8 = (byte[]) ((Map<String, Object>) args).get("var8");
            
                    // ref
            
            
                    // invoke native method
                    int result;
                    try {
                        result = com.faceunity.wrapper.faceunity.fuRenderToNV21Image(var0, var1, var2, var3, var4, var5, var6, var7, var8);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuRenderToI420Image__Uint8List__int__int__int__Int32List_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int[] var4 = (int[]) ((Map<String, Object>) args).get("var4");
            
                    // ref
            
            
                    // invoke native method
                    int result;
                    try {
                        result = com.faceunity.wrapper.faceunity.fuRenderToI420Image(var0, var1, var2, var3, var4);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuRenderToI420ImageMasked_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int[] var4 = (int[]) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int[] var5 = (int[]) ((Map<String, Object>) args).get("var5");
            
                    // ref
            
            
                    // invoke native method
                    int result;
                    try {
                        result = com.faceunity.wrapper.faceunity.fuRenderToI420ImageMasked(var0, var1, var2, var3, var4, var5);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuRenderToI420Image__Uint8List__int__int__int__Int32List__int_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int[] var4 = (int[]) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int var5 = (int) ((Map<String, Object>) args).get("var5");
            
                    // ref
            
            
                    // invoke native method
                    int result;
                    try {
                        result = com.faceunity.wrapper.faceunity.fuRenderToI420Image(var0, var1, var2, var3, var4, var5);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuRenderToI420Image__int__int__int__int__Int32List__int_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var0 = (int) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int var4 = (int) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int[] var5 = (int[]) ((Map<String, Object>) args).get("var5");
                    // jsonable arg
                    int var6 = (int) ((Map<String, Object>) args).get("var6");
            
                    // ref
            
            
                    // invoke native method
                    int result;
                    try {
                        result = com.faceunity.wrapper.faceunity.fuRenderToI420Image(var0, var2, var3, var4, var5, var6);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuRenderToI420Image__Uint8List__int__int__int__Int32List__int__int__int__Uint8List_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int[] var4 = (int[]) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int var5 = (int) ((Map<String, Object>) args).get("var5");
                    // jsonable arg
                    int var6 = (int) ((Map<String, Object>) args).get("var6");
                    // jsonable arg
                    int var7 = (int) ((Map<String, Object>) args).get("var7");
                    // jsonable arg
                    byte[] var8 = (byte[]) ((Map<String, Object>) args).get("var8");
            
                    // ref
            
            
                    // invoke native method
                    int result;
                    try {
                        result = com.faceunity.wrapper.faceunity.fuRenderToI420Image(var0, var1, var2, var3, var4, var5, var6, var7, var8);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuRenderToRgbaImage__Uint8List__int__int__int__Int32List_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int[] var4 = (int[]) ((Map<String, Object>) args).get("var4");
            
                    // ref
            
            
                    // invoke native method
                    int result;
                    try {
                        result = com.faceunity.wrapper.faceunity.fuRenderToRgbaImage(var0, var1, var2, var3, var4);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuRenderToRgbaImage__Uint8List__int__int__int__Int32List__int_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int[] var4 = (int[]) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int var5 = (int) ((Map<String, Object>) args).get("var5");
            
                    // ref
            
            
                    // invoke native method
                    int result;
                    try {
                        result = com.faceunity.wrapper.faceunity.fuRenderToRgbaImage(var0, var1, var2, var3, var4, var5);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuRenderToRgbaImage__int__int__int__int__Int32List__int_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var0 = (int) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int var4 = (int) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int[] var5 = (int[]) ((Map<String, Object>) args).get("var5");
                    // jsonable arg
                    int var6 = (int) ((Map<String, Object>) args).get("var6");
            
                    // ref
            
            
                    // invoke native method
                    int result;
                    try {
                        result = com.faceunity.wrapper.faceunity.fuRenderToRgbaImage(var0, var2, var3, var4, var5, var6);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuRenderToRgbaImage__Uint8List__int__int__int__Int32List__int__int__int__Uint8List_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int[] var4 = (int[]) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int var5 = (int) ((Map<String, Object>) args).get("var5");
                    // jsonable arg
                    int var6 = (int) ((Map<String, Object>) args).get("var6");
                    // jsonable arg
                    int var7 = (int) ((Map<String, Object>) args).get("var7");
                    // jsonable arg
                    byte[] var8 = (byte[]) ((Map<String, Object>) args).get("var8");
            
                    // ref
            
            
                    // invoke native method
                    int result;
                    try {
                        result = com.faceunity.wrapper.faceunity.fuRenderToRgbaImage(var0, var1, var2, var3, var4, var5, var6, var7, var8);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuRenderToYUVImage__Uint8List__Uint8List__Uint8List__int__int__int__int__int__int__Int32List_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    byte[] var1 = (byte[]) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte[] var2 = (byte[]) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int var4 = (int) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int var5 = (int) ((Map<String, Object>) args).get("var5");
                    // jsonable arg
                    int var6 = (int) ((Map<String, Object>) args).get("var6");
                    // jsonable arg
                    int var7 = (int) ((Map<String, Object>) args).get("var7");
                    // jsonable arg
                    int var8 = (int) ((Map<String, Object>) args).get("var8");
                    // jsonable arg
                    int[] var9 = (int[]) ((Map<String, Object>) args).get("var9");
            
                    // ref
            
            
                    // invoke native method
                    int result;
                    try {
                        result = com.faceunity.wrapper.faceunity.fuRenderToYUVImage(var0, var1, var2, var3, var4, var5, var6, var7, var8, var9);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuRenderToYUVImage__Uint8List__Uint8List__Uint8List__int__int__int__int__int__int__Int32List__int_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    byte[] var1 = (byte[]) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte[] var2 = (byte[]) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int var4 = (int) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int var5 = (int) ((Map<String, Object>) args).get("var5");
                    // jsonable arg
                    int var6 = (int) ((Map<String, Object>) args).get("var6");
                    // jsonable arg
                    int var7 = (int) ((Map<String, Object>) args).get("var7");
                    // jsonable arg
                    int var8 = (int) ((Map<String, Object>) args).get("var8");
                    // jsonable arg
                    int[] var9 = (int[]) ((Map<String, Object>) args).get("var9");
                    // jsonable arg
                    int var10 = (int) ((Map<String, Object>) args).get("var10");
            
                    // ref
            
            
                    // invoke native method
                    int result;
                    try {
                        result = com.faceunity.wrapper.faceunity.fuRenderToYUVImage(var0, var1, var2, var3, var4, var5, var6, var7, var8, var9, var10);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuRenderToYUVImage__int__int__int__int__int__int__int__int__int__Int32List_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var0 = (int) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var4 = (int) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int var6 = (int) ((Map<String, Object>) args).get("var6");
                    // jsonable arg
                    int var7 = (int) ((Map<String, Object>) args).get("var7");
                    // jsonable arg
                    int var8 = (int) ((Map<String, Object>) args).get("var8");
                    // jsonable arg
                    int var9 = (int) ((Map<String, Object>) args).get("var9");
                    // jsonable arg
                    int var10 = (int) ((Map<String, Object>) args).get("var10");
                    // jsonable arg
                    int var11 = (int) ((Map<String, Object>) args).get("var11");
                    // jsonable arg
                    int[] var12 = (int[]) ((Map<String, Object>) args).get("var12");
            
                    // ref
            
            
                    // invoke native method
                    int result;
                    try {
                        result = com.faceunity.wrapper.faceunity.fuRenderToYUVImage(var0, var2, var4, var6, var7, var8, var9, var10, var11, var12);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuDualInputToTexture__Uint8List__int__int__int__int__int__Int32List_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int var4 = (int) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int var5 = (int) ((Map<String, Object>) args).get("var5");
                    // jsonable arg
                    int[] var6 = (int[]) ((Map<String, Object>) args).get("var6");
            
                    // ref
            
            
                    // invoke native method
                    int result;
                    try {
                        result = com.faceunity.wrapper.faceunity.fuDualInputToTexture(var0, var1, var2, var3, var4, var5, var6);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuDualInputToTexture__int__int__int__int__int__int__Int32List_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var0 = (int) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int var4 = (int) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int var5 = (int) ((Map<String, Object>) args).get("var5");
                    // jsonable arg
                    int var6 = (int) ((Map<String, Object>) args).get("var6");
                    // jsonable arg
                    int[] var7 = (int[]) ((Map<String, Object>) args).get("var7");
            
                    // ref
            
            
                    // invoke native method
                    int result;
                    try {
                        result = com.faceunity.wrapper.faceunity.fuDualInputToTexture(var0, var2, var3, var4, var5, var6, var7);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuDualInputToTextureMasked_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int var4 = (int) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int var5 = (int) ((Map<String, Object>) args).get("var5");
                    // jsonable arg
                    int[] var6 = (int[]) ((Map<String, Object>) args).get("var6");
                    // jsonable arg
                    int[] var7 = (int[]) ((Map<String, Object>) args).get("var7");
            
                    // ref
            
            
                    // invoke native method
                    int result;
                    try {
                        result = com.faceunity.wrapper.faceunity.fuDualInputToTextureMasked(var0, var1, var2, var3, var4, var5, var6, var7);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuDualInputToTexture__Uint8List__int__int__int__int__int__Int32List__int__int__Uint8List_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    byte[] var0 = (byte[]) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int var4 = (int) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int var5 = (int) ((Map<String, Object>) args).get("var5");
                    // jsonable arg
                    int[] var6 = (int[]) ((Map<String, Object>) args).get("var6");
                    // jsonable arg
                    int var7 = (int) ((Map<String, Object>) args).get("var7");
                    // jsonable arg
                    int var8 = (int) ((Map<String, Object>) args).get("var8");
                    // jsonable arg
                    byte[] var9 = (byte[]) ((Map<String, Object>) args).get("var9");
            
                    // ref
            
            
                    // invoke native method
                    int result;
                    try {
                        result = com.faceunity.wrapper.faceunity.fuDualInputToTexture(var0, var1, var2, var3, var4, var5, var6, var7, var8, var9);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuSetDefaultOrientation_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var0 = (int) ((Map<String, Object>) args).get("var0");
            
                    // ref
            
            
                    // invoke native method
                    int result;
                    try {
                        result = com.faceunity.wrapper.faceunity.fuSetDefaultOrientation(var0);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuRenderToTexture__int__int__int__int__Int32List__int_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var0 = (int) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int[] var4 = (int[]) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int var5 = (int) ((Map<String, Object>) args).get("var5");
            
                    // ref
            
            
                    // invoke native method
                    int result;
                    try {
                        result = com.faceunity.wrapper.faceunity.fuRenderToTexture(var0, var1, var2, var3, var4, var5);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuRenderToTexture__int__int__int__int__Int32List__int__Uint8List__int__int_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var0 = (int) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int[] var4 = (int[]) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int var5 = (int) ((Map<String, Object>) args).get("var5");
                    // jsonable arg
                    byte[] var6 = (byte[]) ((Map<String, Object>) args).get("var6");
                    // jsonable arg
                    int var7 = (int) ((Map<String, Object>) args).get("var7");
                    // jsonable arg
                    int var8 = (int) ((Map<String, Object>) args).get("var8");
            
                    // ref
            
            
                    // invoke native method
                    int result;
                    try {
                        result = com.faceunity.wrapper.faceunity.fuRenderToTexture(var0, var1, var2, var3, var4, var5, var6, var7, var8);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuCreateEGLContext_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
            
            
                    // invoke native method
                    try {
                        com.faceunity.wrapper.faceunity.fuCreateEGLContext();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuReleaseEGLContext_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
            
            
                    // invoke native method
                    try {
                        com.faceunity.wrapper.faceunity.fuReleaseEGLContext();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuDisableBoostWithEGLImage_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
            
            
                    // invoke native method
                    try {
                        com.faceunity.wrapper.faceunity.fuDisableBoostWithEGLImage();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.faceunity.wrapper.faceunity::fuGetFaceInfo_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var0 = (int) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    float[] var2 = (float[]) ((Map<String, Object>) args).get("var2");
            
                    // ref
            
            
                    // invoke native method
                    int result;
                    try {
                        result = com.faceunity.wrapper.faceunity.fuGetFaceInfo(var0, var1, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
        }};
    }
}
