//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

#import "SubHandler0.h"

// Dart端一次方法调用所存在的栈, 只有当MethodChannel传递参数受限时, 再启用这个容器
extern NSMutableDictionary<NSString*, NSObject*>* STACK;
// Dart端随机存取对象的容器
extern NSMutableDictionary<NSNumber*, NSObject*>* HEAP;
// 日志打印开关
extern BOOL enableLog;

@implementation NamaFluttifyPlugin (SubHandler0)
- (NSDictionary<NSString*, Handler>*) getSubHandler0 {
    return @{
        @"FURotatedImage::init": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            FURotatedImage* ref = (FURotatedImage*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURotatedImage@%@::init()", args[@"refId"]);
            }
        
            // invoke native method
            FURotatedImage* result = [ref init];
        
            // result
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        @"FURenderer::shareRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::shareRenderer()");
            }
        
            // invoke native method
            FURenderer* result = [FURenderer shareRenderer];
        
            // result
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        @"FURenderer::setBackCurrentContext": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            FURenderer* ref = (FURenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer@%@::setBackCurrentContext()", args[@"refId"]);
            }
        
            // invoke native method
            [ref setBackCurrentContext ];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"FURenderer::setUpCurrentContext": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            FURenderer* ref = (FURenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer@%@::setUpCurrentContext()", args[@"refId"]);
            }
        
            // invoke native method
            [ref setUpCurrentContext ];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"FURenderer::setInputCameraMatrixFlip_yrotate_mode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            int flip_x = [args[@"flip_x"] intValue];
            // jsonable arg
            int flip_y = [args[@"flip_y"] intValue];
            // jsonable arg
            int rotate_mode = [args[@"rotate_mode"] intValue];
        
            // ref
            FURenderer* ref = (FURenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer@%@::setInputCameraMatrix(%@, %@, %@)", args[@"refId"], args[@"flip_x"], args[@"flip_y"], args[@"rotate_mode"]);
            }
        
            // invoke native method
            [ref setInputCameraMatrix : flip_x flip_y: flip_y rotate_mode: rotate_mode];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"FURenderer::setOutputResolutionH": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            int w = [args[@"w"] intValue];
            // jsonable arg
            int h = [args[@"h"] intValue];
        
            // ref
            FURenderer* ref = (FURenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer@%@::setOutputResolution(%@, %@)", args[@"refId"], args[@"w"], args[@"h"]);
            }
        
            // invoke native method
            [ref setOutputResolution : w h: h];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"FURenderer::onCameraChange": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::onCameraChange()");
            }
        
            // invoke native method
            [FURenderer onCameraChange];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"FURenderer::OnDeviceLost": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::OnDeviceLost()");
            }
        
            // invoke native method
            [FURenderer OnDeviceLost];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"FURenderer::itemWithContentsOfFile": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            NSString* path = (NSString*) args[@"path"];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::itemWithContentsOfFile(%@)", args[@"path"]);
            }
        
            // invoke native method
            int result = [FURenderer itemWithContentsOfFile: path];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"FURenderer::destroyItem": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            int item = [args[@"item"] intValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::destroyItem(%@)", args[@"item"]);
            }
        
            // invoke native method
            [FURenderer destroyItem: item];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"FURenderer::destroyAllItems": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::destroyAllItems()");
            }
        
            // invoke native method
            [FURenderer destroyAllItems];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"FURenderer::releaseAIModel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // enum arg
            FUAITYPE type = (FUAITYPE) [args[@"type"] integerValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::releaseAIModel(%@)", args[@"type"]);
            }
        
            // invoke native method
            int result = [FURenderer releaseAIModel: type];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"FURenderer::isAIModelLoaded": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // enum arg
            FUAITYPE type = (FUAITYPE) [args[@"type"] integerValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::isAIModelLoaded(%@)", args[@"type"]);
            }
        
            // invoke native method
            int result = [FURenderer isAIModelLoaded: type];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"FURenderer::itemSetParamWithNamevalue": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            int item = [args[@"item"] intValue];
            // jsonable arg
            NSString* name = (NSString*) args[@"name"];
            // ref arg
            id value = (id) HEAP[@([args[@"value"] integerValue])];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::itemSetParam(%@, %@, %@)", args[@"item"], args[@"name"], args[@"value"]);
            }
        
            // invoke native method
            int result = [FURenderer itemSetParam: item withName: name value: value];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"FURenderer::getDoubleParamFromItemWithName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            int item = [args[@"item"] intValue];
            // jsonable arg
            NSString* name = (NSString*) args[@"name"];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::getDoubleParamFromItem(%@, %@)", args[@"item"], args[@"name"]);
            }
        
            // invoke native method
            double result = [FURenderer getDoubleParamFromItem: item withName: name];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"FURenderer::getStringParamFromItemWithName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            int item = [args[@"item"] intValue];
            // jsonable arg
            NSString* name = (NSString*) args[@"name"];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::getStringParamFromItem(%@, %@)", args[@"item"], args[@"name"]);
            }
        
            // invoke native method
            NSString* result = [FURenderer getStringParamFromItem: item withName: name];
        
            // result
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        @"FURenderer::isTracking": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::isTracking()");
            }
        
            // invoke native method
            int result = [FURenderer isTracking];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"FURenderer::setMaxFaces": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            int maxFaces = [args[@"maxFaces"] intValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::setMaxFaces(%@)", args[@"maxFaces"]);
            }
        
            // invoke native method
            int result = [FURenderer setMaxFaces: maxFaces];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"FURenderer::getFaceIdentifier": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            int faceId = [args[@"faceId"] intValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::getFaceIdentifier(%@)", args[@"faceId"]);
            }
        
            // invoke native method
            int result = [FURenderer getFaceIdentifier: faceId];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"FURenderer::unbindAllItems": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            int item = [args[@"item"] intValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::unbindAllItems(%@)", args[@"item"]);
            }
        
            // invoke native method
            int result = [FURenderer unbindAllItems: item];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"FURenderer::getVersion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::getVersion()");
            }
        
            // invoke native method
            NSString* result = [FURenderer getVersion];
        
            // result
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        @"FURenderer::setExpressionCalibration": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            int expressionCalibration = [args[@"expressionCalibration"] intValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::setExpressionCalibration(%@)", args[@"expressionCalibration"]);
            }
        
            // invoke native method
            [FURenderer setExpressionCalibration: expressionCalibration];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"FURenderer::setFocalLengthScale": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            float scale = [args[@"scale"] floatValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::setFocalLengthScale(%@)", args[@"scale"]);
            }
        
            // invoke native method
            [FURenderer setFocalLengthScale: scale];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"FURenderer::setDefaultRotationMode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            int mode = [args[@"mode"] intValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::setDefaultRotationMode(%@)", args[@"mode"]);
            }
        
            // invoke native method
            [FURenderer setDefaultRotationMode: mode];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"FURenderer::setDeviceOrientation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            int orientation = [args[@"orientation"] intValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::setDeviceOrientation(%@)", args[@"orientation"]);
            }
        
            // invoke native method
            [FURenderer setDeviceOrientation: orientation];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"FURenderer::getCurrentRotationMode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::getCurrentRotationMode()");
            }
        
            // invoke native method
            int result = [FURenderer getCurrentRotationMode];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"FURenderer::setMultiSamples": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            int samples = [args[@"samples"] intValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::setMultiSamples(%@)", args[@"samples"]);
            }
        
            // invoke native method
            int result = [FURenderer setMultiSamples: samples];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"FURenderer::setAsyncTrackFaceEnable": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            int enable = [args[@"enable"] intValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::setAsyncTrackFaceEnable(%@)", args[@"enable"]);
            }
        
            // invoke native method
            [FURenderer setAsyncTrackFaceEnable: enable];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"FURenderer::setTongueTrackingEnable": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            int enable = [args[@"enable"] intValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::setTongueTrackingEnable(%@)", args[@"enable"]);
            }
        
            // invoke native method
            [FURenderer setTongueTrackingEnable: enable];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"FURenderer::namaLibDestroy": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::namaLibDestroy()");
            }
        
            // invoke native method
            [FURenderer namaLibDestroy];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"FURotatedImage::init_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
        
        
                // ref
                FURotatedImage* ref = (FURotatedImage*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                FURotatedImage* result = [ref init];
        
                // result
                // return a ref
                HEAP[@((result).hash)] = result;
                NSNumber* jsonableResult = @((result).hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::shareRenderer_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
        
        
                // ref
        
        
                // invoke native method
                FURenderer* result = [FURenderer shareRenderer];
        
                // result
                // return a ref
                HEAP[@((result).hash)] = result;
                NSNumber* jsonableResult = @((result).hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::setBackCurrentContext_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
        
        
                // ref
                FURenderer* ref = (FURenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref setBackCurrentContext ];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::setUpCurrentContext_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
        
        
                // ref
                FURenderer* ref = (FURenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref setUpCurrentContext ];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::setInputCameraMatrixFlip_yrotate_mode_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                int flip_x = [args[@"flip_x"] intValue];
                // jsonable arg
                int flip_y = [args[@"flip_y"] intValue];
                // jsonable arg
                int rotate_mode = [args[@"rotate_mode"] intValue];
        
                // ref
                FURenderer* ref = (FURenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref setInputCameraMatrix : flip_x flip_y: flip_y rotate_mode: rotate_mode];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::setOutputResolutionH_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                int w = [args[@"w"] intValue];
                // jsonable arg
                int h = [args[@"h"] intValue];
        
                // ref
                FURenderer* ref = (FURenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref setOutputResolution : w h: h];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::onCameraChange_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
        
        
                // ref
        
        
                // invoke native method
                [FURenderer onCameraChange];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::OnDeviceLost_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
        
        
                // ref
        
        
                // invoke native method
                [FURenderer OnDeviceLost];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::itemWithContentsOfFile_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                NSString* path = (NSString*) args[@"path"];
        
                // ref
        
        
                // invoke native method
                int result = [FURenderer itemWithContentsOfFile: path];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::destroyItem_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                int item = [args[@"item"] intValue];
        
                // ref
        
        
                // invoke native method
                [FURenderer destroyItem: item];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::destroyAllItems_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
        
        
                // ref
        
        
                // invoke native method
                [FURenderer destroyAllItems];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::releaseAIModel_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // enum arg
                FUAITYPE type = (FUAITYPE) [args[@"type"] integerValue];
        
                // ref
        
        
                // invoke native method
                int result = [FURenderer releaseAIModel: type];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::isAIModelLoaded_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // enum arg
                FUAITYPE type = (FUAITYPE) [args[@"type"] integerValue];
        
                // ref
        
        
                // invoke native method
                int result = [FURenderer isAIModelLoaded: type];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::itemSetParamWithNamevalue_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                int item = [args[@"item"] intValue];
                // jsonable arg
                NSString* name = (NSString*) args[@"name"];
                // ref arg
                id value = (id) HEAP[@([args[@"value"] integerValue])];
        
                // ref
        
        
                // invoke native method
                int result = [FURenderer itemSetParam: item withName: name value: value];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::getDoubleParamFromItemWithName_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                int item = [args[@"item"] intValue];
                // jsonable arg
                NSString* name = (NSString*) args[@"name"];
        
                // ref
        
        
                // invoke native method
                double result = [FURenderer getDoubleParamFromItem: item withName: name];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::getStringParamFromItemWithName_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                int item = [args[@"item"] intValue];
                // jsonable arg
                NSString* name = (NSString*) args[@"name"];
        
                // ref
        
        
                // invoke native method
                NSString* result = [FURenderer getStringParamFromItem: item withName: name];
        
                // result
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::isTracking_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
        
        
                // ref
        
        
                // invoke native method
                int result = [FURenderer isTracking];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::setMaxFaces_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                int maxFaces = [args[@"maxFaces"] intValue];
        
                // ref
        
        
                // invoke native method
                int result = [FURenderer setMaxFaces: maxFaces];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::getFaceIdentifier_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                int faceId = [args[@"faceId"] intValue];
        
                // ref
        
        
                // invoke native method
                int result = [FURenderer getFaceIdentifier: faceId];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::unbindAllItems_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                int item = [args[@"item"] intValue];
        
                // ref
        
        
                // invoke native method
                int result = [FURenderer unbindAllItems: item];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::getVersion_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
        
        
                // ref
        
        
                // invoke native method
                NSString* result = [FURenderer getVersion];
        
                // result
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::setExpressionCalibration_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                int expressionCalibration = [args[@"expressionCalibration"] intValue];
        
                // ref
        
        
                // invoke native method
                [FURenderer setExpressionCalibration: expressionCalibration];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::setFocalLengthScale_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                float scale = [args[@"scale"] floatValue];
        
                // ref
        
        
                // invoke native method
                [FURenderer setFocalLengthScale: scale];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::setDefaultRotationMode_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                int mode = [args[@"mode"] intValue];
        
                // ref
        
        
                // invoke native method
                [FURenderer setDefaultRotationMode: mode];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::setDeviceOrientation_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                int orientation = [args[@"orientation"] intValue];
        
                // ref
        
        
                // invoke native method
                [FURenderer setDeviceOrientation: orientation];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::getCurrentRotationMode_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
        
        
                // ref
        
        
                // invoke native method
                int result = [FURenderer getCurrentRotationMode];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::setMultiSamples_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                int samples = [args[@"samples"] intValue];
        
                // ref
        
        
                // invoke native method
                int result = [FURenderer setMultiSamples: samples];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::setAsyncTrackFaceEnable_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                int enable = [args[@"enable"] intValue];
        
                // ref
        
        
                // invoke native method
                [FURenderer setAsyncTrackFaceEnable: enable];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::setTongueTrackingEnable_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                int enable = [args[@"enable"] intValue];
        
                // ref
        
        
                // invoke native method
                [FURenderer setTongueTrackingEnable: enable];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::namaLibDestroy_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
        
        
                // ref
        
        
                // invoke native method
                [FURenderer namaLibDestroy];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"TCameraDesc::get_camera_id": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TCameraDesc::get_camera_id");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TCameraDesc ref;
            [dataValue getValue:&ref];
        
            int result = ref.camera_id;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"TAndroidDualMode::get_p_NV21": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TAndroidDualMode::get_p_NV21");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TAndroidDualMode ref;
            [dataValue getValue:&ref];
        
            void* result = ref.p_NV21;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"TAndroidDualMode::get_tex": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TAndroidDualMode::get_tex");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TAndroidDualMode ref;
            [dataValue getValue:&ref];
        
            int result = ref.tex;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"TAndroidDualMode::get_flags": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TAndroidDualMode::get_flags");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TAndroidDualMode ref;
            [dataValue getValue:&ref];
        
            int result = ref.flags;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"TNV12Buffer::get_p_Y": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TNV12Buffer::get_p_Y");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TNV12Buffer ref;
            [dataValue getValue:&ref];
        
            void* result = ref.p_Y;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"TNV12Buffer::get_p_CbCr": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TNV12Buffer::get_p_CbCr");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TNV12Buffer ref;
            [dataValue getValue:&ref];
        
            void* result = ref.p_CbCr;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"TNV12Buffer::get_stride_Y": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TNV12Buffer::get_stride_Y");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TNV12Buffer ref;
            [dataValue getValue:&ref];
        
            int result = ref.stride_Y;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"TNV12Buffer::get_stride_CbCr": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TNV12Buffer::get_stride_CbCr");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TNV12Buffer ref;
            [dataValue getValue:&ref];
        
            int result = ref.stride_CbCr;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"TIOSDualInput::get_p_BGRA": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TIOSDualInput::get_p_BGRA");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TIOSDualInput ref;
            [dataValue getValue:&ref];
        
            void* result = ref.p_BGRA;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"TIOSDualInput::get_p_Y": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TIOSDualInput::get_p_Y");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TIOSDualInput ref;
            [dataValue getValue:&ref];
        
            void* result = ref.p_Y;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"TIOSDualInput::get_p_CbCr": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TIOSDualInput::get_p_CbCr");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TIOSDualInput ref;
            [dataValue getValue:&ref];
        
            void* result = ref.p_CbCr;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"TIOSDualInput::get_stride_BGRA": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TIOSDualInput::get_stride_BGRA");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TIOSDualInput ref;
            [dataValue getValue:&ref];
        
            int result = ref.stride_BGRA;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"TIOSDualInput::get_stride_Y": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TIOSDualInput::get_stride_Y");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TIOSDualInput ref;
            [dataValue getValue:&ref];
        
            int result = ref.stride_Y;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"TIOSDualInput::get_stride_CbCr": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TIOSDualInput::get_stride_CbCr");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TIOSDualInput ref;
            [dataValue getValue:&ref];
        
            int result = ref.stride_CbCr;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"TIOSDualInput::get_tex_handle": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TIOSDualInput::get_tex_handle");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TIOSDualInput ref;
            [dataValue getValue:&ref];
        
            int result = ref.tex_handle;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"TIOSDualInput::get_format": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TIOSDualInput::get_format");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TIOSDualInput ref;
            [dataValue getValue:&ref];
        
            int result = ref.format;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"TSPECFBO::get_fbo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TSPECFBO::get_fbo");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TSPECFBO ref;
            [dataValue getValue:&ref];
        
            int result = ref.fbo;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"TSPECFBO::get_tex": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TSPECFBO::get_tex");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TSPECFBO ref;
            [dataValue getValue:&ref];
        
            int result = ref.tex;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"TGLRenderingDesc::get_image_output_mode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TGLRenderingDesc::get_image_output_mode");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TGLRenderingDesc ref;
            [dataValue getValue:&ref];
        
            int result = ref.image_output_mode;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"TGLRenderingDesc::get_param": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TGLRenderingDesc::get_param");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TGLRenderingDesc ref;
            [dataValue getValue:&ref];
        
            void* result = ref.param;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"TAvatarInfo::get_p_translation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TAvatarInfo::get_p_translation");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TAvatarInfo ref;
            [dataValue getValue:&ref];
        
            float result = ref.p_translation;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"TAvatarInfo::get_p_rotation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TAvatarInfo::get_p_rotation");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TAvatarInfo ref;
            [dataValue getValue:&ref];
        
            float result = ref.p_rotation;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"TAvatarInfo::get_p_expression": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TAvatarInfo::get_p_expression");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TAvatarInfo ref;
            [dataValue getValue:&ref];
        
            float result = ref.p_expression;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"TAvatarInfo::get_rotation_mode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TAvatarInfo::get_rotation_mode");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TAvatarInfo ref;
            [dataValue getValue:&ref];
        
            float result = ref.rotation_mode;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"TAvatarInfo::get_pupil_pos": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TAvatarInfo::get_pupil_pos");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TAvatarInfo ref;
            [dataValue getValue:&ref];
        
            float result = ref.pupil_pos;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"TAvatarInfo::get_is_valid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TAvatarInfo::get_is_valid");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TAvatarInfo ref;
            [dataValue getValue:&ref];
        
            int result = ref.is_valid;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"TSplitViewInfo::get_in_ptr": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TSplitViewInfo::get_in_ptr");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TSplitViewInfo ref;
            [dataValue getValue:&ref];
        
            void* result = ref.in_ptr;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"TSplitViewInfo::get_in_type": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TSplitViewInfo::get_in_type");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TSplitViewInfo ref;
            [dataValue getValue:&ref];
        
            int result = ref.in_type;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"TSplitViewInfo::get_out_w": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TSplitViewInfo::get_out_w");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TSplitViewInfo ref;
            [dataValue getValue:&ref];
        
            int result = ref.out_w;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"TSplitViewInfo::get_out_h": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TSplitViewInfo::get_out_h");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TSplitViewInfo ref;
            [dataValue getValue:&ref];
        
            int result = ref.out_h;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"TSplitViewInfo::get_view_0_ratio": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TSplitViewInfo::get_view_0_ratio");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TSplitViewInfo ref;
            [dataValue getValue:&ref];
        
            float result = ref.view_0_ratio;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"TSplitViewInfo::get_margin_in_pixel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TSplitViewInfo::get_margin_in_pixel");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TSplitViewInfo ref;
            [dataValue getValue:&ref];
        
            int result = ref.margin_in_pixel;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"TSplitViewInfo::get_is_vertical": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TSplitViewInfo::get_is_vertical");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TSplitViewInfo ref;
            [dataValue getValue:&ref];
        
            int result = ref.is_vertical;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"TSplitViewInfo::get_is_image_first": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TSplitViewInfo::get_is_image_first");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TSplitViewInfo ref;
            [dataValue getValue:&ref];
        
            int result = ref.is_image_first;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"TSplitViewInfo::get_rotation_mode_before_crop": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TSplitViewInfo::get_rotation_mode_before_crop");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TSplitViewInfo ref;
            [dataValue getValue:&ref];
        
            int result = ref.rotation_mode_before_crop;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"TSplitViewInfo::get_crop_ratio_top": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TSplitViewInfo::get_crop_ratio_top");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TSplitViewInfo ref;
            [dataValue getValue:&ref];
        
            float result = ref.crop_ratio_top;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"FURotatedImage::get_mData": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"FURotatedImage::get_mData");
            }
        
            // ref object
            FURotatedImage* ref = (FURotatedImage*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            void* result = ref.mData;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"FURotatedImage::get_mWidth": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"FURotatedImage::get_mWidth");
            }
        
            // ref object
            FURotatedImage* ref = (FURotatedImage*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            int result = ref.mWidth;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"FURotatedImage::get_mHeight": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"FURotatedImage::get_mHeight");
            }
        
            // ref object
            FURotatedImage* ref = (FURotatedImage*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            int result = ref.mHeight;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"TCameraDesc::get_camera_id_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // ref object
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TCameraDesc ref;
                [dataValue getValue:&ref];
        
                int result = ref.camera_id;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"TAndroidDualMode::get_p_NV21_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // ref object
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TAndroidDualMode ref;
                [dataValue getValue:&ref];
        
                void* result = ref.p_NV21;
        
                // return a ref
                HEAP[@((result).hash)] = result;
                NSNumber* jsonableResult = @((result).hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"TAndroidDualMode::get_tex_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // ref object
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TAndroidDualMode ref;
                [dataValue getValue:&ref];
        
                int result = ref.tex;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"TAndroidDualMode::get_flags_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // ref object
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TAndroidDualMode ref;
                [dataValue getValue:&ref];
        
                int result = ref.flags;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"TNV12Buffer::get_p_Y_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // ref object
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TNV12Buffer ref;
                [dataValue getValue:&ref];
        
                void* result = ref.p_Y;
        
                // return a ref
                HEAP[@((result).hash)] = result;
                NSNumber* jsonableResult = @((result).hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"TNV12Buffer::get_p_CbCr_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // ref object
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TNV12Buffer ref;
                [dataValue getValue:&ref];
        
                void* result = ref.p_CbCr;
        
                // return a ref
                HEAP[@((result).hash)] = result;
                NSNumber* jsonableResult = @((result).hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"TNV12Buffer::get_stride_Y_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // ref object
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TNV12Buffer ref;
                [dataValue getValue:&ref];
        
                int result = ref.stride_Y;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"TNV12Buffer::get_stride_CbCr_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // ref object
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TNV12Buffer ref;
                [dataValue getValue:&ref];
        
                int result = ref.stride_CbCr;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"TIOSDualInput::get_p_BGRA_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // ref object
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TIOSDualInput ref;
                [dataValue getValue:&ref];
        
                void* result = ref.p_BGRA;
        
                // return a ref
                HEAP[@((result).hash)] = result;
                NSNumber* jsonableResult = @((result).hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"TIOSDualInput::get_p_Y_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // ref object
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TIOSDualInput ref;
                [dataValue getValue:&ref];
        
                void* result = ref.p_Y;
        
                // return a ref
                HEAP[@((result).hash)] = result;
                NSNumber* jsonableResult = @((result).hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"TIOSDualInput::get_p_CbCr_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // ref object
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TIOSDualInput ref;
                [dataValue getValue:&ref];
        
                void* result = ref.p_CbCr;
        
                // return a ref
                HEAP[@((result).hash)] = result;
                NSNumber* jsonableResult = @((result).hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"TIOSDualInput::get_stride_BGRA_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // ref object
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TIOSDualInput ref;
                [dataValue getValue:&ref];
        
                int result = ref.stride_BGRA;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"TIOSDualInput::get_stride_Y_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // ref object
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TIOSDualInput ref;
                [dataValue getValue:&ref];
        
                int result = ref.stride_Y;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"TIOSDualInput::get_stride_CbCr_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // ref object
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TIOSDualInput ref;
                [dataValue getValue:&ref];
        
                int result = ref.stride_CbCr;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"TIOSDualInput::get_tex_handle_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // ref object
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TIOSDualInput ref;
                [dataValue getValue:&ref];
        
                int result = ref.tex_handle;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"TIOSDualInput::get_format_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // ref object
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TIOSDualInput ref;
                [dataValue getValue:&ref];
        
                int result = ref.format;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"TSPECFBO::get_fbo_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // ref object
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TSPECFBO ref;
                [dataValue getValue:&ref];
        
                int result = ref.fbo;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"TSPECFBO::get_tex_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // ref object
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TSPECFBO ref;
                [dataValue getValue:&ref];
        
                int result = ref.tex;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"TGLRenderingDesc::get_image_output_mode_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // ref object
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TGLRenderingDesc ref;
                [dataValue getValue:&ref];
        
                int result = ref.image_output_mode;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"TGLRenderingDesc::get_param_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // ref object
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TGLRenderingDesc ref;
                [dataValue getValue:&ref];
        
                void* result = ref.param;
        
                // return a ref
                HEAP[@((result).hash)] = result;
                NSNumber* jsonableResult = @((result).hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"TAvatarInfo::get_p_translation_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // ref object
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TAvatarInfo ref;
                [dataValue getValue:&ref];
        
                float result = ref.p_translation;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"TAvatarInfo::get_p_rotation_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // ref object
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TAvatarInfo ref;
                [dataValue getValue:&ref];
        
                float result = ref.p_rotation;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"TAvatarInfo::get_p_expression_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // ref object
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TAvatarInfo ref;
                [dataValue getValue:&ref];
        
                float result = ref.p_expression;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"TAvatarInfo::get_rotation_mode_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // ref object
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TAvatarInfo ref;
                [dataValue getValue:&ref];
        
                float result = ref.rotation_mode;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"TAvatarInfo::get_pupil_pos_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // ref object
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TAvatarInfo ref;
                [dataValue getValue:&ref];
        
                float result = ref.pupil_pos;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"TAvatarInfo::get_is_valid_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // ref object
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TAvatarInfo ref;
                [dataValue getValue:&ref];
        
                int result = ref.is_valid;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"TSplitViewInfo::get_in_ptr_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // ref object
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TSplitViewInfo ref;
                [dataValue getValue:&ref];
        
                void* result = ref.in_ptr;
        
                // return a ref
                HEAP[@((result).hash)] = result;
                NSNumber* jsonableResult = @((result).hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"TSplitViewInfo::get_in_type_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // ref object
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TSplitViewInfo ref;
                [dataValue getValue:&ref];
        
                int result = ref.in_type;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"TSplitViewInfo::get_out_w_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // ref object
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TSplitViewInfo ref;
                [dataValue getValue:&ref];
        
                int result = ref.out_w;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"TSplitViewInfo::get_out_h_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // ref object
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TSplitViewInfo ref;
                [dataValue getValue:&ref];
        
                int result = ref.out_h;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"TSplitViewInfo::get_view_0_ratio_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // ref object
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TSplitViewInfo ref;
                [dataValue getValue:&ref];
        
                float result = ref.view_0_ratio;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"TSplitViewInfo::get_margin_in_pixel_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // ref object
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TSplitViewInfo ref;
                [dataValue getValue:&ref];
        
                int result = ref.margin_in_pixel;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"TSplitViewInfo::get_is_vertical_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // ref object
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TSplitViewInfo ref;
                [dataValue getValue:&ref];
        
                int result = ref.is_vertical;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"TSplitViewInfo::get_is_image_first_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // ref object
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TSplitViewInfo ref;
                [dataValue getValue:&ref];
        
                int result = ref.is_image_first;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"TSplitViewInfo::get_rotation_mode_before_crop_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // ref object
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TSplitViewInfo ref;
                [dataValue getValue:&ref];
        
                int result = ref.rotation_mode_before_crop;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"TSplitViewInfo::get_crop_ratio_top_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // ref object
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TSplitViewInfo ref;
                [dataValue getValue:&ref];
        
                float result = ref.crop_ratio_top;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"FURotatedImage::get_mData_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // ref object
                FURotatedImage* ref = (FURotatedImage*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                void* result = ref.mData;
        
                // return a ref
                HEAP[@((result).hash)] = result;
                NSNumber* jsonableResult = @((result).hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"FURotatedImage::get_mWidth_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // ref object
                FURotatedImage* ref = (FURotatedImage*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                int result = ref.mWidth;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"FURotatedImage::get_mHeight_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // ref object
                FURotatedImage* ref = (FURotatedImage*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                int result = ref.mHeight;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"TCameraDesc::set_camera_id": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TCameraDesc::set_camera_id");
            }
        
            // args
            // jsonable arg
            int camera_id = [args[@"camera_id"] intValue];
        
            // ref
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TCameraDesc ref;
            [dataValue getValue:&ref];
        
            ref.camera_id = camera_id;
            methodResult(@"success");
        },
        
        @"TAndroidDualMode::set_p_NV21": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TAndroidDualMode::set_p_NV21");
            }
        
            // args
            // ref arg
            void* p_NV21 = (void*) HEAP[@([args[@"p_NV21"] integerValue])];
        
            // ref
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TAndroidDualMode ref;
            [dataValue getValue:&ref];
        
            ref.p_NV21 = p_NV21;
            methodResult(@"success");
        },
        
        @"TAndroidDualMode::set_tex": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TAndroidDualMode::set_tex");
            }
        
            // args
            // jsonable arg
            int tex = [args[@"tex"] intValue];
        
            // ref
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TAndroidDualMode ref;
            [dataValue getValue:&ref];
        
            ref.tex = tex;
            methodResult(@"success");
        },
        
        @"TAndroidDualMode::set_flags": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TAndroidDualMode::set_flags");
            }
        
            // args
            // jsonable arg
            int flags = [args[@"flags"] intValue];
        
            // ref
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TAndroidDualMode ref;
            [dataValue getValue:&ref];
        
            ref.flags = flags;
            methodResult(@"success");
        },
        
        @"TNV12Buffer::set_p_Y": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TNV12Buffer::set_p_Y");
            }
        
            // args
            // ref arg
            void* p_Y = (void*) HEAP[@([args[@"p_Y"] integerValue])];
        
            // ref
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TNV12Buffer ref;
            [dataValue getValue:&ref];
        
            ref.p_Y = p_Y;
            methodResult(@"success");
        },
        
        @"TNV12Buffer::set_p_CbCr": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TNV12Buffer::set_p_CbCr");
            }
        
            // args
            // ref arg
            void* p_CbCr = (void*) HEAP[@([args[@"p_CbCr"] integerValue])];
        
            // ref
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TNV12Buffer ref;
            [dataValue getValue:&ref];
        
            ref.p_CbCr = p_CbCr;
            methodResult(@"success");
        },
        
        @"TNV12Buffer::set_stride_Y": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TNV12Buffer::set_stride_Y");
            }
        
            // args
            // jsonable arg
            int stride_Y = [args[@"stride_Y"] intValue];
        
            // ref
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TNV12Buffer ref;
            [dataValue getValue:&ref];
        
            ref.stride_Y = stride_Y;
            methodResult(@"success");
        },
        
        @"TNV12Buffer::set_stride_CbCr": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TNV12Buffer::set_stride_CbCr");
            }
        
            // args
            // jsonable arg
            int stride_CbCr = [args[@"stride_CbCr"] intValue];
        
            // ref
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TNV12Buffer ref;
            [dataValue getValue:&ref];
        
            ref.stride_CbCr = stride_CbCr;
            methodResult(@"success");
        },
        
        @"TIOSDualInput::set_p_BGRA": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TIOSDualInput::set_p_BGRA");
            }
        
            // args
            // ref arg
            void* p_BGRA = (void*) HEAP[@([args[@"p_BGRA"] integerValue])];
        
            // ref
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TIOSDualInput ref;
            [dataValue getValue:&ref];
        
            ref.p_BGRA = p_BGRA;
            methodResult(@"success");
        },
        
        @"TIOSDualInput::set_p_Y": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TIOSDualInput::set_p_Y");
            }
        
            // args
            // ref arg
            void* p_Y = (void*) HEAP[@([args[@"p_Y"] integerValue])];
        
            // ref
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TIOSDualInput ref;
            [dataValue getValue:&ref];
        
            ref.p_Y = p_Y;
            methodResult(@"success");
        },
        
        @"TIOSDualInput::set_p_CbCr": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TIOSDualInput::set_p_CbCr");
            }
        
            // args
            // ref arg
            void* p_CbCr = (void*) HEAP[@([args[@"p_CbCr"] integerValue])];
        
            // ref
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TIOSDualInput ref;
            [dataValue getValue:&ref];
        
            ref.p_CbCr = p_CbCr;
            methodResult(@"success");
        },
        
        @"TIOSDualInput::set_stride_BGRA": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TIOSDualInput::set_stride_BGRA");
            }
        
            // args
            // jsonable arg
            int stride_BGRA = [args[@"stride_BGRA"] intValue];
        
            // ref
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TIOSDualInput ref;
            [dataValue getValue:&ref];
        
            ref.stride_BGRA = stride_BGRA;
            methodResult(@"success");
        },
        
        @"TIOSDualInput::set_stride_Y": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TIOSDualInput::set_stride_Y");
            }
        
            // args
            // jsonable arg
            int stride_Y = [args[@"stride_Y"] intValue];
        
            // ref
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TIOSDualInput ref;
            [dataValue getValue:&ref];
        
            ref.stride_Y = stride_Y;
            methodResult(@"success");
        },
        
        @"TIOSDualInput::set_stride_CbCr": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TIOSDualInput::set_stride_CbCr");
            }
        
            // args
            // jsonable arg
            int stride_CbCr = [args[@"stride_CbCr"] intValue];
        
            // ref
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TIOSDualInput ref;
            [dataValue getValue:&ref];
        
            ref.stride_CbCr = stride_CbCr;
            methodResult(@"success");
        },
        
        @"TIOSDualInput::set_tex_handle": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TIOSDualInput::set_tex_handle");
            }
        
            // args
            // jsonable arg
            int tex_handle = [args[@"tex_handle"] intValue];
        
            // ref
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TIOSDualInput ref;
            [dataValue getValue:&ref];
        
            ref.tex_handle = tex_handle;
            methodResult(@"success");
        },
        
        @"TIOSDualInput::set_format": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TIOSDualInput::set_format");
            }
        
            // args
            // jsonable arg
            int format = [args[@"format"] intValue];
        
            // ref
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TIOSDualInput ref;
            [dataValue getValue:&ref];
        
            ref.format = format;
            methodResult(@"success");
        },
        
        @"TSPECFBO::set_fbo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TSPECFBO::set_fbo");
            }
        
            // args
            // jsonable arg
            int fbo = [args[@"fbo"] intValue];
        
            // ref
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TSPECFBO ref;
            [dataValue getValue:&ref];
        
            ref.fbo = fbo;
            methodResult(@"success");
        },
        
        @"TSPECFBO::set_tex": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TSPECFBO::set_tex");
            }
        
            // args
            // jsonable arg
            int tex = [args[@"tex"] intValue];
        
            // ref
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TSPECFBO ref;
            [dataValue getValue:&ref];
        
            ref.tex = tex;
            methodResult(@"success");
        },
        
        @"TGLRenderingDesc::set_image_output_mode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TGLRenderingDesc::set_image_output_mode");
            }
        
            // args
            // jsonable arg
            int image_output_mode = [args[@"image_output_mode"] intValue];
        
            // ref
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TGLRenderingDesc ref;
            [dataValue getValue:&ref];
        
            ref.image_output_mode = image_output_mode;
            methodResult(@"success");
        },
        
        @"TGLRenderingDesc::set_param": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TGLRenderingDesc::set_param");
            }
        
            // args
            // ref arg
            void* param = (void*) HEAP[@([args[@"param"] integerValue])];
        
            // ref
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TGLRenderingDesc ref;
            [dataValue getValue:&ref];
        
            ref.param = param;
            methodResult(@"success");
        },
        
        @"TAvatarInfo::set_p_translation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TAvatarInfo::set_p_translation");
            }
        
            // args
            // jsonable arg
            float p_translation = [args[@"p_translation"] floatValue];
        
            // ref
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TAvatarInfo ref;
            [dataValue getValue:&ref];
        
            ref.p_translation = p_translation;
            methodResult(@"success");
        },
        
        @"TAvatarInfo::set_p_rotation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TAvatarInfo::set_p_rotation");
            }
        
            // args
            // jsonable arg
            float p_rotation = [args[@"p_rotation"] floatValue];
        
            // ref
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TAvatarInfo ref;
            [dataValue getValue:&ref];
        
            ref.p_rotation = p_rotation;
            methodResult(@"success");
        },
        
        @"TAvatarInfo::set_p_expression": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TAvatarInfo::set_p_expression");
            }
        
            // args
            // jsonable arg
            float p_expression = [args[@"p_expression"] floatValue];
        
            // ref
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TAvatarInfo ref;
            [dataValue getValue:&ref];
        
            ref.p_expression = p_expression;
            methodResult(@"success");
        },
        
        @"TAvatarInfo::set_rotation_mode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TAvatarInfo::set_rotation_mode");
            }
        
            // args
            // jsonable arg
            float rotation_mode = [args[@"rotation_mode"] floatValue];
        
            // ref
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TAvatarInfo ref;
            [dataValue getValue:&ref];
        
            ref.rotation_mode = rotation_mode;
            methodResult(@"success");
        },
        
        @"TAvatarInfo::set_pupil_pos": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TAvatarInfo::set_pupil_pos");
            }
        
            // args
            // jsonable arg
            float pupil_pos = [args[@"pupil_pos"] floatValue];
        
            // ref
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TAvatarInfo ref;
            [dataValue getValue:&ref];
        
            ref.pupil_pos = pupil_pos;
            methodResult(@"success");
        },
        
        @"TAvatarInfo::set_is_valid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TAvatarInfo::set_is_valid");
            }
        
            // args
            // jsonable arg
            int is_valid = [args[@"is_valid"] intValue];
        
            // ref
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TAvatarInfo ref;
            [dataValue getValue:&ref];
        
            ref.is_valid = is_valid;
            methodResult(@"success");
        },
        
        @"TSplitViewInfo::set_in_ptr": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TSplitViewInfo::set_in_ptr");
            }
        
            // args
            // ref arg
            void* in_ptr = (void*) HEAP[@([args[@"in_ptr"] integerValue])];
        
            // ref
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TSplitViewInfo ref;
            [dataValue getValue:&ref];
        
            ref.in_ptr = in_ptr;
            methodResult(@"success");
        },
        
        @"TSplitViewInfo::set_in_type": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TSplitViewInfo::set_in_type");
            }
        
            // args
            // jsonable arg
            int in_type = [args[@"in_type"] intValue];
        
            // ref
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TSplitViewInfo ref;
            [dataValue getValue:&ref];
        
            ref.in_type = in_type;
            methodResult(@"success");
        },
        
        @"TSplitViewInfo::set_out_w": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TSplitViewInfo::set_out_w");
            }
        
            // args
            // jsonable arg
            int out_w = [args[@"out_w"] intValue];
        
            // ref
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TSplitViewInfo ref;
            [dataValue getValue:&ref];
        
            ref.out_w = out_w;
            methodResult(@"success");
        },
        
        @"TSplitViewInfo::set_out_h": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TSplitViewInfo::set_out_h");
            }
        
            // args
            // jsonable arg
            int out_h = [args[@"out_h"] intValue];
        
            // ref
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TSplitViewInfo ref;
            [dataValue getValue:&ref];
        
            ref.out_h = out_h;
            methodResult(@"success");
        },
        
        @"TSplitViewInfo::set_view_0_ratio": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TSplitViewInfo::set_view_0_ratio");
            }
        
            // args
            // jsonable arg
            float view_0_ratio = [args[@"view_0_ratio"] floatValue];
        
            // ref
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TSplitViewInfo ref;
            [dataValue getValue:&ref];
        
            ref.view_0_ratio = view_0_ratio;
            methodResult(@"success");
        },
        
        @"TSplitViewInfo::set_margin_in_pixel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TSplitViewInfo::set_margin_in_pixel");
            }
        
            // args
            // jsonable arg
            int margin_in_pixel = [args[@"margin_in_pixel"] intValue];
        
            // ref
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TSplitViewInfo ref;
            [dataValue getValue:&ref];
        
            ref.margin_in_pixel = margin_in_pixel;
            methodResult(@"success");
        },
        
        @"TSplitViewInfo::set_is_vertical": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TSplitViewInfo::set_is_vertical");
            }
        
            // args
            // jsonable arg
            int is_vertical = [args[@"is_vertical"] intValue];
        
            // ref
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TSplitViewInfo ref;
            [dataValue getValue:&ref];
        
            ref.is_vertical = is_vertical;
            methodResult(@"success");
        },
        
        @"TSplitViewInfo::set_is_image_first": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TSplitViewInfo::set_is_image_first");
            }
        
            // args
            // jsonable arg
            int is_image_first = [args[@"is_image_first"] intValue];
        
            // ref
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TSplitViewInfo ref;
            [dataValue getValue:&ref];
        
            ref.is_image_first = is_image_first;
            methodResult(@"success");
        },
        
        @"TSplitViewInfo::set_rotation_mode_before_crop": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TSplitViewInfo::set_rotation_mode_before_crop");
            }
        
            // args
            // jsonable arg
            int rotation_mode_before_crop = [args[@"rotation_mode_before_crop"] intValue];
        
            // ref
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TSplitViewInfo ref;
            [dataValue getValue:&ref];
        
            ref.rotation_mode_before_crop = rotation_mode_before_crop;
            methodResult(@"success");
        },
        
        @"TSplitViewInfo::set_crop_ratio_top": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TSplitViewInfo::set_crop_ratio_top");
            }
        
            // args
            // jsonable arg
            float crop_ratio_top = [args[@"crop_ratio_top"] floatValue];
        
            // ref
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TSplitViewInfo ref;
            [dataValue getValue:&ref];
        
            ref.crop_ratio_top = crop_ratio_top;
            methodResult(@"success");
        },
        
        @"FURotatedImage::set_mData": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"FURotatedImage::set_mData");
            }
        
            // args
            // ref arg
            void* mData = (void*) HEAP[@([args[@"mData"] integerValue])];
        
            // ref
            FURotatedImage* ref = (FURotatedImage*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.mData = mData;
            methodResult(@"success");
        },
        
        @"FURotatedImage::set_mWidth": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"FURotatedImage::set_mWidth");
            }
        
            // args
            // jsonable arg
            int mWidth = [args[@"mWidth"] intValue];
        
            // ref
            FURotatedImage* ref = (FURotatedImage*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.mWidth = mWidth;
            methodResult(@"success");
        },
        
        @"FURotatedImage::set_mHeight": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"FURotatedImage::set_mHeight");
            }
        
            // args
            // jsonable arg
            int mHeight = [args[@"mHeight"] intValue];
        
            // ref
            FURotatedImage* ref = (FURotatedImage*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.mHeight = mHeight;
            methodResult(@"success");
        },
        
        @"TCameraDesc::set_camera_id_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                int camera_id = [args[@"camera_id"] intValue];
        
                // ref
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TCameraDesc ref;
                [dataValue getValue:&ref];
        
                ref.camera_id = camera_id;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"TAndroidDualMode::set_p_NV21_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                void* p_NV21 = (void*) HEAP[@([args[@"p_NV21"] integerValue])];
        
                // ref
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TAndroidDualMode ref;
                [dataValue getValue:&ref];
        
                ref.p_NV21 = p_NV21;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"TAndroidDualMode::set_tex_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                int tex = [args[@"tex"] intValue];
        
                // ref
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TAndroidDualMode ref;
                [dataValue getValue:&ref];
        
                ref.tex = tex;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"TAndroidDualMode::set_flags_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                int flags = [args[@"flags"] intValue];
        
                // ref
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TAndroidDualMode ref;
                [dataValue getValue:&ref];
        
                ref.flags = flags;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"TNV12Buffer::set_p_Y_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                void* p_Y = (void*) HEAP[@([args[@"p_Y"] integerValue])];
        
                // ref
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TNV12Buffer ref;
                [dataValue getValue:&ref];
        
                ref.p_Y = p_Y;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"TNV12Buffer::set_p_CbCr_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                void* p_CbCr = (void*) HEAP[@([args[@"p_CbCr"] integerValue])];
        
                // ref
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TNV12Buffer ref;
                [dataValue getValue:&ref];
        
                ref.p_CbCr = p_CbCr;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"TNV12Buffer::set_stride_Y_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                int stride_Y = [args[@"stride_Y"] intValue];
        
                // ref
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TNV12Buffer ref;
                [dataValue getValue:&ref];
        
                ref.stride_Y = stride_Y;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"TNV12Buffer::set_stride_CbCr_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                int stride_CbCr = [args[@"stride_CbCr"] intValue];
        
                // ref
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TNV12Buffer ref;
                [dataValue getValue:&ref];
        
                ref.stride_CbCr = stride_CbCr;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"TIOSDualInput::set_p_BGRA_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                void* p_BGRA = (void*) HEAP[@([args[@"p_BGRA"] integerValue])];
        
                // ref
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TIOSDualInput ref;
                [dataValue getValue:&ref];
        
                ref.p_BGRA = p_BGRA;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"TIOSDualInput::set_p_Y_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                void* p_Y = (void*) HEAP[@([args[@"p_Y"] integerValue])];
        
                // ref
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TIOSDualInput ref;
                [dataValue getValue:&ref];
        
                ref.p_Y = p_Y;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"TIOSDualInput::set_p_CbCr_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                void* p_CbCr = (void*) HEAP[@([args[@"p_CbCr"] integerValue])];
        
                // ref
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TIOSDualInput ref;
                [dataValue getValue:&ref];
        
                ref.p_CbCr = p_CbCr;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"TIOSDualInput::set_stride_BGRA_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                int stride_BGRA = [args[@"stride_BGRA"] intValue];
        
                // ref
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TIOSDualInput ref;
                [dataValue getValue:&ref];
        
                ref.stride_BGRA = stride_BGRA;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"TIOSDualInput::set_stride_Y_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                int stride_Y = [args[@"stride_Y"] intValue];
        
                // ref
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TIOSDualInput ref;
                [dataValue getValue:&ref];
        
                ref.stride_Y = stride_Y;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"TIOSDualInput::set_stride_CbCr_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                int stride_CbCr = [args[@"stride_CbCr"] intValue];
        
                // ref
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TIOSDualInput ref;
                [dataValue getValue:&ref];
        
                ref.stride_CbCr = stride_CbCr;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"TIOSDualInput::set_tex_handle_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                int tex_handle = [args[@"tex_handle"] intValue];
        
                // ref
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TIOSDualInput ref;
                [dataValue getValue:&ref];
        
                ref.tex_handle = tex_handle;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"TIOSDualInput::set_format_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                int format = [args[@"format"] intValue];
        
                // ref
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TIOSDualInput ref;
                [dataValue getValue:&ref];
        
                ref.format = format;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"TSPECFBO::set_fbo_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                int fbo = [args[@"fbo"] intValue];
        
                // ref
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TSPECFBO ref;
                [dataValue getValue:&ref];
        
                ref.fbo = fbo;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"TSPECFBO::set_tex_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                int tex = [args[@"tex"] intValue];
        
                // ref
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TSPECFBO ref;
                [dataValue getValue:&ref];
        
                ref.tex = tex;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"TGLRenderingDesc::set_image_output_mode_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                int image_output_mode = [args[@"image_output_mode"] intValue];
        
                // ref
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TGLRenderingDesc ref;
                [dataValue getValue:&ref];
        
                ref.image_output_mode = image_output_mode;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"TGLRenderingDesc::set_param_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                void* param = (void*) HEAP[@([args[@"param"] integerValue])];
        
                // ref
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TGLRenderingDesc ref;
                [dataValue getValue:&ref];
        
                ref.param = param;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"TAvatarInfo::set_p_translation_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                float p_translation = [args[@"p_translation"] floatValue];
        
                // ref
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TAvatarInfo ref;
                [dataValue getValue:&ref];
        
                ref.p_translation = p_translation;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"TAvatarInfo::set_p_rotation_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                float p_rotation = [args[@"p_rotation"] floatValue];
        
                // ref
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TAvatarInfo ref;
                [dataValue getValue:&ref];
        
                ref.p_rotation = p_rotation;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"TAvatarInfo::set_p_expression_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                float p_expression = [args[@"p_expression"] floatValue];
        
                // ref
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TAvatarInfo ref;
                [dataValue getValue:&ref];
        
                ref.p_expression = p_expression;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
    };
}

@end
