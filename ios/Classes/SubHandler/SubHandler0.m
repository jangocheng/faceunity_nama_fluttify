//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

#import "SubHandler0.h"

// Dart端一次方法调用所存在的栈, 只有当MethodChannel传递参数受限时, 再启用这个容器
extern NSMutableDictionary<NSString*, NSObject*>* STACK;
// Dart端随机存取对象的容器
extern NSMutableDictionary<NSNumber*, NSObject*>* HEAP;
// 日志打印开关
extern BOOL enableLog;

@implementation FaceunityNamaFluttifyPlugin (SubHandler0)
- (NSDictionary<NSString*, Handler>*) getSubHandler0 {
    return @{
        @"FURotatedImage::init": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            FURotatedImage* ref = (FURotatedImage*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURotatedImage@%@::init()", args[@"refId"]);
            }
        
            // invoke native method
            FURotatedImage* result = [ref init];
        
            // result
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        @"FURenderer::shareRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::shareRenderer()");
            }
        
            // invoke native method
            FURenderer* result = [FURenderer shareRenderer];
        
            // result
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        @"FURenderer::setBackCurrentContext": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            FURenderer* ref = (FURenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer@%@::setBackCurrentContext()", args[@"refId"]);
            }
        
            // invoke native method
            [ref setBackCurrentContext ];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"FURenderer::setUpCurrentContext": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            FURenderer* ref = (FURenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer@%@::setUpCurrentContext()", args[@"refId"]);
            }
        
            // invoke native method
            [ref setUpCurrentContext ];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"FURenderer::setupWithDataDataSizeardataauthPackageauthSize": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            NSValue* data = (NSValue*) HEAP[@([args[@"data"] integerValue])];
            // jsonable arg
            int dataSize = [args[@"dataSize"] intValue];
            // ref arg
            NSValue* ardata = (NSValue*) HEAP[@([args[@"ardata"] integerValue])];
            // ref arg
            NSValue* package = (NSValue*) HEAP[@([args[@"package"] integerValue])];
            // jsonable arg
            int size = [args[@"size"] intValue];
        
            // ref
            FURenderer* ref = (FURenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer@%@::setupWithData(%@, %@, %@, %@, %@)", args[@"refId"], args[@"data"], args[@"dataSize"], args[@"ardata"], args[@"package"], args[@"size"]);
            }
        
            // invoke native method
            int result = [ref setupWithData: [data pointerValue] dataSize: dataSize ardata: [ardata pointerValue] authPackage: [package pointerValue] authSize: size];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"FURenderer::setupWithDataDataSizeardataauthPackageauthSizeshouldCreateContext": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            NSValue* data = (NSValue*) HEAP[@([args[@"data"] integerValue])];
            // jsonable arg
            int dataSize = [args[@"dataSize"] intValue];
            // ref arg
            NSValue* ardata = (NSValue*) HEAP[@([args[@"ardata"] integerValue])];
            // ref arg
            NSValue* package = (NSValue*) HEAP[@([args[@"package"] integerValue])];
            // jsonable arg
            int size = [args[@"size"] intValue];
            // jsonable arg
            BOOL shouldCreate = [args[@"shouldCreate"] boolValue];
        
            // ref
            FURenderer* ref = (FURenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer@%@::setupWithData(%@, %@, %@, %@, %@, %@)", args[@"refId"], args[@"data"], args[@"dataSize"], args[@"ardata"], args[@"package"], args[@"size"], args[@"shouldCreate"]);
            }
        
            // invoke native method
            int result = [ref setupWithData: [data pointerValue] dataSize: dataSize ardata: [ardata pointerValue] authPackage: [package pointerValue] authSize: size shouldCreateContext: shouldCreate];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"FURenderer::setupWithDataPathAuthPackageauthSizeshouldCreateContext": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            NSString* v3path = (NSString*) args[@"v3path"];
            // ref arg
            NSValue* package = (NSValue*) HEAP[@([args[@"package"] integerValue])];
            // jsonable arg
            int size = [args[@"size"] intValue];
            // jsonable arg
            BOOL shouldCreate = [args[@"shouldCreate"] boolValue];
        
            // ref
            FURenderer* ref = (FURenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer@%@::setupWithDataPath(%@, %@, %@, %@)", args[@"refId"], args[@"v3path"], args[@"package"], args[@"size"], args[@"shouldCreate"]);
            }
        
            // invoke native method
            int result = [ref setupWithDataPath: v3path authPackage: [package pointerValue] authSize: size shouldCreateContext: shouldCreate];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"FURenderer::setupLocalWithV3PathOffLinePathauthPackageauthSizeshouldCreateContext": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            NSString* v3path = (NSString*) args[@"v3path"];
            // jsonable arg
            NSString* offLinePath = (NSString*) args[@"offLinePath"];
            // ref arg
            NSValue* package = (NSValue*) HEAP[@([args[@"package"] integerValue])];
            // jsonable arg
            int size = [args[@"size"] intValue];
            // jsonable arg
            BOOL shouldCreate = [args[@"shouldCreate"] boolValue];
        
            // ref
            FURenderer* ref = (FURenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer@%@::setupLocalWithV3Path(%@, %@, %@, %@, %@)", args[@"refId"], args[@"v3path"], args[@"offLinePath"], args[@"package"], args[@"size"], args[@"shouldCreate"]);
            }
        
            // invoke native method
            NSData* result = [ref setupLocalWithV3Path: v3path offLinePath: offLinePath authPackage: [package pointerValue] authSize: size shouldCreateContext: shouldCreate];
        
            // result
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        @"FURenderer::renderItemsInFormatoutPtroutFormatwidthheightframeIditemsitemCountflipx": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            NSValue* inPtr = (NSValue*) HEAP[@([args[@"inPtr"] integerValue])];
            // enum arg
            FUFormat inFormat = (FUFormat) [args[@"inFormat"] integerValue];
            // ref arg
            NSValue* outPtr = (NSValue*) HEAP[@([args[@"outPtr"] integerValue])];
            // enum arg
            FUFormat outFormat = (FUFormat) [args[@"outFormat"] integerValue];
            // jsonable arg
            int width = [args[@"width"] intValue];
            // jsonable arg
            int height = [args[@"height"] intValue];
            // jsonable arg
            int frameid = [args[@"frameid"] intValue];
            // ref arg
            NSValue* items = (NSValue*) HEAP[@([args[@"items"] integerValue])];
            // jsonable arg
            int itemCount = [args[@"itemCount"] intValue];
            // jsonable arg
            BOOL flip = [args[@"flip"] boolValue];
        
            // ref
            FURenderer* ref = (FURenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer@%@::renderItems(%@, %@, %@, %@, %@, %@, %@, %@, %@, %@)", args[@"refId"], args[@"inPtr"], args[@"inFormat"], args[@"outPtr"], args[@"outFormat"], args[@"width"], args[@"height"], args[@"frameid"], args[@"items"], args[@"itemCount"], args[@"flip"]);
            }
        
            // invoke native method
            int result = [ref renderItems: [inPtr pointerValue] inFormat: inFormat outPtr: [outPtr pointerValue] outFormat: outFormat width: width height: height frameId: frameid items: [items pointerValue] itemCount: itemCount flipx: flip];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"FURenderer::renderBundlesInFormatoutPtroutFormatwidthheightframeIditemsitemCount": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            NSValue* inPtr = (NSValue*) HEAP[@([args[@"inPtr"] integerValue])];
            // enum arg
            FUFormat inFormat = (FUFormat) [args[@"inFormat"] integerValue];
            // ref arg
            NSValue* outPtr = (NSValue*) HEAP[@([args[@"outPtr"] integerValue])];
            // enum arg
            FUFormat outFormat = (FUFormat) [args[@"outFormat"] integerValue];
            // jsonable arg
            int width = [args[@"width"] intValue];
            // jsonable arg
            int height = [args[@"height"] intValue];
            // jsonable arg
            int frameid = [args[@"frameid"] intValue];
            // ref arg
            NSValue* items = (NSValue*) HEAP[@([args[@"items"] integerValue])];
            // jsonable arg
            int itemCount = [args[@"itemCount"] intValue];
        
            // ref
            FURenderer* ref = (FURenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer@%@::renderBundles(%@, %@, %@, %@, %@, %@, %@, %@, %@)", args[@"refId"], args[@"inPtr"], args[@"inFormat"], args[@"outPtr"], args[@"outFormat"], args[@"width"], args[@"height"], args[@"frameid"], args[@"items"], args[@"itemCount"]);
            }
        
            // invoke native method
            int result = [ref renderBundles: [inPtr pointerValue] inFormat: inFormat outPtr: [outPtr pointerValue] outFormat: outFormat width: width height: height frameId: frameid items: [items pointerValue] itemCount: itemCount];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"FURenderer::renderBundlesSplitViewInFormatoutPtroutFormatwidthheightframeIditemsitemCountsplitViewInfoPtr": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            NSValue* inPtr = (NSValue*) HEAP[@([args[@"inPtr"] integerValue])];
            // enum arg
            FUFormat inFormat = (FUFormat) [args[@"inFormat"] integerValue];
            // ref arg
            NSValue* outPtr = (NSValue*) HEAP[@([args[@"outPtr"] integerValue])];
            // enum arg
            FUFormat outFormat = (FUFormat) [args[@"outFormat"] integerValue];
            // jsonable arg
            int width = [args[@"width"] intValue];
            // jsonable arg
            int height = [args[@"height"] intValue];
            // jsonable arg
            int frameid = [args[@"frameid"] intValue];
            // ref arg
            NSValue* items = (NSValue*) HEAP[@([args[@"items"] integerValue])];
            // jsonable arg
            int itemCount = [args[@"itemCount"] intValue];
            // list arg
            NSArray* splitViewInfoPtrRefIdArray = (NSArray*) args[@"splitViewInfoPtr"];
            TSplitViewInfo splitViewInfoPtr[splitViewInfoPtrRefIdArray.count];
        
            for (int i = 0; i < splitViewInfoPtrRefIdArray.count; i++) {
                NSValue* splitViewInfoPtrValue = (NSValue*) HEAP[[splitViewInfoPtrRefIdArray objectAtIndex:i]];
                TSplitViewInfo splitViewInfoPtrItem;
                [splitViewInfoPtrValue getValue:&splitViewInfoPtrItem];
                splitViewInfoPtr[i] = splitViewInfoPtrItem;
            }
        
            // ref
            FURenderer* ref = (FURenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer@%@::renderBundlesSplitView(%@, %@, %@, %@, %@, %@, %@, %@, %@, %@)", args[@"refId"], args[@"inPtr"], args[@"inFormat"], args[@"outPtr"], args[@"outFormat"], args[@"width"], args[@"height"], args[@"frameid"], args[@"items"], args[@"itemCount"], args[@"splitViewInfoPtr"]);
            }
        
            // invoke native method
            int result = [ref renderBundlesSplitView: [inPtr pointerValue] inFormat: inFormat outPtr: [outPtr pointerValue] outFormat: outFormat width: width height: height frameId: frameid items: [items pointerValue] itemCount: itemCount splitViewInfoPtr: splitViewInfoPtr];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"FURenderer::setInputCameraMatrixFlip_yrotate_mode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            int flip_x = [args[@"flip_x"] intValue];
            // jsonable arg
            int flip_y = [args[@"flip_y"] intValue];
            // jsonable arg
            int rotate_mode = [args[@"rotate_mode"] intValue];
        
            // ref
            FURenderer* ref = (FURenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer@%@::setInputCameraMatrix(%@, %@, %@)", args[@"refId"], args[@"flip_x"], args[@"flip_y"], args[@"rotate_mode"]);
            }
        
            // invoke native method
            [ref setInputCameraMatrix : flip_x flip_y: flip_y rotate_mode: rotate_mode];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"FURenderer::setOutputResolutionH": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            int w = [args[@"w"] intValue];
            // jsonable arg
            int h = [args[@"h"] intValue];
        
            // ref
            FURenderer* ref = (FURenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer@%@::setOutputResolution(%@, %@)", args[@"refId"], args[@"w"], args[@"h"]);
            }
        
            // invoke native method
            [ref setOutputResolution : w h: h];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"FURenderer::rotateImageInPtrinFormatwidthheightrotationModeflipXflipY": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            FURotatedImage* outImage = (FURotatedImage*) HEAP[@([args[@"outImage"] integerValue])];
            // ref arg
            NSValue* inPtr = (NSValue*) HEAP[@([args[@"inPtr"] integerValue])];
            // enum arg
            FUFormat inFormat = (FUFormat) [args[@"inFormat"] integerValue];
            // jsonable arg
            int width = [args[@"width"] intValue];
            // jsonable arg
            int height = [args[@"height"] intValue];
            // enum arg
            FURotationMode rotationMode = (FURotationMode) [args[@"rotationMode"] integerValue];
            // jsonable arg
            BOOL flipX = [args[@"flipX"] boolValue];
            // jsonable arg
            BOOL flipY = [args[@"flipY"] boolValue];
        
            // ref
            FURenderer* ref = (FURenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer@%@::rotateImage(%@, %@, %@, %@, %@, %@, %@, %@)", args[@"refId"], args[@"outImage"], args[@"inPtr"], args[@"inFormat"], args[@"width"], args[@"height"], args[@"rotationMode"], args[@"flipX"], args[@"flipY"]);
            }
        
            // invoke native method
            int result = [ref rotateImage: outImage inPtr: [inPtr pointerValue] inFormat: inFormat width: width height: height rotationMode: rotationMode flipX: flipX flipY: flipY];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"FURenderer::onCameraChange": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::onCameraChange()");
            }
        
            // invoke native method
            [FURenderer onCameraChange];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"FURenderer::OnDeviceLost": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::OnDeviceLost()");
            }
        
            // invoke native method
            [FURenderer OnDeviceLost];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"FURenderer::createItemFromPackageSize": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            NSValue* data = (NSValue*) HEAP[@([args[@"data"] integerValue])];
            // jsonable arg
            int size = [args[@"size"] intValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::createItemFromPackage(%@, %@)", args[@"data"], args[@"size"]);
            }
        
            // invoke native method
            int result = [FURenderer createItemFromPackage: [data pointerValue] size: size];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"FURenderer::itemWithContentsOfFile": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            NSString* path = (NSString*) args[@"path"];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::itemWithContentsOfFile(%@)", args[@"path"]);
            }
        
            // invoke native method
            int result = [FURenderer itemWithContentsOfFile: path];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"FURenderer::destroyItem": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            int item = [args[@"item"] intValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::destroyItem(%@)", args[@"item"]);
            }
        
            // invoke native method
            [FURenderer destroyItem: item];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"FURenderer::destroyAllItems": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::destroyAllItems()");
            }
        
            // invoke native method
            [FURenderer destroyAllItems];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"FURenderer::loadAIModelFromPackageSizeaitype": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            NSValue* data = (NSValue*) HEAP[@([args[@"data"] integerValue])];
            // jsonable arg
            int size = [args[@"size"] intValue];
            // enum arg
            FUAITYPE type = (FUAITYPE) [args[@"type"] integerValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::loadAIModelFromPackage(%@, %@, %@)", args[@"data"], args[@"size"], args[@"type"]);
            }
        
            // invoke native method
            int result = [FURenderer loadAIModelFromPackage: [data pointerValue] size: size aitype: type];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"FURenderer::releaseAIModel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // enum arg
            FUAITYPE type = (FUAITYPE) [args[@"type"] integerValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::releaseAIModel(%@)", args[@"type"]);
            }
        
            // invoke native method
            int result = [FURenderer releaseAIModel: type];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"FURenderer::isAIModelLoaded": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // enum arg
            FUAITYPE type = (FUAITYPE) [args[@"type"] integerValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::isAIModelLoaded(%@)", args[@"type"]);
            }
        
            // invoke native method
            int result = [FURenderer isAIModelLoaded: type];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"FURenderer::itemSetParamWithNamevalue": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            int item = [args[@"item"] intValue];
            // jsonable arg
            NSString* name = (NSString*) args[@"name"];
            // ref arg
            id value = (id) HEAP[@([args[@"value"] integerValue])];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::itemSetParam(%@, %@, %@)", args[@"item"], args[@"name"], args[@"value"]);
            }
        
            // invoke native method
            int result = [FURenderer itemSetParam: item withName: name value: value];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"FURenderer::itemSetParamdvWithNamevaluelength": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            int item = [args[@"item"] intValue];
            // jsonable arg
            NSString* name = (NSString*) args[@"name"];
            // ref arg
            NSValue* value = (NSValue*) HEAP[@([args[@"value"] integerValue])];
            // jsonable arg
            int length = [args[@"length"] intValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::itemSetParamdv(%@, %@, %@, %@)", args[@"item"], args[@"name"], args[@"value"], args[@"length"]);
            }
        
            // invoke native method
            int result = [FURenderer itemSetParamdv: item withName: name value: [value pointerValue] length: length];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"FURenderer::itemGetParamdvWithNamebufferlength": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            int item = [args[@"item"] intValue];
            // jsonable arg
            NSString* name = (NSString*) args[@"name"];
            // ref arg
            NSValue* buffer = (NSValue*) HEAP[@([args[@"buffer"] integerValue])];
            // jsonable arg
            int length = [args[@"length"] intValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::itemGetParamdv(%@, %@, %@, %@)", args[@"item"], args[@"name"], args[@"buffer"], args[@"length"]);
            }
        
            // invoke native method
            int result = [FURenderer itemGetParamdv: item withName: name buffer: [buffer pointerValue] length: length];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"FURenderer::itemGetParamfvWithNamebufferlength": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            int item = [args[@"item"] intValue];
            // jsonable arg
            NSString* name = (NSString*) args[@"name"];
            // ref arg
            NSValue* buffer = (NSValue*) HEAP[@([args[@"buffer"] integerValue])];
            // jsonable arg
            int length = [args[@"length"] intValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::itemGetParamfv(%@, %@, %@, %@)", args[@"item"], args[@"name"], args[@"buffer"], args[@"length"]);
            }
        
            // invoke native method
            int result = [FURenderer itemGetParamfv: item withName: name buffer: [buffer pointerValue] length: length];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"FURenderer::getDoubleParamFromItemWithName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            int item = [args[@"item"] intValue];
            // jsonable arg
            NSString* name = (NSString*) args[@"name"];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::getDoubleParamFromItem(%@, %@)", args[@"item"], args[@"name"]);
            }
        
            // invoke native method
            double result = [FURenderer getDoubleParamFromItem: item withName: name];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"FURenderer::getStringParamFromItemWithName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            int item = [args[@"item"] intValue];
            // jsonable arg
            NSString* name = (NSString*) args[@"name"];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::getStringParamFromItem(%@, %@)", args[@"item"], args[@"name"]);
            }
        
            // invoke native method
            NSString* result = [FURenderer getStringParamFromItem: item withName: name];
        
            // result
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        @"FURenderer::itemSetParamu8vWithNamebuffersize": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            int item = [args[@"item"] intValue];
            // jsonable arg
            NSString* name = (NSString*) args[@"name"];
            // ref arg
            NSValue* buffer = (NSValue*) HEAP[@([args[@"buffer"] integerValue])];
            // jsonable arg
            int size = [args[@"size"] intValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::itemSetParamu8v(%@, %@, %@, %@)", args[@"item"], args[@"name"], args[@"buffer"], args[@"size"]);
            }
        
            // invoke native method
            int result = [FURenderer itemSetParamu8v: item withName: name buffer: [buffer pointerValue] size: size];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"FURenderer::itemGetParamu8vWithNamebuffersize": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            int item = [args[@"item"] intValue];
            // jsonable arg
            NSString* name = (NSString*) args[@"name"];
            // ref arg
            NSValue* buffer = (NSValue*) HEAP[@([args[@"buffer"] integerValue])];
            // jsonable arg
            int size = [args[@"size"] intValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::itemGetParamu8v(%@, %@, %@, %@)", args[@"item"], args[@"name"], args[@"buffer"], args[@"size"]);
            }
        
            // invoke native method
            int result = [FURenderer itemGetParamu8v: item withName: name buffer: [buffer pointerValue] size: size];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"FURenderer::isTracking": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::isTracking()");
            }
        
            // invoke native method
            int result = [FURenderer isTracking];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"FURenderer::setMaxFaces": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            int maxFaces = [args[@"maxFaces"] intValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::setMaxFaces(%@)", args[@"maxFaces"]);
            }
        
            // invoke native method
            int result = [FURenderer setMaxFaces: maxFaces];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"FURenderer::trackFaceInputDatawidthheight": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            int inputFormat = [args[@"inputFormat"] intValue];
            // ref arg
            NSValue* inputData = (NSValue*) HEAP[@([args[@"inputData"] integerValue])];
            // jsonable arg
            int width = [args[@"width"] intValue];
            // jsonable arg
            int height = [args[@"height"] intValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::trackFace(%@, %@, %@, %@)", args[@"inputFormat"], args[@"inputData"], args[@"width"], args[@"height"]);
            }
        
            // invoke native method
            int result = [FURenderer trackFace: inputFormat inputData: [inputData pointerValue] width: width height: height];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"FURenderer::trackFaceWithTongueInputDatawidthheight": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            int inputFormat = [args[@"inputFormat"] intValue];
            // ref arg
            NSValue* inputData = (NSValue*) HEAP[@([args[@"inputData"] integerValue])];
            // jsonable arg
            int width = [args[@"width"] intValue];
            // jsonable arg
            int height = [args[@"height"] intValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::trackFaceWithTongue(%@, %@, %@, %@)", args[@"inputFormat"], args[@"inputData"], args[@"width"], args[@"height"]);
            }
        
            // invoke native method
            int result = [FURenderer trackFaceWithTongue: inputFormat inputData: [inputData pointerValue] width: width height: height];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"FURenderer::getFaceInfoNamepretnumber": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            int faceId = [args[@"faceId"] intValue];
            // jsonable arg
            NSString* name = (NSString*) args[@"name"];
            // ref arg
            NSValue* pret = (NSValue*) HEAP[@([args[@"pret"] integerValue])];
            // jsonable arg
            int number = [args[@"number"] intValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::getFaceInfo(%@, %@, %@, %@)", args[@"faceId"], args[@"name"], args[@"pret"], args[@"number"]);
            }
        
            // invoke native method
            int result = [FURenderer getFaceInfo: faceId name: name pret: [pret pointerValue] number: number];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"FURenderer::getFaceIdentifier": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            int faceId = [args[@"faceId"] intValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::getFaceIdentifier(%@)", args[@"faceId"]);
            }
        
            // invoke native method
            int result = [FURenderer getFaceIdentifier: faceId];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"FURenderer::avatarBindItemsItemsitemsCountcontractscontractsCount": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            int avatarItem = [args[@"avatarItem"] intValue];
            // ref arg
            NSValue* items = (NSValue*) HEAP[@([args[@"items"] integerValue])];
            // jsonable arg
            int itemsCount = [args[@"itemsCount"] intValue];
            // ref arg
            NSValue* contracts = (NSValue*) HEAP[@([args[@"contracts"] integerValue])];
            // jsonable arg
            int contractsCount = [args[@"contractsCount"] intValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::avatarBindItems(%@, %@, %@, %@, %@)", args[@"avatarItem"], args[@"items"], args[@"itemsCount"], args[@"contracts"], args[@"contractsCount"]);
            }
        
            // invoke native method
            int result = [FURenderer avatarBindItems: avatarItem items: [items pointerValue] itemsCount: itemsCount contracts: [contracts pointerValue] contractsCount: contractsCount];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"FURenderer::avatarUnbindItemsItemsitemsCount": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            int avatarItem = [args[@"avatarItem"] intValue];
            // ref arg
            NSValue* items = (NSValue*) HEAP[@([args[@"items"] integerValue])];
            // jsonable arg
            int itemsCount = [args[@"itemsCount"] intValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::avatarUnbindItems(%@, %@, %@)", args[@"avatarItem"], args[@"items"], args[@"itemsCount"]);
            }
        
            // invoke native method
            int result = [FURenderer avatarUnbindItems: avatarItem items: [items pointerValue] itemsCount: itemsCount];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"FURenderer::bindItemsItemsitemsCount": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            int item = [args[@"item"] intValue];
            // ref arg
            NSValue* items = (NSValue*) HEAP[@([args[@"items"] integerValue])];
            // jsonable arg
            int itemsCount = [args[@"itemsCount"] intValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::bindItems(%@, %@, %@)", args[@"item"], args[@"items"], args[@"itemsCount"]);
            }
        
            // invoke native method
            int result = [FURenderer bindItems: item items: [items pointerValue] itemsCount: itemsCount];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"FURenderer::unBindItemsItemsitemsCount": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            int item = [args[@"item"] intValue];
            // ref arg
            NSValue* items = (NSValue*) HEAP[@([args[@"items"] integerValue])];
            // jsonable arg
            int itemsCount = [args[@"itemsCount"] intValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::unBindItems(%@, %@, %@)", args[@"item"], args[@"items"], args[@"itemsCount"]);
            }
        
            // invoke native method
            int result = [FURenderer unBindItems: item items: [items pointerValue] itemsCount: itemsCount];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"FURenderer::unbindAllItems": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            int item = [args[@"item"] intValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::unbindAllItems(%@)", args[@"item"]);
            }
        
            // invoke native method
            int result = [FURenderer unbindAllItems: item];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"FURenderer::getVersion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::getVersion()");
            }
        
            // invoke native method
            NSString* result = [FURenderer getVersion];
        
            // result
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        @"FURenderer::setExpressionCalibration": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            int expressionCalibration = [args[@"expressionCalibration"] intValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::setExpressionCalibration(%@)", args[@"expressionCalibration"]);
            }
        
            // invoke native method
            [FURenderer setExpressionCalibration: expressionCalibration];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"FURenderer::setFocalLengthScale": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            float scale = [args[@"scale"] floatValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::setFocalLengthScale(%@)", args[@"scale"]);
            }
        
            // invoke native method
            [FURenderer setFocalLengthScale: scale];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"FURenderer::setDefaultRotationMode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            int mode = [args[@"mode"] intValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::setDefaultRotationMode(%@)", args[@"mode"]);
            }
        
            // invoke native method
            [FURenderer setDefaultRotationMode: mode];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"FURenderer::setDeviceOrientation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            int orientation = [args[@"orientation"] intValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::setDeviceOrientation(%@)", args[@"orientation"]);
            }
        
            // invoke native method
            [FURenderer setDeviceOrientation: orientation];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"FURenderer::getCurrentRotationMode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::getCurrentRotationMode()");
            }
        
            // invoke native method
            int result = [FURenderer getCurrentRotationMode];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"FURenderer::setMultiSamples": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            int samples = [args[@"samples"] intValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::setMultiSamples(%@)", args[@"samples"]);
            }
        
            // invoke native method
            int result = [FURenderer setMultiSamples: samples];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"FURenderer::setAsyncTrackFaceEnable": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            int enable = [args[@"enable"] intValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::setAsyncTrackFaceEnable(%@)", args[@"enable"]);
            }
        
            // invoke native method
            [FURenderer setAsyncTrackFaceEnable: enable];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"FURenderer::setTongueTrackingEnable": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            int enable = [args[@"enable"] intValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::setTongueTrackingEnable(%@)", args[@"enable"]);
            }
        
            // invoke native method
            [FURenderer setTongueTrackingEnable: enable];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"FURenderer::loadTongueModelSize": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            NSValue* model = (NSValue*) HEAP[@([args[@"model"] integerValue])];
            // jsonable arg
            int size = [args[@"size"] intValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::loadTongueModel(%@, %@)", args[@"model"], args[@"size"]);
            }
        
            // invoke native method
            int result = [FURenderer loadTongueModel: [model pointerValue] size: size];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"FURenderer::create3DBodyTrackerSize": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            NSValue* model = (NSValue*) HEAP[@([args[@"model"] integerValue])];
            // jsonable arg
            int size = [args[@"size"] intValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::create3DBodyTracker(%@, %@)", args[@"model"], args[@"size"]);
            }
        
            // invoke native method
            void* result = [FURenderer create3DBodyTracker: [model pointerValue] size: size];
        
            // result
            // return a (value)*
            NSValue* resultValue = [NSValue valueWithPointer:result];
            HEAP[@((resultValue).hash)] = resultValue;
            NSNumber* jsonableResult = @((resultValue).hash);
        
            methodResult(jsonableResult);
        },
        @"FURenderer::destroy3DBodyTracker": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            NSValue* modelPtr = (NSValue*) HEAP[@([args[@"modelPtr"] integerValue])];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::destroy3DBodyTracker(%@)", args[@"modelPtr"]);
            }
        
            // invoke native method
            [FURenderer destroy3DBodyTracker: [modelPtr pointerValue]];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"FURenderer::run3DBodyTrackerHumanHandleinPtrinFormatwhrotationMode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            NSValue* modelPtr = (NSValue*) HEAP[@([args[@"modelPtr"] integerValue])];
            // jsonable arg
            int humanHandle = [args[@"humanHandle"] intValue];
            // ref arg
            NSValue* inPtr = (NSValue*) HEAP[@([args[@"inPtr"] integerValue])];
            // enum arg
            FUFormat inFormat = (FUFormat) [args[@"inFormat"] integerValue];
            // jsonable arg
            int w = [args[@"w"] intValue];
            // jsonable arg
            int h = [args[@"h"] intValue];
            // jsonable arg
            int rotationMode = [args[@"rotationMode"] intValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::run3DBodyTracker(%@, %@, %@, %@, %@, %@, %@)", args[@"modelPtr"], args[@"humanHandle"], args[@"inPtr"], args[@"inFormat"], args[@"w"], args[@"h"], args[@"rotationMode"]);
            }
        
            // invoke native method
            int result = [FURenderer run3DBodyTracker: [modelPtr pointerValue] humanHandle: humanHandle inPtr: [inPtr pointerValue] inFormat: inFormat w: w h: h rotationMode: rotationMode];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"FURenderer::faceCaptureCreateSize": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            NSValue* data = (NSValue*) HEAP[@([args[@"data"] integerValue])];
            // jsonable arg
            int size = [args[@"size"] intValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::faceCaptureCreate(%@, %@)", args[@"data"], args[@"size"]);
            }
        
            // invoke native method
            void* result = [FURenderer faceCaptureCreate: [data pointerValue] size: size];
        
            // result
            // return a (value)*
            NSValue* resultValue = [NSValue valueWithPointer:result];
            HEAP[@((resultValue).hash)] = resultValue;
            NSNumber* jsonableResult = @((resultValue).hash);
        
            methodResult(jsonableResult);
        },
        @"FURenderer::faceCaptureDestory": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            NSValue* model = (NSValue*) HEAP[@([args[@"model"] integerValue])];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::faceCaptureDestory(%@)", args[@"model"]);
            }
        
            // invoke native method
            [FURenderer faceCaptureDestory: [model pointerValue]];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"FURenderer::faceCaptureReset": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            NSValue* model = (NSValue*) HEAP[@([args[@"model"] integerValue])];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::faceCaptureReset(%@)", args[@"model"]);
            }
        
            // invoke native method
            int result = [FURenderer faceCaptureReset: [model pointerValue]];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"FURenderer::faceCaptureProcessFrameInPtrinFormatwhrotationMode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            NSValue* model = (NSValue*) HEAP[@([args[@"model"] integerValue])];
            // ref arg
            NSValue* inPtr = (NSValue*) HEAP[@([args[@"inPtr"] integerValue])];
            // enum arg
            FUFormat inFormat = (FUFormat) [args[@"inFormat"] integerValue];
            // jsonable arg
            int w = [args[@"w"] intValue];
            // jsonable arg
            int h = [args[@"h"] intValue];
            // jsonable arg
            int rotationMode = [args[@"rotationMode"] intValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::faceCaptureProcessFrame(%@, %@, %@, %@, %@, %@)", args[@"model"], args[@"inPtr"], args[@"inFormat"], args[@"w"], args[@"h"], args[@"rotationMode"]);
            }
        
            // invoke native method
            int result = [FURenderer faceCaptureProcessFrame: [model pointerValue] inPtr: [inPtr pointerValue] inFormat: inFormat w: w h: h rotationMode: rotationMode];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"FURenderer::faceCaptureGetResultLandmarksFaceNbufferlength": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            NSValue* model = (NSValue*) HEAP[@([args[@"model"] integerValue])];
            // jsonable arg
            int faceN = [args[@"faceN"] intValue];
            // ref arg
            NSValue* buffer = (NSValue*) HEAP[@([args[@"buffer"] integerValue])];
            // jsonable arg
            int length = [args[@"length"] intValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::faceCaptureGetResultLandmarks(%@, %@, %@, %@)", args[@"model"], args[@"faceN"], args[@"buffer"], args[@"length"]);
            }
        
            // invoke native method
            int result = [FURenderer faceCaptureGetResultLandmarks: [model pointerValue] faceN: faceN buffer: [buffer pointerValue] length: length];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"FURenderer::faceCaptureGetResultIdentityFaceNbufferlength": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            NSValue* model = (NSValue*) HEAP[@([args[@"model"] integerValue])];
            // jsonable arg
            int faceN = [args[@"faceN"] intValue];
            // ref arg
            NSValue* buffer = (NSValue*) HEAP[@([args[@"buffer"] integerValue])];
            // jsonable arg
            int length = [args[@"length"] intValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::faceCaptureGetResultIdentity(%@, %@, %@, %@)", args[@"model"], args[@"faceN"], args[@"buffer"], args[@"length"]);
            }
        
            // invoke native method
            int result = [FURenderer faceCaptureGetResultIdentity: [model pointerValue] faceN: faceN buffer: [buffer pointerValue] length: length];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"FURenderer::faceCaptureGetResultExpressionFaceNbufferlength": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            NSValue* model = (NSValue*) HEAP[@([args[@"model"] integerValue])];
            // jsonable arg
            int faceN = [args[@"faceN"] intValue];
            // ref arg
            NSValue* buffer = (NSValue*) HEAP[@([args[@"buffer"] integerValue])];
            // jsonable arg
            int length = [args[@"length"] intValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::faceCaptureGetResultExpression(%@, %@, %@, %@)", args[@"model"], args[@"faceN"], args[@"buffer"], args[@"length"]);
            }
        
            // invoke native method
            int result = [FURenderer faceCaptureGetResultExpression: [model pointerValue] faceN: faceN buffer: [buffer pointerValue] length: length];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"FURenderer::faceCaptureGetResultRotationFaceNbufferlength": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            NSValue* model = (NSValue*) HEAP[@([args[@"model"] integerValue])];
            // jsonable arg
            int faceN = [args[@"faceN"] intValue];
            // ref arg
            NSValue* buffer = (NSValue*) HEAP[@([args[@"buffer"] integerValue])];
            // jsonable arg
            int length = [args[@"length"] intValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::faceCaptureGetResultRotation(%@, %@, %@, %@)", args[@"model"], args[@"faceN"], args[@"buffer"], args[@"length"]);
            }
        
            // invoke native method
            int result = [FURenderer faceCaptureGetResultRotation: [model pointerValue] faceN: faceN buffer: [buffer pointerValue] length: length];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"FURenderer::faceCaptureGetResultTranslationFaceNbufferlength": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            NSValue* model = (NSValue*) HEAP[@([args[@"model"] integerValue])];
            // jsonable arg
            int faceN = [args[@"faceN"] intValue];
            // ref arg
            NSValue* buffer = (NSValue*) HEAP[@([args[@"buffer"] integerValue])];
            // jsonable arg
            int length = [args[@"length"] intValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::faceCaptureGetResultTranslation(%@, %@, %@, %@)", args[@"model"], args[@"faceN"], args[@"buffer"], args[@"length"]);
            }
        
            // invoke native method
            int result = [FURenderer faceCaptureGetResultTranslation: [model pointerValue] faceN: faceN buffer: [buffer pointerValue] length: length];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"FURenderer::faceCapturGetResultTongueExpFaceNbufferlength": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            NSValue* model = (NSValue*) HEAP[@([args[@"model"] integerValue])];
            // jsonable arg
            int faceN = [args[@"faceN"] intValue];
            // ref arg
            NSValue* buffer = (NSValue*) HEAP[@([args[@"buffer"] integerValue])];
            // jsonable arg
            int length = [args[@"length"] intValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::faceCapturGetResultTongueExp(%@, %@, %@, %@)", args[@"model"], args[@"faceN"], args[@"buffer"], args[@"length"]);
            }
        
            // invoke native method
            int result = [FURenderer faceCapturGetResultTongueExp: [model pointerValue] faceN: faceN buffer: [buffer pointerValue] length: length];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"FURenderer::faceCaptureGetResultIsFaceFaceN": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            NSValue* model = (NSValue*) HEAP[@([args[@"model"] integerValue])];
            // jsonable arg
            int faceN = [args[@"faceN"] intValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::faceCaptureGetResultIsFace(%@, %@)", args[@"model"], args[@"faceN"]);
            }
        
            // invoke native method
            int result = [FURenderer faceCaptureGetResultIsFace: [model pointerValue] faceN: faceN];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"FURenderer::faceCaptureGetResultFaceIDFaceN": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            NSValue* model = (NSValue*) HEAP[@([args[@"model"] integerValue])];
            // jsonable arg
            int faceN = [args[@"faceN"] intValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::faceCaptureGetResultFaceID(%@, %@)", args[@"model"], args[@"faceN"]);
            }
        
            // invoke native method
            int result = [FURenderer faceCaptureGetResultFaceID: [model pointerValue] faceN: faceN];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"FURenderer::faceCaptureGetResultTongueScoreFaceN": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            NSValue* model = (NSValue*) HEAP[@([args[@"model"] integerValue])];
            // jsonable arg
            int faceN = [args[@"faceN"] intValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::faceCaptureGetResultTongueScore(%@, %@)", args[@"model"], args[@"faceN"]);
            }
        
            // invoke native method
            float result = [FURenderer faceCaptureGetResultTongueScore: [model pointerValue] faceN: faceN];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"FURenderer::faceCaptureGetResultTongueClassFaceN": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            NSValue* model = (NSValue*) HEAP[@([args[@"model"] integerValue])];
            // jsonable arg
            int faceN = [args[@"faceN"] intValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::faceCaptureGetResultTongueClass(%@, %@)", args[@"model"], args[@"faceN"]);
            }
        
            // invoke native method
            int result = [FURenderer faceCaptureGetResultTongueClass: [model pointerValue] faceN: faceN];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"FURenderer::faceCaptureGetResultFocalLength": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            NSValue* model = (NSValue*) HEAP[@([args[@"model"] integerValue])];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::faceCaptureGetResultFocalLength(%@)", args[@"model"]);
            }
        
            // invoke native method
            float result = [FURenderer faceCaptureGetResultFocalLength: [model pointerValue]];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"FURenderer::faceCaptureGetResultFaceNum": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            NSValue* model = (NSValue*) HEAP[@([args[@"model"] integerValue])];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::faceCaptureGetResultFaceNum(%@)", args[@"model"]);
            }
        
            // invoke native method
            int result = [FURenderer faceCaptureGetResultFaceNum: [model pointerValue]];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"FURenderer::namaLibDestroy": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: FURenderer::namaLibDestroy()");
            }
        
            // invoke native method
            [FURenderer namaLibDestroy];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"FURotatedImage::init_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
        
        
                // ref
                FURotatedImage* ref = (FURotatedImage*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                FURotatedImage* result = [ref init];
        
                // result
                // return a ref
                HEAP[@((result).hash)] = result;
                NSNumber* jsonableResult = @((result).hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::shareRenderer_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
        
        
                // ref
        
        
                // invoke native method
                FURenderer* result = [FURenderer shareRenderer];
        
                // result
                // return a ref
                HEAP[@((result).hash)] = result;
                NSNumber* jsonableResult = @((result).hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::setBackCurrentContext_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
        
        
                // ref
                FURenderer* ref = (FURenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref setBackCurrentContext ];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::setUpCurrentContext_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
        
        
                // ref
                FURenderer* ref = (FURenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref setUpCurrentContext ];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::setupWithDataDataSizeardataauthPackageauthSize_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                NSValue* data = (NSValue*) HEAP[@([args[@"data"] integerValue])];
                // jsonable arg
                int dataSize = [args[@"dataSize"] intValue];
                // ref arg
                NSValue* ardata = (NSValue*) HEAP[@([args[@"ardata"] integerValue])];
                // ref arg
                NSValue* package = (NSValue*) HEAP[@([args[@"package"] integerValue])];
                // jsonable arg
                int size = [args[@"size"] intValue];
        
                // ref
                FURenderer* ref = (FURenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                int result = [ref setupWithData: [data pointerValue] dataSize: dataSize ardata: [ardata pointerValue] authPackage: [package pointerValue] authSize: size];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::setupWithDataDataSizeardataauthPackageauthSizeshouldCreateContext_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                NSValue* data = (NSValue*) HEAP[@([args[@"data"] integerValue])];
                // jsonable arg
                int dataSize = [args[@"dataSize"] intValue];
                // ref arg
                NSValue* ardata = (NSValue*) HEAP[@([args[@"ardata"] integerValue])];
                // ref arg
                NSValue* package = (NSValue*) HEAP[@([args[@"package"] integerValue])];
                // jsonable arg
                int size = [args[@"size"] intValue];
                // jsonable arg
                BOOL shouldCreate = [args[@"shouldCreate"] boolValue];
        
                // ref
                FURenderer* ref = (FURenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                int result = [ref setupWithData: [data pointerValue] dataSize: dataSize ardata: [ardata pointerValue] authPackage: [package pointerValue] authSize: size shouldCreateContext: shouldCreate];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::setupWithDataPathAuthPackageauthSizeshouldCreateContext_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                NSString* v3path = (NSString*) args[@"v3path"];
                // ref arg
                NSValue* package = (NSValue*) HEAP[@([args[@"package"] integerValue])];
                // jsonable arg
                int size = [args[@"size"] intValue];
                // jsonable arg
                BOOL shouldCreate = [args[@"shouldCreate"] boolValue];
        
                // ref
                FURenderer* ref = (FURenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                int result = [ref setupWithDataPath: v3path authPackage: [package pointerValue] authSize: size shouldCreateContext: shouldCreate];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::setupLocalWithV3PathOffLinePathauthPackageauthSizeshouldCreateContext_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                NSString* v3path = (NSString*) args[@"v3path"];
                // jsonable arg
                NSString* offLinePath = (NSString*) args[@"offLinePath"];
                // ref arg
                NSValue* package = (NSValue*) HEAP[@([args[@"package"] integerValue])];
                // jsonable arg
                int size = [args[@"size"] intValue];
                // jsonable arg
                BOOL shouldCreate = [args[@"shouldCreate"] boolValue];
        
                // ref
                FURenderer* ref = (FURenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                NSData* result = [ref setupLocalWithV3Path: v3path offLinePath: offLinePath authPackage: [package pointerValue] authSize: size shouldCreateContext: shouldCreate];
        
                // result
                // return a ref
                HEAP[@((result).hash)] = result;
                NSNumber* jsonableResult = @((result).hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::renderItemsInFormatoutPtroutFormatwidthheightframeIditemsitemCountflipx_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                NSValue* inPtr = (NSValue*) HEAP[@([args[@"inPtr"] integerValue])];
                // enum arg
                FUFormat inFormat = (FUFormat) [args[@"inFormat"] integerValue];
                // ref arg
                NSValue* outPtr = (NSValue*) HEAP[@([args[@"outPtr"] integerValue])];
                // enum arg
                FUFormat outFormat = (FUFormat) [args[@"outFormat"] integerValue];
                // jsonable arg
                int width = [args[@"width"] intValue];
                // jsonable arg
                int height = [args[@"height"] intValue];
                // jsonable arg
                int frameid = [args[@"frameid"] intValue];
                // ref arg
                NSValue* items = (NSValue*) HEAP[@([args[@"items"] integerValue])];
                // jsonable arg
                int itemCount = [args[@"itemCount"] intValue];
                // jsonable arg
                BOOL flip = [args[@"flip"] boolValue];
        
                // ref
                FURenderer* ref = (FURenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                int result = [ref renderItems: [inPtr pointerValue] inFormat: inFormat outPtr: [outPtr pointerValue] outFormat: outFormat width: width height: height frameId: frameid items: [items pointerValue] itemCount: itemCount flipx: flip];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::renderBundlesInFormatoutPtroutFormatwidthheightframeIditemsitemCount_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                NSValue* inPtr = (NSValue*) HEAP[@([args[@"inPtr"] integerValue])];
                // enum arg
                FUFormat inFormat = (FUFormat) [args[@"inFormat"] integerValue];
                // ref arg
                NSValue* outPtr = (NSValue*) HEAP[@([args[@"outPtr"] integerValue])];
                // enum arg
                FUFormat outFormat = (FUFormat) [args[@"outFormat"] integerValue];
                // jsonable arg
                int width = [args[@"width"] intValue];
                // jsonable arg
                int height = [args[@"height"] intValue];
                // jsonable arg
                int frameid = [args[@"frameid"] intValue];
                // ref arg
                NSValue* items = (NSValue*) HEAP[@([args[@"items"] integerValue])];
                // jsonable arg
                int itemCount = [args[@"itemCount"] intValue];
        
                // ref
                FURenderer* ref = (FURenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                int result = [ref renderBundles: [inPtr pointerValue] inFormat: inFormat outPtr: [outPtr pointerValue] outFormat: outFormat width: width height: height frameId: frameid items: [items pointerValue] itemCount: itemCount];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::renderBundlesSplitViewInFormatoutPtroutFormatwidthheightframeIditemsitemCountsplitViewInfoPtr_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                NSValue* inPtr = (NSValue*) HEAP[@([args[@"inPtr"] integerValue])];
                // enum arg
                FUFormat inFormat = (FUFormat) [args[@"inFormat"] integerValue];
                // ref arg
                NSValue* outPtr = (NSValue*) HEAP[@([args[@"outPtr"] integerValue])];
                // enum arg
                FUFormat outFormat = (FUFormat) [args[@"outFormat"] integerValue];
                // jsonable arg
                int width = [args[@"width"] intValue];
                // jsonable arg
                int height = [args[@"height"] intValue];
                // jsonable arg
                int frameid = [args[@"frameid"] intValue];
                // ref arg
                NSValue* items = (NSValue*) HEAP[@([args[@"items"] integerValue])];
                // jsonable arg
                int itemCount = [args[@"itemCount"] intValue];
                // list arg
                NSArray* splitViewInfoPtrRefIdArray = (NSArray*) args[@"splitViewInfoPtr"];
                TSplitViewInfo splitViewInfoPtr[splitViewInfoPtrRefIdArray.count];
        
                for (int i = 0; i < splitViewInfoPtrRefIdArray.count; i++) {
                    NSValue* splitViewInfoPtrValue = (NSValue*) HEAP[[splitViewInfoPtrRefIdArray objectAtIndex:i]];
                    TSplitViewInfo splitViewInfoPtrItem;
                    [splitViewInfoPtrValue getValue:&splitViewInfoPtrItem];
                    splitViewInfoPtr[i] = splitViewInfoPtrItem;
                }
        
                // ref
                FURenderer* ref = (FURenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                int result = [ref renderBundlesSplitView: [inPtr pointerValue] inFormat: inFormat outPtr: [outPtr pointerValue] outFormat: outFormat width: width height: height frameId: frameid items: [items pointerValue] itemCount: itemCount splitViewInfoPtr: splitViewInfoPtr];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::setInputCameraMatrixFlip_yrotate_mode_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                int flip_x = [args[@"flip_x"] intValue];
                // jsonable arg
                int flip_y = [args[@"flip_y"] intValue];
                // jsonable arg
                int rotate_mode = [args[@"rotate_mode"] intValue];
        
                // ref
                FURenderer* ref = (FURenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref setInputCameraMatrix : flip_x flip_y: flip_y rotate_mode: rotate_mode];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::setOutputResolutionH_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                int w = [args[@"w"] intValue];
                // jsonable arg
                int h = [args[@"h"] intValue];
        
                // ref
                FURenderer* ref = (FURenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref setOutputResolution : w h: h];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::rotateImageInPtrinFormatwidthheightrotationModeflipXflipY_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                FURotatedImage* outImage = (FURotatedImage*) HEAP[@([args[@"outImage"] integerValue])];
                // ref arg
                NSValue* inPtr = (NSValue*) HEAP[@([args[@"inPtr"] integerValue])];
                // enum arg
                FUFormat inFormat = (FUFormat) [args[@"inFormat"] integerValue];
                // jsonable arg
                int width = [args[@"width"] intValue];
                // jsonable arg
                int height = [args[@"height"] intValue];
                // enum arg
                FURotationMode rotationMode = (FURotationMode) [args[@"rotationMode"] integerValue];
                // jsonable arg
                BOOL flipX = [args[@"flipX"] boolValue];
                // jsonable arg
                BOOL flipY = [args[@"flipY"] boolValue];
        
                // ref
                FURenderer* ref = (FURenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                int result = [ref rotateImage: outImage inPtr: [inPtr pointerValue] inFormat: inFormat width: width height: height rotationMode: rotationMode flipX: flipX flipY: flipY];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::onCameraChange_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
        
        
                // ref
        
        
                // invoke native method
                [FURenderer onCameraChange];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::OnDeviceLost_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
        
        
                // ref
        
        
                // invoke native method
                [FURenderer OnDeviceLost];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::createItemFromPackageSize_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                NSValue* data = (NSValue*) HEAP[@([args[@"data"] integerValue])];
                // jsonable arg
                int size = [args[@"size"] intValue];
        
                // ref
        
        
                // invoke native method
                int result = [FURenderer createItemFromPackage: [data pointerValue] size: size];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::itemWithContentsOfFile_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                NSString* path = (NSString*) args[@"path"];
        
                // ref
        
        
                // invoke native method
                int result = [FURenderer itemWithContentsOfFile: path];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::destroyItem_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                int item = [args[@"item"] intValue];
        
                // ref
        
        
                // invoke native method
                [FURenderer destroyItem: item];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::destroyAllItems_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
        
        
                // ref
        
        
                // invoke native method
                [FURenderer destroyAllItems];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::loadAIModelFromPackageSizeaitype_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                NSValue* data = (NSValue*) HEAP[@([args[@"data"] integerValue])];
                // jsonable arg
                int size = [args[@"size"] intValue];
                // enum arg
                FUAITYPE type = (FUAITYPE) [args[@"type"] integerValue];
        
                // ref
        
        
                // invoke native method
                int result = [FURenderer loadAIModelFromPackage: [data pointerValue] size: size aitype: type];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::releaseAIModel_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // enum arg
                FUAITYPE type = (FUAITYPE) [args[@"type"] integerValue];
        
                // ref
        
        
                // invoke native method
                int result = [FURenderer releaseAIModel: type];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::isAIModelLoaded_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // enum arg
                FUAITYPE type = (FUAITYPE) [args[@"type"] integerValue];
        
                // ref
        
        
                // invoke native method
                int result = [FURenderer isAIModelLoaded: type];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::itemSetParamWithNamevalue_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                int item = [args[@"item"] intValue];
                // jsonable arg
                NSString* name = (NSString*) args[@"name"];
                // ref arg
                id value = (id) HEAP[@([args[@"value"] integerValue])];
        
                // ref
        
        
                // invoke native method
                int result = [FURenderer itemSetParam: item withName: name value: value];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::itemSetParamdvWithNamevaluelength_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                int item = [args[@"item"] intValue];
                // jsonable arg
                NSString* name = (NSString*) args[@"name"];
                // ref arg
                NSValue* value = (NSValue*) HEAP[@([args[@"value"] integerValue])];
                // jsonable arg
                int length = [args[@"length"] intValue];
        
                // ref
        
        
                // invoke native method
                int result = [FURenderer itemSetParamdv: item withName: name value: [value pointerValue] length: length];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::itemGetParamdvWithNamebufferlength_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                int item = [args[@"item"] intValue];
                // jsonable arg
                NSString* name = (NSString*) args[@"name"];
                // ref arg
                NSValue* buffer = (NSValue*) HEAP[@([args[@"buffer"] integerValue])];
                // jsonable arg
                int length = [args[@"length"] intValue];
        
                // ref
        
        
                // invoke native method
                int result = [FURenderer itemGetParamdv: item withName: name buffer: [buffer pointerValue] length: length];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::itemGetParamfvWithNamebufferlength_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                int item = [args[@"item"] intValue];
                // jsonable arg
                NSString* name = (NSString*) args[@"name"];
                // ref arg
                NSValue* buffer = (NSValue*) HEAP[@([args[@"buffer"] integerValue])];
                // jsonable arg
                int length = [args[@"length"] intValue];
        
                // ref
        
        
                // invoke native method
                int result = [FURenderer itemGetParamfv: item withName: name buffer: [buffer pointerValue] length: length];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::getDoubleParamFromItemWithName_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                int item = [args[@"item"] intValue];
                // jsonable arg
                NSString* name = (NSString*) args[@"name"];
        
                // ref
        
        
                // invoke native method
                double result = [FURenderer getDoubleParamFromItem: item withName: name];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::getStringParamFromItemWithName_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                int item = [args[@"item"] intValue];
                // jsonable arg
                NSString* name = (NSString*) args[@"name"];
        
                // ref
        
        
                // invoke native method
                NSString* result = [FURenderer getStringParamFromItem: item withName: name];
        
                // result
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::itemSetParamu8vWithNamebuffersize_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                int item = [args[@"item"] intValue];
                // jsonable arg
                NSString* name = (NSString*) args[@"name"];
                // ref arg
                NSValue* buffer = (NSValue*) HEAP[@([args[@"buffer"] integerValue])];
                // jsonable arg
                int size = [args[@"size"] intValue];
        
                // ref
        
        
                // invoke native method
                int result = [FURenderer itemSetParamu8v: item withName: name buffer: [buffer pointerValue] size: size];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::itemGetParamu8vWithNamebuffersize_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                int item = [args[@"item"] intValue];
                // jsonable arg
                NSString* name = (NSString*) args[@"name"];
                // ref arg
                NSValue* buffer = (NSValue*) HEAP[@([args[@"buffer"] integerValue])];
                // jsonable arg
                int size = [args[@"size"] intValue];
        
                // ref
        
        
                // invoke native method
                int result = [FURenderer itemGetParamu8v: item withName: name buffer: [buffer pointerValue] size: size];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::isTracking_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
        
        
                // ref
        
        
                // invoke native method
                int result = [FURenderer isTracking];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::setMaxFaces_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                int maxFaces = [args[@"maxFaces"] intValue];
        
                // ref
        
        
                // invoke native method
                int result = [FURenderer setMaxFaces: maxFaces];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::trackFaceInputDatawidthheight_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                int inputFormat = [args[@"inputFormat"] intValue];
                // ref arg
                NSValue* inputData = (NSValue*) HEAP[@([args[@"inputData"] integerValue])];
                // jsonable arg
                int width = [args[@"width"] intValue];
                // jsonable arg
                int height = [args[@"height"] intValue];
        
                // ref
        
        
                // invoke native method
                int result = [FURenderer trackFace: inputFormat inputData: [inputData pointerValue] width: width height: height];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::trackFaceWithTongueInputDatawidthheight_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                int inputFormat = [args[@"inputFormat"] intValue];
                // ref arg
                NSValue* inputData = (NSValue*) HEAP[@([args[@"inputData"] integerValue])];
                // jsonable arg
                int width = [args[@"width"] intValue];
                // jsonable arg
                int height = [args[@"height"] intValue];
        
                // ref
        
        
                // invoke native method
                int result = [FURenderer trackFaceWithTongue: inputFormat inputData: [inputData pointerValue] width: width height: height];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::getFaceInfoNamepretnumber_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                int faceId = [args[@"faceId"] intValue];
                // jsonable arg
                NSString* name = (NSString*) args[@"name"];
                // ref arg
                NSValue* pret = (NSValue*) HEAP[@([args[@"pret"] integerValue])];
                // jsonable arg
                int number = [args[@"number"] intValue];
        
                // ref
        
        
                // invoke native method
                int result = [FURenderer getFaceInfo: faceId name: name pret: [pret pointerValue] number: number];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::getFaceIdentifier_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                int faceId = [args[@"faceId"] intValue];
        
                // ref
        
        
                // invoke native method
                int result = [FURenderer getFaceIdentifier: faceId];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::avatarBindItemsItemsitemsCountcontractscontractsCount_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                int avatarItem = [args[@"avatarItem"] intValue];
                // ref arg
                NSValue* items = (NSValue*) HEAP[@([args[@"items"] integerValue])];
                // jsonable arg
                int itemsCount = [args[@"itemsCount"] intValue];
                // ref arg
                NSValue* contracts = (NSValue*) HEAP[@([args[@"contracts"] integerValue])];
                // jsonable arg
                int contractsCount = [args[@"contractsCount"] intValue];
        
                // ref
        
        
                // invoke native method
                int result = [FURenderer avatarBindItems: avatarItem items: [items pointerValue] itemsCount: itemsCount contracts: [contracts pointerValue] contractsCount: contractsCount];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::avatarUnbindItemsItemsitemsCount_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                int avatarItem = [args[@"avatarItem"] intValue];
                // ref arg
                NSValue* items = (NSValue*) HEAP[@([args[@"items"] integerValue])];
                // jsonable arg
                int itemsCount = [args[@"itemsCount"] intValue];
        
                // ref
        
        
                // invoke native method
                int result = [FURenderer avatarUnbindItems: avatarItem items: [items pointerValue] itemsCount: itemsCount];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::bindItemsItemsitemsCount_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                int item = [args[@"item"] intValue];
                // ref arg
                NSValue* items = (NSValue*) HEAP[@([args[@"items"] integerValue])];
                // jsonable arg
                int itemsCount = [args[@"itemsCount"] intValue];
        
                // ref
        
        
                // invoke native method
                int result = [FURenderer bindItems: item items: [items pointerValue] itemsCount: itemsCount];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::unBindItemsItemsitemsCount_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                int item = [args[@"item"] intValue];
                // ref arg
                NSValue* items = (NSValue*) HEAP[@([args[@"items"] integerValue])];
                // jsonable arg
                int itemsCount = [args[@"itemsCount"] intValue];
        
                // ref
        
        
                // invoke native method
                int result = [FURenderer unBindItems: item items: [items pointerValue] itemsCount: itemsCount];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::unbindAllItems_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                int item = [args[@"item"] intValue];
        
                // ref
        
        
                // invoke native method
                int result = [FURenderer unbindAllItems: item];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::getVersion_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
        
        
                // ref
        
        
                // invoke native method
                NSString* result = [FURenderer getVersion];
        
                // result
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::setExpressionCalibration_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                int expressionCalibration = [args[@"expressionCalibration"] intValue];
        
                // ref
        
        
                // invoke native method
                [FURenderer setExpressionCalibration: expressionCalibration];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::setFocalLengthScale_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                float scale = [args[@"scale"] floatValue];
        
                // ref
        
        
                // invoke native method
                [FURenderer setFocalLengthScale: scale];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::setDefaultRotationMode_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                int mode = [args[@"mode"] intValue];
        
                // ref
        
        
                // invoke native method
                [FURenderer setDefaultRotationMode: mode];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::setDeviceOrientation_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                int orientation = [args[@"orientation"] intValue];
        
                // ref
        
        
                // invoke native method
                [FURenderer setDeviceOrientation: orientation];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::getCurrentRotationMode_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
        
        
                // ref
        
        
                // invoke native method
                int result = [FURenderer getCurrentRotationMode];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::setMultiSamples_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                int samples = [args[@"samples"] intValue];
        
                // ref
        
        
                // invoke native method
                int result = [FURenderer setMultiSamples: samples];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::setAsyncTrackFaceEnable_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                int enable = [args[@"enable"] intValue];
        
                // ref
        
        
                // invoke native method
                [FURenderer setAsyncTrackFaceEnable: enable];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::setTongueTrackingEnable_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                int enable = [args[@"enable"] intValue];
        
                // ref
        
        
                // invoke native method
                [FURenderer setTongueTrackingEnable: enable];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::loadTongueModelSize_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                NSValue* model = (NSValue*) HEAP[@([args[@"model"] integerValue])];
                // jsonable arg
                int size = [args[@"size"] intValue];
        
                // ref
        
        
                // invoke native method
                int result = [FURenderer loadTongueModel: [model pointerValue] size: size];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::create3DBodyTrackerSize_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                NSValue* model = (NSValue*) HEAP[@([args[@"model"] integerValue])];
                // jsonable arg
                int size = [args[@"size"] intValue];
        
                // ref
        
        
                // invoke native method
                void* result = [FURenderer create3DBodyTracker: [model pointerValue] size: size];
        
                // result
                // return a (value)*
                NSValue* resultValue = [NSValue valueWithPointer:result];
                HEAP[@((resultValue).hash)] = resultValue;
                NSNumber* jsonableResult = @((resultValue).hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::destroy3DBodyTracker_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                NSValue* modelPtr = (NSValue*) HEAP[@([args[@"modelPtr"] integerValue])];
        
                // ref
        
        
                // invoke native method
                [FURenderer destroy3DBodyTracker: [modelPtr pointerValue]];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::run3DBodyTrackerHumanHandleinPtrinFormatwhrotationMode_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                NSValue* modelPtr = (NSValue*) HEAP[@([args[@"modelPtr"] integerValue])];
                // jsonable arg
                int humanHandle = [args[@"humanHandle"] intValue];
                // ref arg
                NSValue* inPtr = (NSValue*) HEAP[@([args[@"inPtr"] integerValue])];
                // enum arg
                FUFormat inFormat = (FUFormat) [args[@"inFormat"] integerValue];
                // jsonable arg
                int w = [args[@"w"] intValue];
                // jsonable arg
                int h = [args[@"h"] intValue];
                // jsonable arg
                int rotationMode = [args[@"rotationMode"] intValue];
        
                // ref
        
        
                // invoke native method
                int result = [FURenderer run3DBodyTracker: [modelPtr pointerValue] humanHandle: humanHandle inPtr: [inPtr pointerValue] inFormat: inFormat w: w h: h rotationMode: rotationMode];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::faceCaptureCreateSize_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                NSValue* data = (NSValue*) HEAP[@([args[@"data"] integerValue])];
                // jsonable arg
                int size = [args[@"size"] intValue];
        
                // ref
        
        
                // invoke native method
                void* result = [FURenderer faceCaptureCreate: [data pointerValue] size: size];
        
                // result
                // return a (value)*
                NSValue* resultValue = [NSValue valueWithPointer:result];
                HEAP[@((resultValue).hash)] = resultValue;
                NSNumber* jsonableResult = @((resultValue).hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::faceCaptureDestory_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                NSValue* model = (NSValue*) HEAP[@([args[@"model"] integerValue])];
        
                // ref
        
        
                // invoke native method
                [FURenderer faceCaptureDestory: [model pointerValue]];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::faceCaptureReset_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                NSValue* model = (NSValue*) HEAP[@([args[@"model"] integerValue])];
        
                // ref
        
        
                // invoke native method
                int result = [FURenderer faceCaptureReset: [model pointerValue]];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::faceCaptureProcessFrameInPtrinFormatwhrotationMode_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                NSValue* model = (NSValue*) HEAP[@([args[@"model"] integerValue])];
                // ref arg
                NSValue* inPtr = (NSValue*) HEAP[@([args[@"inPtr"] integerValue])];
                // enum arg
                FUFormat inFormat = (FUFormat) [args[@"inFormat"] integerValue];
                // jsonable arg
                int w = [args[@"w"] intValue];
                // jsonable arg
                int h = [args[@"h"] intValue];
                // jsonable arg
                int rotationMode = [args[@"rotationMode"] intValue];
        
                // ref
        
        
                // invoke native method
                int result = [FURenderer faceCaptureProcessFrame: [model pointerValue] inPtr: [inPtr pointerValue] inFormat: inFormat w: w h: h rotationMode: rotationMode];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::faceCaptureGetResultLandmarksFaceNbufferlength_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                NSValue* model = (NSValue*) HEAP[@([args[@"model"] integerValue])];
                // jsonable arg
                int faceN = [args[@"faceN"] intValue];
                // ref arg
                NSValue* buffer = (NSValue*) HEAP[@([args[@"buffer"] integerValue])];
                // jsonable arg
                int length = [args[@"length"] intValue];
        
                // ref
        
        
                // invoke native method
                int result = [FURenderer faceCaptureGetResultLandmarks: [model pointerValue] faceN: faceN buffer: [buffer pointerValue] length: length];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::faceCaptureGetResultIdentityFaceNbufferlength_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                NSValue* model = (NSValue*) HEAP[@([args[@"model"] integerValue])];
                // jsonable arg
                int faceN = [args[@"faceN"] intValue];
                // ref arg
                NSValue* buffer = (NSValue*) HEAP[@([args[@"buffer"] integerValue])];
                // jsonable arg
                int length = [args[@"length"] intValue];
        
                // ref
        
        
                // invoke native method
                int result = [FURenderer faceCaptureGetResultIdentity: [model pointerValue] faceN: faceN buffer: [buffer pointerValue] length: length];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::faceCaptureGetResultExpressionFaceNbufferlength_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                NSValue* model = (NSValue*) HEAP[@([args[@"model"] integerValue])];
                // jsonable arg
                int faceN = [args[@"faceN"] intValue];
                // ref arg
                NSValue* buffer = (NSValue*) HEAP[@([args[@"buffer"] integerValue])];
                // jsonable arg
                int length = [args[@"length"] intValue];
        
                // ref
        
        
                // invoke native method
                int result = [FURenderer faceCaptureGetResultExpression: [model pointerValue] faceN: faceN buffer: [buffer pointerValue] length: length];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::faceCaptureGetResultRotationFaceNbufferlength_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                NSValue* model = (NSValue*) HEAP[@([args[@"model"] integerValue])];
                // jsonable arg
                int faceN = [args[@"faceN"] intValue];
                // ref arg
                NSValue* buffer = (NSValue*) HEAP[@([args[@"buffer"] integerValue])];
                // jsonable arg
                int length = [args[@"length"] intValue];
        
                // ref
        
        
                // invoke native method
                int result = [FURenderer faceCaptureGetResultRotation: [model pointerValue] faceN: faceN buffer: [buffer pointerValue] length: length];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::faceCaptureGetResultTranslationFaceNbufferlength_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                NSValue* model = (NSValue*) HEAP[@([args[@"model"] integerValue])];
                // jsonable arg
                int faceN = [args[@"faceN"] intValue];
                // ref arg
                NSValue* buffer = (NSValue*) HEAP[@([args[@"buffer"] integerValue])];
                // jsonable arg
                int length = [args[@"length"] intValue];
        
                // ref
        
        
                // invoke native method
                int result = [FURenderer faceCaptureGetResultTranslation: [model pointerValue] faceN: faceN buffer: [buffer pointerValue] length: length];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::faceCapturGetResultTongueExpFaceNbufferlength_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                NSValue* model = (NSValue*) HEAP[@([args[@"model"] integerValue])];
                // jsonable arg
                int faceN = [args[@"faceN"] intValue];
                // ref arg
                NSValue* buffer = (NSValue*) HEAP[@([args[@"buffer"] integerValue])];
                // jsonable arg
                int length = [args[@"length"] intValue];
        
                // ref
        
        
                // invoke native method
                int result = [FURenderer faceCapturGetResultTongueExp: [model pointerValue] faceN: faceN buffer: [buffer pointerValue] length: length];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::faceCaptureGetResultIsFaceFaceN_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                NSValue* model = (NSValue*) HEAP[@([args[@"model"] integerValue])];
                // jsonable arg
                int faceN = [args[@"faceN"] intValue];
        
                // ref
        
        
                // invoke native method
                int result = [FURenderer faceCaptureGetResultIsFace: [model pointerValue] faceN: faceN];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::faceCaptureGetResultFaceIDFaceN_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                NSValue* model = (NSValue*) HEAP[@([args[@"model"] integerValue])];
                // jsonable arg
                int faceN = [args[@"faceN"] intValue];
        
                // ref
        
        
                // invoke native method
                int result = [FURenderer faceCaptureGetResultFaceID: [model pointerValue] faceN: faceN];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::faceCaptureGetResultTongueScoreFaceN_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                NSValue* model = (NSValue*) HEAP[@([args[@"model"] integerValue])];
                // jsonable arg
                int faceN = [args[@"faceN"] intValue];
        
                // ref
        
        
                // invoke native method
                float result = [FURenderer faceCaptureGetResultTongueScore: [model pointerValue] faceN: faceN];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::faceCaptureGetResultTongueClassFaceN_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                NSValue* model = (NSValue*) HEAP[@([args[@"model"] integerValue])];
                // jsonable arg
                int faceN = [args[@"faceN"] intValue];
        
                // ref
        
        
                // invoke native method
                int result = [FURenderer faceCaptureGetResultTongueClass: [model pointerValue] faceN: faceN];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::faceCaptureGetResultFocalLength_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                NSValue* model = (NSValue*) HEAP[@([args[@"model"] integerValue])];
        
                // ref
        
        
                // invoke native method
                float result = [FURenderer faceCaptureGetResultFocalLength: [model pointerValue]];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::faceCaptureGetResultFaceNum_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                NSValue* model = (NSValue*) HEAP[@([args[@"model"] integerValue])];
        
                // ref
        
        
                // invoke native method
                int result = [FURenderer faceCaptureGetResultFaceNum: [model pointerValue]];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"FURenderer::namaLibDestroy_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
        
        
                // ref
        
        
                // invoke native method
                [FURenderer namaLibDestroy];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"TCameraDesc::get_camera_id": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TCameraDesc::get_camera_id");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TCameraDesc ref;
            [dataValue getValue:&ref];
        
            // invoke native method
            int result = ref.camera_id;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"TAndroidDualMode::get_p_NV21": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TAndroidDualMode::get_p_NV21");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TAndroidDualMode ref;
            [dataValue getValue:&ref];
        
            // invoke native method
            void* result = ref.p_NV21;
        
            // return a (value)*
            NSValue* resultValue = [NSValue valueWithPointer:result];
            HEAP[@((resultValue).hash)] = resultValue;
            NSNumber* jsonableResult = @((resultValue).hash);
        
            methodResult(jsonableResult);
        },
        
        @"TAndroidDualMode::get_tex": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TAndroidDualMode::get_tex");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TAndroidDualMode ref;
            [dataValue getValue:&ref];
        
            // invoke native method
            int result = ref.tex;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"TAndroidDualMode::get_flags": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TAndroidDualMode::get_flags");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TAndroidDualMode ref;
            [dataValue getValue:&ref];
        
            // invoke native method
            int result = ref.flags;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"TNV12Buffer::get_p_Y": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TNV12Buffer::get_p_Y");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TNV12Buffer ref;
            [dataValue getValue:&ref];
        
            // invoke native method
            void* result = ref.p_Y;
        
            // return a (value)*
            NSValue* resultValue = [NSValue valueWithPointer:result];
            HEAP[@((resultValue).hash)] = resultValue;
            NSNumber* jsonableResult = @((resultValue).hash);
        
            methodResult(jsonableResult);
        },
        
        @"TNV12Buffer::get_p_CbCr": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TNV12Buffer::get_p_CbCr");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TNV12Buffer ref;
            [dataValue getValue:&ref];
        
            // invoke native method
            void* result = ref.p_CbCr;
        
            // return a (value)*
            NSValue* resultValue = [NSValue valueWithPointer:result];
            HEAP[@((resultValue).hash)] = resultValue;
            NSNumber* jsonableResult = @((resultValue).hash);
        
            methodResult(jsonableResult);
        },
        
        @"TNV12Buffer::get_stride_Y": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TNV12Buffer::get_stride_Y");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TNV12Buffer ref;
            [dataValue getValue:&ref];
        
            // invoke native method
            int result = ref.stride_Y;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"TNV12Buffer::get_stride_CbCr": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TNV12Buffer::get_stride_CbCr");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TNV12Buffer ref;
            [dataValue getValue:&ref];
        
            // invoke native method
            int result = ref.stride_CbCr;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"TIOSDualInput::get_p_BGRA": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TIOSDualInput::get_p_BGRA");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TIOSDualInput ref;
            [dataValue getValue:&ref];
        
            // invoke native method
            void* result = ref.p_BGRA;
        
            // return a (value)*
            NSValue* resultValue = [NSValue valueWithPointer:result];
            HEAP[@((resultValue).hash)] = resultValue;
            NSNumber* jsonableResult = @((resultValue).hash);
        
            methodResult(jsonableResult);
        },
        
        @"TIOSDualInput::get_p_Y": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TIOSDualInput::get_p_Y");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TIOSDualInput ref;
            [dataValue getValue:&ref];
        
            // invoke native method
            void* result = ref.p_Y;
        
            // return a (value)*
            NSValue* resultValue = [NSValue valueWithPointer:result];
            HEAP[@((resultValue).hash)] = resultValue;
            NSNumber* jsonableResult = @((resultValue).hash);
        
            methodResult(jsonableResult);
        },
        
        @"TIOSDualInput::get_p_CbCr": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TIOSDualInput::get_p_CbCr");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TIOSDualInput ref;
            [dataValue getValue:&ref];
        
            // invoke native method
            void* result = ref.p_CbCr;
        
            // return a (value)*
            NSValue* resultValue = [NSValue valueWithPointer:result];
            HEAP[@((resultValue).hash)] = resultValue;
            NSNumber* jsonableResult = @((resultValue).hash);
        
            methodResult(jsonableResult);
        },
        
        @"TIOSDualInput::get_stride_BGRA": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TIOSDualInput::get_stride_BGRA");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TIOSDualInput ref;
            [dataValue getValue:&ref];
        
            // invoke native method
            int result = ref.stride_BGRA;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"TIOSDualInput::get_stride_Y": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TIOSDualInput::get_stride_Y");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TIOSDualInput ref;
            [dataValue getValue:&ref];
        
            // invoke native method
            int result = ref.stride_Y;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"TIOSDualInput::get_stride_CbCr": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TIOSDualInput::get_stride_CbCr");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TIOSDualInput ref;
            [dataValue getValue:&ref];
        
            // invoke native method
            int result = ref.stride_CbCr;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"TIOSDualInput::get_tex_handle": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TIOSDualInput::get_tex_handle");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TIOSDualInput ref;
            [dataValue getValue:&ref];
        
            // invoke native method
            int result = ref.tex_handle;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"TIOSDualInput::get_format": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TIOSDualInput::get_format");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TIOSDualInput ref;
            [dataValue getValue:&ref];
        
            // invoke native method
            int result = ref.format;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"TSPECFBO::get_fbo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TSPECFBO::get_fbo");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TSPECFBO ref;
            [dataValue getValue:&ref];
        
            // invoke native method
            int result = ref.fbo;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"TSPECFBO::get_tex": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TSPECFBO::get_tex");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TSPECFBO ref;
            [dataValue getValue:&ref];
        
            // invoke native method
            int result = ref.tex;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"TGLRenderingDesc::get_image_output_mode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TGLRenderingDesc::get_image_output_mode");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TGLRenderingDesc ref;
            [dataValue getValue:&ref];
        
            // invoke native method
            int result = ref.image_output_mode;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"TGLRenderingDesc::get_param": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TGLRenderingDesc::get_param");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TGLRenderingDesc ref;
            [dataValue getValue:&ref];
        
            // invoke native method
            void* result = ref.param;
        
            // return a (value)*
            NSValue* resultValue = [NSValue valueWithPointer:result];
            HEAP[@((resultValue).hash)] = resultValue;
            NSNumber* jsonableResult = @((resultValue).hash);
        
            methodResult(jsonableResult);
        },
        
        @"TAvatarInfo::get_p_translation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TAvatarInfo::get_p_translation");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TAvatarInfo ref;
            [dataValue getValue:&ref];
        
            // invoke native method
            float* result = ref.p_translation;
        
            // return a (value)*
            NSValue* resultValue = [NSValue valueWithPointer:result];
            HEAP[@((resultValue).hash)] = resultValue;
            NSNumber* jsonableResult = @((resultValue).hash);
        
            methodResult(jsonableResult);
        },
        
        @"TAvatarInfo::get_p_rotation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TAvatarInfo::get_p_rotation");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TAvatarInfo ref;
            [dataValue getValue:&ref];
        
            // invoke native method
            float* result = ref.p_rotation;
        
            // return a (value)*
            NSValue* resultValue = [NSValue valueWithPointer:result];
            HEAP[@((resultValue).hash)] = resultValue;
            NSNumber* jsonableResult = @((resultValue).hash);
        
            methodResult(jsonableResult);
        },
        
        @"TAvatarInfo::get_p_expression": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TAvatarInfo::get_p_expression");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TAvatarInfo ref;
            [dataValue getValue:&ref];
        
            // invoke native method
            float* result = ref.p_expression;
        
            // return a (value)*
            NSValue* resultValue = [NSValue valueWithPointer:result];
            HEAP[@((resultValue).hash)] = resultValue;
            NSNumber* jsonableResult = @((resultValue).hash);
        
            methodResult(jsonableResult);
        },
        
        @"TAvatarInfo::get_rotation_mode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TAvatarInfo::get_rotation_mode");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TAvatarInfo ref;
            [dataValue getValue:&ref];
        
            // invoke native method
            float* result = ref.rotation_mode;
        
            // return a (value)*
            NSValue* resultValue = [NSValue valueWithPointer:result];
            HEAP[@((resultValue).hash)] = resultValue;
            NSNumber* jsonableResult = @((resultValue).hash);
        
            methodResult(jsonableResult);
        },
        
        @"TAvatarInfo::get_pupil_pos": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TAvatarInfo::get_pupil_pos");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TAvatarInfo ref;
            [dataValue getValue:&ref];
        
            // invoke native method
            float* result = ref.pupil_pos;
        
            // return a (value)*
            NSValue* resultValue = [NSValue valueWithPointer:result];
            HEAP[@((resultValue).hash)] = resultValue;
            NSNumber* jsonableResult = @((resultValue).hash);
        
            methodResult(jsonableResult);
        },
        
        @"TAvatarInfo::get_is_valid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TAvatarInfo::get_is_valid");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TAvatarInfo ref;
            [dataValue getValue:&ref];
        
            // invoke native method
            int result = ref.is_valid;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"TSplitViewInfo::get_in_ptr": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TSplitViewInfo::get_in_ptr");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TSplitViewInfo ref;
            [dataValue getValue:&ref];
        
            // invoke native method
            void* result = ref.in_ptr;
        
            // return a (value)*
            NSValue* resultValue = [NSValue valueWithPointer:result];
            HEAP[@((resultValue).hash)] = resultValue;
            NSNumber* jsonableResult = @((resultValue).hash);
        
            methodResult(jsonableResult);
        },
        
        @"TSplitViewInfo::get_in_type": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TSplitViewInfo::get_in_type");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TSplitViewInfo ref;
            [dataValue getValue:&ref];
        
            // invoke native method
            int result = ref.in_type;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"TSplitViewInfo::get_out_w": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TSplitViewInfo::get_out_w");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TSplitViewInfo ref;
            [dataValue getValue:&ref];
        
            // invoke native method
            int result = ref.out_w;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"TSplitViewInfo::get_out_h": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TSplitViewInfo::get_out_h");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TSplitViewInfo ref;
            [dataValue getValue:&ref];
        
            // invoke native method
            int result = ref.out_h;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"TSplitViewInfo::get_view_0_ratio": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TSplitViewInfo::get_view_0_ratio");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TSplitViewInfo ref;
            [dataValue getValue:&ref];
        
            // invoke native method
            float result = ref.view_0_ratio;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"TSplitViewInfo::get_margin_in_pixel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TSplitViewInfo::get_margin_in_pixel");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TSplitViewInfo ref;
            [dataValue getValue:&ref];
        
            // invoke native method
            int result = ref.margin_in_pixel;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"TSplitViewInfo::get_is_vertical": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TSplitViewInfo::get_is_vertical");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TSplitViewInfo ref;
            [dataValue getValue:&ref];
        
            // invoke native method
            int result = ref.is_vertical;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"TSplitViewInfo::get_is_image_first": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TSplitViewInfo::get_is_image_first");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TSplitViewInfo ref;
            [dataValue getValue:&ref];
        
            // invoke native method
            int result = ref.is_image_first;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"TSplitViewInfo::get_rotation_mode_before_crop": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TSplitViewInfo::get_rotation_mode_before_crop");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TSplitViewInfo ref;
            [dataValue getValue:&ref];
        
            // invoke native method
            int result = ref.rotation_mode_before_crop;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"TSplitViewInfo::get_crop_ratio_top": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TSplitViewInfo::get_crop_ratio_top");
            }
        
            // ref object
            NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
            TSplitViewInfo ref;
            [dataValue getValue:&ref];
        
            // invoke native method
            float result = ref.crop_ratio_top;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"FURotatedImage::get_mData": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"FURotatedImage::get_mData");
            }
        
            // ref object
            FURotatedImage* ref = (FURotatedImage*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            void* result = ref.mData;
        
            // return a (value)*
            NSValue* resultValue = [NSValue valueWithPointer:result];
            HEAP[@((resultValue).hash)] = resultValue;
            NSNumber* jsonableResult = @((resultValue).hash);
        
            methodResult(jsonableResult);
        },
        
        @"FURotatedImage::get_mWidth": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"FURotatedImage::get_mWidth");
            }
        
            // ref object
            FURotatedImage* ref = (FURotatedImage*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            int result = ref.mWidth;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"FURotatedImage::get_mHeight": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"FURotatedImage::get_mHeight");
            }
        
            // ref object
            FURotatedImage* ref = (FURotatedImage*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            int result = ref.mHeight;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"TCameraDesc::get_camera_id_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // ref object
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TCameraDesc ref;
                [dataValue getValue:&ref];
        
                int result = ref.camera_id;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"TAndroidDualMode::get_p_NV21_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // ref object
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TAndroidDualMode ref;
                [dataValue getValue:&ref];
        
                void* result = ref.p_NV21;
        
                // return a (value)*
                NSValue* resultValue = [NSValue valueWithPointer:result];
                HEAP[@((resultValue).hash)] = resultValue;
                NSNumber* jsonableResult = @((resultValue).hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"TAndroidDualMode::get_tex_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // ref object
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TAndroidDualMode ref;
                [dataValue getValue:&ref];
        
                int result = ref.tex;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"TAndroidDualMode::get_flags_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // ref object
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TAndroidDualMode ref;
                [dataValue getValue:&ref];
        
                int result = ref.flags;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"TNV12Buffer::get_p_Y_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // ref object
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TNV12Buffer ref;
                [dataValue getValue:&ref];
        
                void* result = ref.p_Y;
        
                // return a (value)*
                NSValue* resultValue = [NSValue valueWithPointer:result];
                HEAP[@((resultValue).hash)] = resultValue;
                NSNumber* jsonableResult = @((resultValue).hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"TNV12Buffer::get_p_CbCr_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // ref object
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TNV12Buffer ref;
                [dataValue getValue:&ref];
        
                void* result = ref.p_CbCr;
        
                // return a (value)*
                NSValue* resultValue = [NSValue valueWithPointer:result];
                HEAP[@((resultValue).hash)] = resultValue;
                NSNumber* jsonableResult = @((resultValue).hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"TNV12Buffer::get_stride_Y_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // ref object
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TNV12Buffer ref;
                [dataValue getValue:&ref];
        
                int result = ref.stride_Y;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"TNV12Buffer::get_stride_CbCr_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // ref object
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TNV12Buffer ref;
                [dataValue getValue:&ref];
        
                int result = ref.stride_CbCr;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"TIOSDualInput::get_p_BGRA_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // ref object
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TIOSDualInput ref;
                [dataValue getValue:&ref];
        
                void* result = ref.p_BGRA;
        
                // return a (value)*
                NSValue* resultValue = [NSValue valueWithPointer:result];
                HEAP[@((resultValue).hash)] = resultValue;
                NSNumber* jsonableResult = @((resultValue).hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"TIOSDualInput::get_p_Y_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // ref object
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TIOSDualInput ref;
                [dataValue getValue:&ref];
        
                void* result = ref.p_Y;
        
                // return a (value)*
                NSValue* resultValue = [NSValue valueWithPointer:result];
                HEAP[@((resultValue).hash)] = resultValue;
                NSNumber* jsonableResult = @((resultValue).hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"TIOSDualInput::get_p_CbCr_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // ref object
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TIOSDualInput ref;
                [dataValue getValue:&ref];
        
                void* result = ref.p_CbCr;
        
                // return a (value)*
                NSValue* resultValue = [NSValue valueWithPointer:result];
                HEAP[@((resultValue).hash)] = resultValue;
                NSNumber* jsonableResult = @((resultValue).hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"TIOSDualInput::get_stride_BGRA_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // ref object
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TIOSDualInput ref;
                [dataValue getValue:&ref];
        
                int result = ref.stride_BGRA;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"TIOSDualInput::get_stride_Y_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // ref object
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TIOSDualInput ref;
                [dataValue getValue:&ref];
        
                int result = ref.stride_Y;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"TIOSDualInput::get_stride_CbCr_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // ref object
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TIOSDualInput ref;
                [dataValue getValue:&ref];
        
                int result = ref.stride_CbCr;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"TIOSDualInput::get_tex_handle_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // ref object
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TIOSDualInput ref;
                [dataValue getValue:&ref];
        
                int result = ref.tex_handle;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"TIOSDualInput::get_format_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // ref object
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TIOSDualInput ref;
                [dataValue getValue:&ref];
        
                int result = ref.format;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"TSPECFBO::get_fbo_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // ref object
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TSPECFBO ref;
                [dataValue getValue:&ref];
        
                int result = ref.fbo;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
    };
}

@end
