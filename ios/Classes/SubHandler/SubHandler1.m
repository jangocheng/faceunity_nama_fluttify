//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

#import "SubHandler1.h"

// Dart端一次方法调用所存在的栈, 只有当MethodChannel传递参数受限时, 再启用这个容器
extern NSMutableDictionary<NSString*, NSObject*>* STACK;
// Dart端随机存取对象的容器
extern NSMutableDictionary<NSNumber*, NSObject*>* HEAP;
// 日志打印开关
extern BOOL enableLog;

@implementation NamaFluttifyPlugin (SubHandler1)
- (NSDictionary<NSString*, Handler>*) getSubHandler1 {
    return @{
        @"TAvatarInfo::set_rotation_mode_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                float rotation_mode = [args[@"rotation_mode"] floatValue];
        
                // ref
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TAvatarInfo ref;
                [dataValue getValue:&ref];
        
                ref.rotation_mode = rotation_mode;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"TAvatarInfo::set_pupil_pos_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                float pupil_pos = [args[@"pupil_pos"] floatValue];
        
                // ref
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TAvatarInfo ref;
                [dataValue getValue:&ref];
        
                ref.pupil_pos = pupil_pos;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"TAvatarInfo::set_is_valid_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                int is_valid = [args[@"is_valid"] intValue];
        
                // ref
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TAvatarInfo ref;
                [dataValue getValue:&ref];
        
                ref.is_valid = is_valid;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"TSplitViewInfo::set_in_ptr_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                void* in_ptr = (void*) HEAP[@([args[@"in_ptr"] integerValue])];
        
                // ref
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TSplitViewInfo ref;
                [dataValue getValue:&ref];
        
                ref.in_ptr = in_ptr;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"TSplitViewInfo::set_in_type_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                int in_type = [args[@"in_type"] intValue];
        
                // ref
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TSplitViewInfo ref;
                [dataValue getValue:&ref];
        
                ref.in_type = in_type;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"TSplitViewInfo::set_out_w_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                int out_w = [args[@"out_w"] intValue];
        
                // ref
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TSplitViewInfo ref;
                [dataValue getValue:&ref];
        
                ref.out_w = out_w;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"TSplitViewInfo::set_out_h_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                int out_h = [args[@"out_h"] intValue];
        
                // ref
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TSplitViewInfo ref;
                [dataValue getValue:&ref];
        
                ref.out_h = out_h;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"TSplitViewInfo::set_view_0_ratio_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                float view_0_ratio = [args[@"view_0_ratio"] floatValue];
        
                // ref
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TSplitViewInfo ref;
                [dataValue getValue:&ref];
        
                ref.view_0_ratio = view_0_ratio;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"TSplitViewInfo::set_margin_in_pixel_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                int margin_in_pixel = [args[@"margin_in_pixel"] intValue];
        
                // ref
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TSplitViewInfo ref;
                [dataValue getValue:&ref];
        
                ref.margin_in_pixel = margin_in_pixel;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"TSplitViewInfo::set_is_vertical_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                int is_vertical = [args[@"is_vertical"] intValue];
        
                // ref
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TSplitViewInfo ref;
                [dataValue getValue:&ref];
        
                ref.is_vertical = is_vertical;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"TSplitViewInfo::set_is_image_first_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                int is_image_first = [args[@"is_image_first"] intValue];
        
                // ref
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TSplitViewInfo ref;
                [dataValue getValue:&ref];
        
                ref.is_image_first = is_image_first;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"TSplitViewInfo::set_rotation_mode_before_crop_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                int rotation_mode_before_crop = [args[@"rotation_mode_before_crop"] intValue];
        
                // ref
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TSplitViewInfo ref;
                [dataValue getValue:&ref];
        
                ref.rotation_mode_before_crop = rotation_mode_before_crop;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"TSplitViewInfo::set_crop_ratio_top_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                float crop_ratio_top = [args[@"crop_ratio_top"] floatValue];
        
                // ref
                NSValue* dataValue = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
                TSplitViewInfo ref;
                [dataValue getValue:&ref];
        
                ref.crop_ratio_top = crop_ratio_top;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"FURotatedImage::set_mData_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // ref arg
                void* mData = (void*) HEAP[@([args[@"mData"] integerValue])];
        
                // ref
                FURotatedImage* ref = (FURotatedImage*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.mData = mData;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"FURotatedImage::set_mWidth_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                int mWidth = [args[@"mWidth"] intValue];
        
                // ref
                FURotatedImage* ref = (FURotatedImage*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.mWidth = mWidth;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"FURotatedImage::set_mHeight_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
        
                // args
                // jsonable arg
                int mHeight = [args[@"mHeight"] intValue];
        
                // ref
                FURotatedImage* ref = (FURotatedImage*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.mHeight = mHeight;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"RefClass::isKindOfFURotatedImage": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[FURotatedImage class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfFUAvatarInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[FUAvatarInfo class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfFURenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[FURenderer class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::asFURotatedImage": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (FURotatedImage *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asFUAvatarInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (FUAvatarInfo *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asFURenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (FURenderer *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"ObjectFactory::createTCameraDesc": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createTCameraDesc");
            }
        
            TCameraDesc data;
        
            NSValue* dataValue = [NSValue value:&data withObjCType:@encode(TCameraDesc)];
            HEAP[@(dataValue.hash)] = dataValue;
        
            methodResult(@(dataValue.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createTAndroidDualMode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createTAndroidDualMode");
            }
        
            TAndroidDualMode data;
        
            NSValue* dataValue = [NSValue value:&data withObjCType:@encode(TAndroidDualMode)];
            HEAP[@(dataValue.hash)] = dataValue;
        
            methodResult(@(dataValue.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createTNV12Buffer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createTNV12Buffer");
            }
        
            TNV12Buffer data;
        
            NSValue* dataValue = [NSValue value:&data withObjCType:@encode(TNV12Buffer)];
            HEAP[@(dataValue.hash)] = dataValue;
        
            methodResult(@(dataValue.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createTIOSDualInput": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createTIOSDualInput");
            }
        
            TIOSDualInput data;
        
            NSValue* dataValue = [NSValue value:&data withObjCType:@encode(TIOSDualInput)];
            HEAP[@(dataValue.hash)] = dataValue;
        
            methodResult(@(dataValue.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createTSPECFBO": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createTSPECFBO");
            }
        
            TSPECFBO data;
        
            NSValue* dataValue = [NSValue value:&data withObjCType:@encode(TSPECFBO)];
            HEAP[@(dataValue.hash)] = dataValue;
        
            methodResult(@(dataValue.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createTGLRenderingDesc": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createTGLRenderingDesc");
            }
        
            TGLRenderingDesc data;
        
            NSValue* dataValue = [NSValue value:&data withObjCType:@encode(TGLRenderingDesc)];
            HEAP[@(dataValue.hash)] = dataValue;
        
            methodResult(@(dataValue.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createTAvatarInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createTAvatarInfo");
            }
        
            TAvatarInfo data;
        
            NSValue* dataValue = [NSValue value:&data withObjCType:@encode(TAvatarInfo)];
            HEAP[@(dataValue.hash)] = dataValue;
        
            methodResult(@(dataValue.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createTSplitViewInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createTSplitViewInfo");
            }
        
            TSplitViewInfo data;
        
            NSValue* dataValue = [NSValue value:&data withObjCType:@encode(TSplitViewInfo)];
            HEAP[@(dataValue.hash)] = dataValue;
        
            methodResult(@(dataValue.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createFUOutput": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createFUOutput");
            }
        
            FUOutput data;
        
            NSValue* dataValue = [NSValue value:&data withObjCType:@encode(FUOutput)];
            HEAP[@(dataValue.hash)] = dataValue;
        
            methodResult(@(dataValue.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createFURotatedImage": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createFURotatedImage");
            }
        
            FURotatedImage* ref = [[FURotatedImage alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createFUAvatarInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createFUAvatarInfo");
            }
        
            FUAvatarInfo* ref = [[FUAvatarInfo alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createFURenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createFURenderer");
            }
        
            FURenderer* ref = [[FURenderer alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchTCameraDesc": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
                TCameraDesc data;
        
                NSValue* dataValue = [NSValue value:&data withObjCType:@encode(TCameraDesc)];
                HEAP[@(dataValue.hash)] = dataValue;
        
                [resultList addObject:@(dataValue.hash)];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchTAndroidDualMode": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
                TAndroidDualMode data;
        
                NSValue* dataValue = [NSValue value:&data withObjCType:@encode(TAndroidDualMode)];
                HEAP[@(dataValue.hash)] = dataValue;
        
                [resultList addObject:@(dataValue.hash)];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchTNV12Buffer": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
                TNV12Buffer data;
        
                NSValue* dataValue = [NSValue value:&data withObjCType:@encode(TNV12Buffer)];
                HEAP[@(dataValue.hash)] = dataValue;
        
                [resultList addObject:@(dataValue.hash)];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchTIOSDualInput": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
                TIOSDualInput data;
        
                NSValue* dataValue = [NSValue value:&data withObjCType:@encode(TIOSDualInput)];
                HEAP[@(dataValue.hash)] = dataValue;
        
                [resultList addObject:@(dataValue.hash)];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchTSPECFBO": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
                TSPECFBO data;
        
                NSValue* dataValue = [NSValue value:&data withObjCType:@encode(TSPECFBO)];
                HEAP[@(dataValue.hash)] = dataValue;
        
                [resultList addObject:@(dataValue.hash)];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchTGLRenderingDesc": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
                TGLRenderingDesc data;
        
                NSValue* dataValue = [NSValue value:&data withObjCType:@encode(TGLRenderingDesc)];
                HEAP[@(dataValue.hash)] = dataValue;
        
                [resultList addObject:@(dataValue.hash)];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchTAvatarInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
                TAvatarInfo data;
        
                NSValue* dataValue = [NSValue value:&data withObjCType:@encode(TAvatarInfo)];
                HEAP[@(dataValue.hash)] = dataValue;
        
                [resultList addObject:@(dataValue.hash)];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchTSplitViewInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
                TSplitViewInfo data;
        
                NSValue* dataValue = [NSValue value:&data withObjCType:@encode(TSplitViewInfo)];
                HEAP[@(dataValue.hash)] = dataValue;
        
                [resultList addObject:@(dataValue.hash)];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchFUOutput": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
                FUOutput data;
        
                NSValue* dataValue = [NSValue value:&data withObjCType:@encode(FUOutput)];
                HEAP[@(dataValue.hash)] = dataValue;
        
                [resultList addObject:@(dataValue.hash)];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchFURotatedImage": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
                FURotatedImage* ref = [[FURotatedImage alloc] init];
                HEAP[@(ref.hash)] = ref;
        
                [resultList addObject:@(ref.hash)];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchFUAvatarInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
                FUAvatarInfo* ref = [[FUAvatarInfo alloc] init];
                HEAP[@(ref.hash)] = ref;
        
                [resultList addObject:@(ref.hash)];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchFURenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
                FURenderer* ref = [[FURenderer alloc] init];
                HEAP[@(ref.hash)] = ref;
        
                [resultList addObject:@(ref.hash)];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"fu3DBodyTrackerDestroy::fu3DBodyTrackerDestroy": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            void* model_ptr = (void*) HEAP[@([args[@"model_ptr"] integerValue])];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: fu3DBodyTrackerDestroy::fu3DBodyTrackerDestroy(%@)", args[@"*model_ptr"]);
            }
        
            // invoke native method
            fu3DBodyTrackerDestroy(model_ptr);
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"fu3DBodyTrackerRun::fu3DBodyTrackerRun": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            void* model_ptr = (void*) HEAP[@([args[@"model_ptr"] integerValue])];
            // jsonable arg
            int human_handle = [args[@"human_handle"] intValue];
            // ref arg
            void* img = (void*) HEAP[@([args[@"img"] integerValue])];
            // jsonable arg
            int w = [args[@"w"] intValue];
            // jsonable arg
            int h = [args[@"h"] intValue];
            // jsonable arg
            int fu_image_format = [args[@"fu_image_format"] intValue];
            // jsonable arg
            int rotation_mode = [args[@"rotation_mode"] intValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: fu3DBodyTrackerRun::fu3DBodyTrackerRun(%@, %@, %@, %@, %@, %@, %@)", args[@"*model_ptr"], args[@"human_handle"], args[@"*img"], args[@"w"], args[@"h"], args[@"fu_image_format"], args[@"rotation_mode"]);
            }
        
            // invoke native method
            int result = fu3DBodyTrackerRun(model_ptr, human_handle, img, w, h, fu_image_format, rotation_mode);
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"fuFaceCaptureDestory::fuFaceCaptureDestory": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            void* model_ptr = (void*) HEAP[@([args[@"model_ptr"] integerValue])];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: fuFaceCaptureDestory::fuFaceCaptureDestory(%@)", args[@"*model_ptr"]);
            }
        
            // invoke native method
            int result = fuFaceCaptureDestory(model_ptr);
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"fuFaceCaptureSetScene::fuFaceCaptureSetScene": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            void* model_ptr = (void*) HEAP[@([args[@"model_ptr"] integerValue])];
            // jsonable arg
            int scene_type = [args[@"scene_type"] intValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: fuFaceCaptureSetScene::fuFaceCaptureSetScene(%@, %@)", args[@"*model_ptr"], args[@"scene_type"]);
            }
        
            // invoke native method
            int result = fuFaceCaptureSetScene(model_ptr, scene_type);
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"fuFaceCaptureSetBBOX::fuFaceCaptureSetBBOX": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            void* model_ptr = (void*) HEAP[@([args[@"model_ptr"] integerValue])];
            // jsonable arg
            int cx = [args[@"cx"] intValue];
            // jsonable arg
            int cy = [args[@"cy"] intValue];
            // jsonable arg
            int sx = [args[@"sx"] intValue];
            // jsonable arg
            int sy = [args[@"sy"] intValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: fuFaceCaptureSetBBOX::fuFaceCaptureSetBBOX(%@, %@, %@, %@, %@)", args[@"*model_ptr"], args[@"cx"], args[@"cy"], args[@"sx"], args[@"sy"]);
            }
        
            // invoke native method
            int result = fuFaceCaptureSetBBOX(model_ptr, cx, cy, sx, sy);
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"fuFaceCaptureReset::fuFaceCaptureReset": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            void* model_ptr = (void*) HEAP[@([args[@"model_ptr"] integerValue])];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: fuFaceCaptureReset::fuFaceCaptureReset(%@)", args[@"*model_ptr"]);
            }
        
            // invoke native method
            int result = fuFaceCaptureReset(model_ptr);
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"fuFaceCaptureProcessFrame::fuFaceCaptureProcessFrame": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            void* manager_ptr_addr = (void*) HEAP[@([args[@"manager_ptr_addr"] integerValue])];
            // ref arg
            void* image_data = (void*) HEAP[@([args[@"image_data"] integerValue])];
            // jsonable arg
            int image_w = [args[@"image_w"] intValue];
            // jsonable arg
            int image_h = [args[@"image_h"] intValue];
            // jsonable arg
            int fu_image_format = [args[@"fu_image_format"] intValue];
            // jsonable arg
            int rotate_mode = [args[@"rotate_mode"] intValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: fuFaceCaptureProcessFrame::fuFaceCaptureProcessFrame(%@, %@, %@, %@, %@, %@)", args[@"*manager_ptr_addr"], args[@"*image_data"], args[@"image_w"], args[@"image_h"], args[@"fu_image_format"], args[@"rotate_mode"]);
            }
        
            // invoke native method
            int result = fuFaceCaptureProcessFrame(manager_ptr_addr, image_data, image_w, image_h, fu_image_format, rotate_mode);
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"fuFaceCaptureGetResultIsFace::fuFaceCaptureGetResultIsFace": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            void* manager_ptr_addr = (void*) HEAP[@([args[@"manager_ptr_addr"] integerValue])];
            // jsonable arg
            int face_n = [args[@"face_n"] intValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: fuFaceCaptureGetResultIsFace::fuFaceCaptureGetResultIsFace(%@, %@)", args[@"*manager_ptr_addr"], args[@"face_n"]);
            }
        
            // invoke native method
            int result = fuFaceCaptureGetResultIsFace(manager_ptr_addr, face_n);
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"fuFaceCaptureGetResultFaceID::fuFaceCaptureGetResultFaceID": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            void* manager_ptr_addr = (void*) HEAP[@([args[@"manager_ptr_addr"] integerValue])];
            // jsonable arg
            int face_n = [args[@"face_n"] intValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: fuFaceCaptureGetResultFaceID::fuFaceCaptureGetResultFaceID(%@, %@)", args[@"*manager_ptr_addr"], args[@"face_n"]);
            }
        
            // invoke native method
            int result = fuFaceCaptureGetResultFaceID(manager_ptr_addr, face_n);
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"fuFaceCaptureGetResultFocalLength::fuFaceCaptureGetResultFocalLength": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            void* manager_ptr_addr = (void*) HEAP[@([args[@"manager_ptr_addr"] integerValue])];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: fuFaceCaptureGetResultFocalLength::fuFaceCaptureGetResultFocalLength(%@)", args[@"*manager_ptr_addr"]);
            }
        
            // invoke native method
            float result = fuFaceCaptureGetResultFocalLength(manager_ptr_addr);
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"fuFaceCaptureGetResultFaceNum::fuFaceCaptureGetResultFaceNum": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            void* manager_ptr_addr = (void*) HEAP[@([args[@"manager_ptr_addr"] integerValue])];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: fuFaceCaptureGetResultFaceNum::fuFaceCaptureGetResultFaceNum(%@)", args[@"*manager_ptr_addr"]);
            }
        
            // invoke native method
            int result = fuFaceCaptureGetResultFaceNum(manager_ptr_addr);
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"fuFaceCaptureGetResultTongueScore::fuFaceCaptureGetResultTongueScore": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            void* manager_ptr_addr = (void*) HEAP[@([args[@"manager_ptr_addr"] integerValue])];
            // jsonable arg
            int face_n = [args[@"face_n"] intValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: fuFaceCaptureGetResultTongueScore::fuFaceCaptureGetResultTongueScore(%@, %@)", args[@"*manager_ptr_addr"], args[@"face_n"]);
            }
        
            // invoke native method
            float result = fuFaceCaptureGetResultTongueScore(manager_ptr_addr, face_n);
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"fuFaceCaptureGetResultFaceScore::fuFaceCaptureGetResultFaceScore": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            void* manager_ptr_addr = (void*) HEAP[@([args[@"manager_ptr_addr"] integerValue])];
            // jsonable arg
            int face_n = [args[@"face_n"] intValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: fuFaceCaptureGetResultFaceScore::fuFaceCaptureGetResultFaceScore(%@, %@)", args[@"*manager_ptr_addr"], args[@"face_n"]);
            }
        
            // invoke native method
            float result = fuFaceCaptureGetResultFaceScore(manager_ptr_addr, face_n);
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"fuFaceCaptureGetResultTongueClass::fuFaceCaptureGetResultTongueClass": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            void* manager_ptr_addr = (void*) HEAP[@([args[@"manager_ptr_addr"] integerValue])];
            // jsonable arg
            int face_n = [args[@"face_n"] intValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: fuFaceCaptureGetResultTongueClass::fuFaceCaptureGetResultTongueClass(%@, %@)", args[@"*manager_ptr_addr"], args[@"face_n"]);
            }
        
            // invoke native method
            int result = fuFaceCaptureGetResultTongueClass(manager_ptr_addr, face_n);
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
    };
}

@end
